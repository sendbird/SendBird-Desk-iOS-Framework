// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9 (swiftlang-5.9.0.128.108 clang-1500.0.40.1)
// swift-module-flags: -target arm64-apple-ios12.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Osize -module-name SendbirdChatSDK
// swift-module-flags-ignorable: -enable-bare-slash-regex
import CommonCrypto
import CoreFoundation
import CoreGraphics
import Foundation
import Foundation/*.Data*/
import MobileCoreServices
import Network
import SQLite3
import Security
import Swift
import SwiftUI
import SystemConfiguration
import UIKit.UIDevice
import UIKit
import UserNotifications
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
import zlib
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(SBDAdminMessage) open class AdminMessage : SendbirdChatSDK.BaseMessage {
  override open func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
}
@usableFromInline
internal protocol _AnyDecodable {
  var value: Swift.Optional<Any> { get }
  init<T>(_ value: T?)
}
@usableFromInline
internal protocol _AnyEncodable {
  var value: Swift.Optional<Any> { get }
  init<T>(_ value: T?)
}
@_hasMissingDesignatedInitializers @objc(SBDAppInfo) final public class AppInfo : ObjectiveC.NSObject, Swift.Codable {
  @objc final public var emojiHash: Swift.String {
    get
  }
  @objc final public var uploadSizeLimit: Swift.Int64 {
    @objc get
  }
  @objc final public var premiumFeatureList: [Swift.String]? {
    get
  }
  @objc final public var useReaction: Swift.Bool {
    get
  }
  @objc final public var applicationAttributes: [Swift.String]? {
    get
  }
  @objc final public var useNativeWS: Swift.Bool {
    get
  }
  @objc final public var concurrentCallLimit: Swift.Int {
    get
  }
  @objc final public var backOffDelay: Swift.Double {
    get
  }
  @objc final public var notificationInfo: SendbirdChatSDK.NotificationInfo?
  @objc final public var messageTemplateInfo: SendbirdChatSDK.MessageTemplateInfo?
  final public let uikitConfigInfo: SendbirdChatSDK.UIKitConfigInfo
  @objc final public let multipleFilesMessageFileCountLimit: Swift.Int
  @objc final public func isEmojiUpdateNeeded(prevEmojiHash: Swift.String) -> Swift.Bool
  final public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
}
@objc(SBDAppleCriticalAlertOptions) final public class AppleCriticalAlertOptions : ObjectiveC.NSObject, Swift.Codable {
  @objc final public var name: Swift.String
  @objc final public var volume: Swift.Float
  @objc public init(name: Swift.String = "default", volume: Swift.Float = 1.0)
  final public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
}
extension SendbirdChatSDK.ApplicationUserListQuery {
  @available(*, unavailable, message: "Use `ApplicationUserListQueryParams`'s `setMetaDataFilter`")
  @objc final public func setMetaDataFilter(key: Swift.String?, values: [Swift.String]?)
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(SBDApplicationUserListQuery) final public class ApplicationUserListQuery : ObjectiveC.NSObject, SendbirdChatSDK.UserListQuery {
  @objc final public var hasNext: Swift.Bool {
    get
  }
  @objc final public var isLoading: Swift.Bool {
    get
  }
  @objc final public func loadNextPage(completionHandler: @escaping SendbirdChatSDK.UserListHandler)
  @objc final public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @objc deinit
}
extension SendbirdChatSDK.ApplicationUserListQuery {
  @objc final public var limit: Swift.UInt {
    @objc get
  }
  @objc final public var userIdsFilter: [Swift.String]? {
    @objc get
  }
  @objc final public var metaDataKeyFilter: Swift.String? {
    @objc get
  }
  @objc final public var metaDataValuesFilter: [Swift.String]? {
    @objc get
  }
  @objc final public var nicknameStartsWithFilter: Swift.String? {
    @objc get
  }
}
@_inheritsConvenienceInitializers @objc(SBDApplicationUserListQueryParams) final public class ApplicationUserListQueryParams : ObjectiveC.NSObject {
  @objc final public var userIdsFilter: [Swift.String]?
  @objc final public var nicknameStartsWithFilter: Swift.String?
  @objc final public var limit: Swift.UInt
  @objc final public var metaDataKeyFilter: Swift.String? {
    get
  }
  @objc final public var metaDataValuesFilter: [Swift.String]? {
    get
  }
  @objc override dynamic public init()
  @objc public init(builder: (SendbirdChatSDK.ApplicationUserListQueryParams) -> Swift.Void)
  @objc final public func setMetaDataFilter(key: Swift.String?, values: [Swift.String]?)
  @objc deinit
}
extension SendbirdChatSDK.ApplicationUserListQueryParams {
  @objc override final public func isEqual(_ object: Any?) -> Swift.Bool
}
extension SendbirdChatSDK.ApplicationUserListQueryParams : Foundation.NSCopying {
  @objc final public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
}
@propertyWrapper public class Atomic<T> {
  public var wrappedValue: T {
    get
    set
  }
  public var projectedValue: SendbirdChatSDK.Atomic<T> {
    get
  }
  public init(wrappedValue: T)
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(SBDBannedUserListQuery) final public class BannedUserListQuery : ObjectiveC.NSObject, SendbirdChatSDK.RestrictedUserListQuery {
  @objc final public var hasNext: Swift.Bool {
    get
  }
  @objc final public var isLoading: Swift.Bool {
    get
  }
  @objc final public func loadNextPage(completionHandler: @escaping SendbirdChatSDK.RestrictedUserListHandler)
  @objc final public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @objc deinit
}
extension SendbirdChatSDK.BannedUserListQuery {
  @objc final public var limit: Swift.UInt {
    @objc get
  }
}
@_inheritsConvenienceInitializers @objc(SBDBannedUserListQueryParams) final public class BannedUserListQueryParams : ObjectiveC.NSObject {
  @objc final public var limit: Swift.UInt
  @objc override dynamic public init()
  @objc public init(builder: (SendbirdChatSDK.BannedUserListQueryParams) -> Swift.Void)
  @objc deinit
}
extension SendbirdChatSDK.BannedUserListQueryParams {
  @objc override final public func isEqual(_ object: Any?) -> Swift.Bool
}
extension SendbirdChatSDK.BannedUserListQueryParams : Foundation.NSCopying {
  @objc final public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
}
extension SendbirdChatSDK.BaseChannel {
  @available(*, unavailable, renamed: "getMessageChangeLogs(token:params:completionHandler:)")
  public func getMessageChangeLogs(withToken: Swift.String?, completionHandler: SendbirdChatSDK.MessageChangeLogHandler?)
  @available(*, unavailable, renamed: "getMessageChangeLogs(timestamp:params:completionHandler:)")
  public func getMessageChangeLogs(byTimestamp: Swift.Int64, completionHandler: SendbirdChatSDK.MessageChangeLogHandler?)
}
extension SendbirdChatSDK.BaseChannel {
  @objc(getMessageChangeLogsSinceToken:params:completionHandler:) dynamic open func getMessageChangeLogs(token: Swift.String?, params: SendbirdChatSDK.MessageChangeLogsParams = MessageChangeLogsParams(), completionHandler: SendbirdChatSDK.MessageChangeLogHandler?)
  @objc(getMessageChangeLogsSinceTimestamp:params:completionHandler:) dynamic open func getMessageChangeLogs(timestamp: Swift.Int64, params: SendbirdChatSDK.MessageChangeLogsParams = MessageChangeLogsParams(), completionHandler: SendbirdChatSDK.MessageChangeLogHandler?)
  @objc dynamic open func getPollChangeLogs(token: Swift.String?, completionHandler: SendbirdChatSDK.PollChangeLogsHandler?)
  @objc dynamic open func getPollChangeLogs(timestamp: Swift.Int64, completionHandler: SendbirdChatSDK.PollChangeLogsHandler?)
}
extension SendbirdChatSDK.BaseChannel {
  @objc override dynamic public func isEqual(_ object: Any?) -> Swift.Bool
}
extension SendbirdChatSDK.GroupChannel {
  @objc override dynamic public func isEqual(_ object: Any?) -> Swift.Bool
}
extension SendbirdChatSDK.OpenChannel {
  @objc override dynamic public func isEqual(_ object: Any?) -> Swift.Bool
}
@objc extension SendbirdChatSDK.BaseChannel {
  @objc @discardableResult
  dynamic open func sendFileMessage(params: SendbirdChatSDK.FileMessageCreateParams, completionHandler: SendbirdChatSDK.FileMessageHandler?) -> SendbirdChatSDK.FileMessage?
  @objc @discardableResult
  dynamic open func sendFileMessage(params: SendbirdChatSDK.FileMessageCreateParams, progressHandler: SendbirdChatSDK.MultiProgressHandler?, completionHandler: SendbirdChatSDK.FileMessageHandler?) -> SendbirdChatSDK.FileMessage?
  @objc @discardableResult
  dynamic open func sendFileMessages(params: [SendbirdChatSDK.FileMessageCreateParams], progressHandler: SendbirdChatSDK.MultiProgressHandler?, sentMessageHandler: SendbirdChatSDK.FileMessageHandler?, completionHandler: SendbirdChatSDK.SBErrorHandler?) -> [SendbirdChatSDK.FileMessage]
  @objc dynamic open func updateFileMessage(messageId: Swift.Int64, params: SendbirdChatSDK.FileMessageUpdateParams, completionHandler: SendbirdChatSDK.FileMessageHandler?)
  @discardableResult
  @objc(resendFileMessageWithMessage:binaryData:completionHandler:) dynamic open func resendFileMessage(_ message: SendbirdChatSDK.FileMessage, binaryData: Foundation.Data?, completionHandler: SendbirdChatSDK.FileMessageHandler?) -> SendbirdChatSDK.FileMessage?
  @discardableResult
  @objc(resendFileMessageWithMessage:binaryData:progressHandler:completionHandler:) dynamic open func resendFileMessage(_ message: SendbirdChatSDK.FileMessage, binaryData: Foundation.Data?, progressHandler: SendbirdChatSDK.MultiProgressHandler?, completionHandler: SendbirdChatSDK.FileMessageHandler?) -> SendbirdChatSDK.FileMessage?
  @discardableResult
  @objc(copyFileMessage:toTargetChannel:completionHandler:) dynamic open func copyFileMessage(_ message: SendbirdChatSDK.FileMessage, toTargetChannel targetChannel: SendbirdChatSDK.BaseChannel, completionHandler: SendbirdChatSDK.FileMessageHandler?) -> SendbirdChatSDK.FileMessage?
  @objc(cancelUploadingFileMessageWithRequestId:completionHandler:) dynamic open class func cancelUploadingFileMessage(requestId: Swift.String, completionHandler: ((_ result: Swift.Bool, _ error: SendbirdChatSDK.SBError?) -> Swift.Void)?)
}
extension SendbirdChatSDK.MessageListParams {
  @objc override final public var description: Swift.String {
    @objc get
  }
}
@objc extension SendbirdChatSDK.BaseChannel {
  @objc dynamic open func getMessagesByTimestamp(_ timestamp: Swift.Int64, params: SendbirdChatSDK.MessageListParams, completionHandler: SendbirdChatSDK.MessageListHandler?)
  @objc dynamic open func getMessagesByMessageId(_ messageId: Swift.Int64, params: SendbirdChatSDK.MessageListParams, completionHandler: SendbirdChatSDK.MessageListHandler?)
}
@objc extension SendbirdChatSDK.BaseChannel {
  @objc(deleteMessage:completionHandler:) dynamic open func deleteMessage(_ message: SendbirdChatSDK.BaseMessage, completionHandler: SendbirdChatSDK.SBErrorHandler?)
  @objc dynamic open func deleteMessage(messageId: Swift.Int64, completionHandler: SendbirdChatSDK.SBErrorHandler?)
}
@objc extension SendbirdChatSDK.BaseChannel {
  @objc(createMessageMetaArrayKeysWithMessage:keys:completionHandler:) dynamic open func createMessageMetaArrayKeys(message: SendbirdChatSDK.BaseMessage, keys: [Swift.String], completionHandler: SendbirdChatSDK.BaseMessageHandler?)
  @objc(deleteMessageMetaArrayKeysWithMessage:keys:completionHandler:) dynamic open func deleteMessageMetaArrayKeys(message: SendbirdChatSDK.BaseMessage, keys: [Swift.String], completionHandler: SendbirdChatSDK.BaseMessageHandler?)
  @objc(addMessageMetaArrayValuesWithMessage:keyValues:completionHandler:) dynamic open func addMessageMetaArrayValues(message: SendbirdChatSDK.BaseMessage, keyValues: [Swift.String : [Swift.String]], completionHandler: SendbirdChatSDK.BaseMessageHandler?)
  @objc(addMessageMetaArrayValuesWithMessage:metaArrays:completionHandler:) dynamic open func addMessageMetaArrayValues(message: SendbirdChatSDK.BaseMessage, metaArrays: [SendbirdChatSDK.MessageMetaArray], completionHandler: SendbirdChatSDK.BaseMessageHandler?)
  @objc(removeMessageMetaArrayValuesWithMessage:keyValues:completionHandler:) dynamic open func removeMessageMetaArrayValues(message: SendbirdChatSDK.BaseMessage, keyValues: [Swift.String : [Swift.String]], completionHandler: SendbirdChatSDK.BaseMessageHandler?)
  @objc(removeMessageMetaArrayValuesWithMessage:metaArrays:completionHandler:) dynamic open func removeMessageMetaArrayValues(message: SendbirdChatSDK.BaseMessage, metaArrays: [SendbirdChatSDK.MessageMetaArray], completionHandler: SendbirdChatSDK.BaseMessageHandler?)
}
@objc extension SendbirdChatSDK.BaseChannel {
  @objc dynamic open func createMetaCounters(_ metaCounters: [Swift.String : Swift.Int], completionHandler: SendbirdChatSDK.MetaCountersHandler?)
  @objc dynamic open func getMetaCounters(keys: [Swift.String]?, completionHandler: SendbirdChatSDK.MetaCountersHandler?)
  @objc dynamic open func getAllMetaCounters(completionHandler: SendbirdChatSDK.MetaCountersHandler?)
  @objc dynamic open func updateMetaCounters(_ metaCounters: [Swift.String : Swift.Int], completionHandler: SendbirdChatSDK.MetaCountersHandler?)
  @objc dynamic open func increaseMetaCounters(_ metaCounters: [Swift.String : Swift.Int], completionHandler: SendbirdChatSDK.MetaCountersHandler?)
  @objc dynamic open func decreaseMetaCounters(_ metaCounters: [Swift.String : Swift.Int], completionHandler: SendbirdChatSDK.MetaCountersHandler?)
  @objc dynamic open func deleteMetaCounters(key: Swift.String, completionHandler: SendbirdChatSDK.SBErrorHandler?)
  @objc dynamic open func deleteAllMetaCounters(completionHandler: SendbirdChatSDK.SBErrorHandler?)
}
@objc extension SendbirdChatSDK.BaseChannel {
  @objc dynamic open func createMetaData(_ metaData: [Swift.String : Swift.String], completionHandler: SendbirdChatSDK.MetaDataHandler?)
  @objc dynamic open func getMetaData(keys: [Swift.String], completionHandler: SendbirdChatSDK.MetaDataHandler?)
  @objc dynamic open func getAllMetaData(completionHandler: SendbirdChatSDK.MetaDataHandler?)
  @objc dynamic open func updateMetaData(_ metaData: [Swift.String : Swift.String], completionHandler: SendbirdChatSDK.MetaDataHandler?)
  @objc dynamic open func deleteMetaData(key: Swift.String, completionHandler: SendbirdChatSDK.SBErrorHandler?)
  @objc dynamic open func deleteAllMetaData(completionHandler: SendbirdChatSDK.SBErrorHandler?)
  @objc dynamic open func getCachedMetaData() -> [Swift.String : Swift.String]
}
@objc extension SendbirdChatSDK.BaseChannel {
  @objc dynamic open func banUser(_ user: SendbirdChatSDK.User, seconds: Swift.Int, description: Swift.String?, completionHandler: SendbirdChatSDK.SBErrorHandler?)
  @objc dynamic open func banUser(userId: Swift.String, seconds: Swift.Int, description: Swift.String?, completionHandler: SendbirdChatSDK.SBErrorHandler?)
  @objc dynamic open func unbanUser(_ user: SendbirdChatSDK.User, completionHandler: SendbirdChatSDK.SBErrorHandler?)
  @objc dynamic open func unbanUser(userId: Swift.String, completionHandler: SendbirdChatSDK.SBErrorHandler?)
  @objc dynamic open func muteUser(_ user: SendbirdChatSDK.User, seconds: Swift.Int, description: Swift.String?, completionHandler: SendbirdChatSDK.SBErrorHandler?)
  @objc dynamic open func muteUser(userId: Swift.String, seconds: Swift.Int, description: Swift.String?, completionHandler: SendbirdChatSDK.SBErrorHandler?)
  @objc dynamic open func unmuteUser(userId: Swift.String, completionHandler: SendbirdChatSDK.SBErrorHandler?)
  @objc dynamic open func unmuteUser(_ user: SendbirdChatSDK.User, completionHandler: SendbirdChatSDK.SBErrorHandler?)
}
@objc extension SendbirdChatSDK.BaseChannel {
  @objc dynamic open func addOperators(userIds: [Swift.String], completionHandler: SendbirdChatSDK.SBErrorHandler?)
  @objc dynamic open func removeOperators(userIds: [Swift.String], completionHandler: SendbirdChatSDK.SBErrorHandler?)
  @objc dynamic open func removeAllOperators(completionHandler: SendbirdChatSDK.SBErrorHandler?)
}
@objc extension SendbirdChatSDK.BaseChannel {
  @objc dynamic open func pinMessage(messageId: Swift.Int64, completionHandler: SendbirdChatSDK.SBErrorHandler?)
  @objc dynamic open func unpinMessage(messageId: Swift.Int64, completionHandler: SendbirdChatSDK.SBErrorHandler?)
}
extension SendbirdChatSDK.BaseChannel {
  @objc dynamic open func updatePoll(pollId: Swift.Int64, params: SendbirdChatSDK.PollUpdateParams, completionHandler: SendbirdChatSDK.PollHandler?)
  @objc dynamic open func deletePoll(pollId: Swift.Int64, completionHandler: SendbirdChatSDK.SBErrorHandler?)
  @objc dynamic open func closePoll(pollId: Swift.Int64, completionHandler: SendbirdChatSDK.PollHandler?)
  @objc dynamic open func addPollOption(pollId: Swift.Int64, optionText: Swift.String, completionHandler: SendbirdChatSDK.PollHandler?)
  @objc dynamic open func updatePollOption(pollId: Swift.Int64, pollOptionId: Swift.Int64, optionText: Swift.String, completionHandler: SendbirdChatSDK.PollHandler?)
  @objc dynamic open func deletePollOption(pollId: Swift.Int64, pollOptionId: Swift.Int64, completionHandler: SendbirdChatSDK.SBErrorHandler?)
  @objc dynamic open func votePoll(pollId: Swift.Int64, pollOptionIds: [Swift.Int64], completionHandler: SendbirdChatSDK.PollVoteEventHandler)
}
extension SendbirdChatSDK.BaseChannel {
  @objc dynamic open func createBannedUserListQuery() -> SendbirdChatSDK.BannedUserListQuery?
  @objc dynamic open func createBannedUserListQuery(paramsBuilder: (SendbirdChatSDK.BannedUserListQueryParams) -> Swift.Void) -> SendbirdChatSDK.BannedUserListQuery?
  @objc dynamic open func createBannedUserListQuery(params: SendbirdChatSDK.BannedUserListQueryParams) -> SendbirdChatSDK.BannedUserListQuery?
  @objc dynamic open class func createBannedUserListQuery(channelType: SendbirdChatSDK.ChannelType, channelURL: Swift.String) -> SendbirdChatSDK.BannedUserListQuery
  @objc dynamic open class func createBannedUserListQuery(channelType: SendbirdChatSDK.ChannelType, channelURL: Swift.String, paramsBuilder: (SendbirdChatSDK.BannedUserListQueryParams) -> Swift.Void) -> SendbirdChatSDK.BannedUserListQuery
  @objc dynamic open class func createBannedUserListQuery(channelType: SendbirdChatSDK.ChannelType, channelURL: Swift.String, params: SendbirdChatSDK.BannedUserListQueryParams) -> SendbirdChatSDK.BannedUserListQuery
  @objc dynamic open func createMutedUserListQuery() -> SendbirdChatSDK.MutedUserListQuery?
  @objc dynamic open func createMutedUserListQuery(paramsBuilder: (SendbirdChatSDK.MutedUserListQueryParams) -> Swift.Void) -> SendbirdChatSDK.MutedUserListQuery?
  @objc dynamic open func createMutedUserListQuery(params: SendbirdChatSDK.MutedUserListQueryParams) -> SendbirdChatSDK.MutedUserListQuery?
  @objc dynamic open class func createMutedUserListQuery(channelType: SendbirdChatSDK.ChannelType, channelURL: Swift.String) -> SendbirdChatSDK.MutedUserListQuery
  @objc dynamic open class func createMutedUserListQuery(channelType: SendbirdChatSDK.ChannelType, channelURL: Swift.String, paramsBuilder: (SendbirdChatSDK.MutedUserListQueryParams) -> Swift.Void) -> SendbirdChatSDK.MutedUserListQuery
  @objc dynamic open class func createMutedUserListQuery(channelType: SendbirdChatSDK.ChannelType, channelURL: Swift.String, params: SendbirdChatSDK.MutedUserListQueryParams) -> SendbirdChatSDK.MutedUserListQuery
  @objc dynamic open func createPreviousMessageListQuery() -> SendbirdChatSDK.PreviousMessageListQuery?
  @objc dynamic open func createPreviousMessageListQuery(paramsBuilder: (SendbirdChatSDK.PreviousMessageListQueryParams) -> Swift.Void) -> SendbirdChatSDK.PreviousMessageListQuery?
  @objc dynamic open func createPreviousMessageListQuery(params: SendbirdChatSDK.PreviousMessageListQueryParams) -> SendbirdChatSDK.PreviousMessageListQuery?
  @objc dynamic open class func createPreviousMessageListQuery(channelType: SendbirdChatSDK.ChannelType, channelURL: Swift.String) -> SendbirdChatSDK.PreviousMessageListQuery
  @objc dynamic open class func createPreviousMessageListQuery(channelType: SendbirdChatSDK.ChannelType, channelURL: Swift.String, paramsBuilder: (SendbirdChatSDK.PreviousMessageListQueryParams) -> Swift.Void) -> SendbirdChatSDK.PreviousMessageListQuery
  @objc dynamic open class func createPreviousMessageListQuery(channelType: SendbirdChatSDK.ChannelType, channelURL: Swift.String, params: SendbirdChatSDK.PreviousMessageListQueryParams) -> SendbirdChatSDK.PreviousMessageListQuery
  @objc dynamic open func createOperatorListQuery() -> SendbirdChatSDK.OperatorListQuery?
  @objc dynamic open func createOperatorListQuery(paramsBuilder: (SendbirdChatSDK.OperatorListQueryParams) -> Swift.Void) -> SendbirdChatSDK.OperatorListQuery?
  @objc dynamic open func createOperatorListQuery(params: SendbirdChatSDK.OperatorListQueryParams) -> SendbirdChatSDK.OperatorListQuery?
  @objc dynamic open class func createOperatorListQuery(channelType: SendbirdChatSDK.ChannelType, channelURL: Swift.String) -> SendbirdChatSDK.OperatorListQuery
  @objc dynamic open class func createOperatorListQuery(channelType: SendbirdChatSDK.ChannelType, channelURL: Swift.String, paramsBuilder: (SendbirdChatSDK.OperatorListQueryParams) -> Swift.Void) -> SendbirdChatSDK.OperatorListQuery
  @objc dynamic open class func createOperatorListQuery(channelType: SendbirdChatSDK.ChannelType, channelURL: Swift.String, params: SendbirdChatSDK.OperatorListQueryParams) -> SendbirdChatSDK.OperatorListQuery
  @objc dynamic open func createPollListQuery(limit: Swift.UInt = 20) -> SendbirdChatSDK.PollListQuery?
  @objc dynamic open func createPollVoterListQuery(pollId: Swift.Int64, pollOptionId: Swift.Int64, limit: Swift.UInt = 20) -> SendbirdChatSDK.PollVoterListQuery
  @objc dynamic open func createPollVoterListQuery(pollId: Swift.Int64, pollOptionId: Swift.Int64) -> SendbirdChatSDK.PollVoterListQuery
  @objc dynamic open func createPinnedMessageListQuery() -> SendbirdChatSDK.PinnedMessageListQuery?
  @objc dynamic open func createPinnedMessageListQuery(paramsBuilder: (SendbirdChatSDK.PinnedMessageListQueryParams) -> Swift.Void) -> SendbirdChatSDK.PinnedMessageListQuery?
  @objc dynamic open func createPinnedMessageListQuery(params: SendbirdChatSDK.PinnedMessageListQueryParams) -> SendbirdChatSDK.PinnedMessageListQuery?
}
@objc extension SendbirdChatSDK.BaseChannel {
  @objc(addReactionWithMessage:key:completionHandler:) dynamic open func addReaction(with message: SendbirdChatSDK.BaseMessage, key: Swift.String, completionHandler: SendbirdChatSDK.ReactionEventHandler?)
  @objc(deleteReactionWithMessage:key:completionHandler:) dynamic open func deleteReaction(with message: SendbirdChatSDK.BaseMessage, key: Swift.String, completionHandler: SendbirdChatSDK.ReactionEventHandler?)
}
@objc extension SendbirdChatSDK.BaseChannel {
  @objc(reportUser:reportCategory:reportDescription:completionHandler:) dynamic open func report(offendingUser: SendbirdChatSDK.User, reportCategory: SendbirdChatSDK.ReportCategory, reportDescription: Swift.String?, completionHandler: SendbirdChatSDK.SBErrorHandler?)
  @objc(reportChannelWithCategory:reportDescription:completionHandler:) dynamic open func report(category: SendbirdChatSDK.ReportCategory, reportDescription: Swift.String?, completionHandler: SendbirdChatSDK.SBErrorHandler?)
  @objc(reportMessage:reportCategory:reportDescription:completionHandler:) dynamic open func report(message: SendbirdChatSDK.BaseMessage, reportCategory: SendbirdChatSDK.ReportCategory, reportDescription: Swift.String?, completionHandler: SendbirdChatSDK.SBErrorHandler?)
}
@objc extension SendbirdChatSDK.BaseChannel {
  @objc @discardableResult
  dynamic open func sendUserMessage(_ message: Swift.String, completionHandler: SendbirdChatSDK.UserMessageHandler?) -> SendbirdChatSDK.UserMessage
  @discardableResult
  @objc(sendUserMessageWithParams:completionHandler:) dynamic open func sendUserMessage(params: SendbirdChatSDK.UserMessageCreateParams, completionHandler: SendbirdChatSDK.UserMessageHandler?) -> SendbirdChatSDK.UserMessage
  @discardableResult
  @objc(resendUserMessageWithMessage:completionHandler:) dynamic open func resendUserMessage(_ message: SendbirdChatSDK.UserMessage, completionHandler: SendbirdChatSDK.UserMessageHandler?) -> SendbirdChatSDK.UserMessage
  @discardableResult
  @objc(copyUserMessage:toTargetChannel:completionHandler:) dynamic open func copyUserMessage(_ message: SendbirdChatSDK.UserMessage, toTargetChannel targetChannel: SendbirdChatSDK.BaseChannel, completionHandler: SendbirdChatSDK.UserMessageHandler?) -> SendbirdChatSDK.UserMessage?
  @objc dynamic open func updateUserMessage(messageId: Swift.Int64, params: SendbirdChatSDK.UserMessageUpdateParams, completionHandler: SendbirdChatSDK.UserMessageHandler?)
  @objc dynamic open func translateUserMessage(_ message: SendbirdChatSDK.UserMessage, targetLanguages: [Swift.String], completionHandler: SendbirdChatSDK.UserMessageHandler?)
}
extension SendbirdChatSDK.BaseChannel {
  @available(*, unavailable, renamed: "channelURL")
  @objc dynamic public var channelUrl: Swift.String? {
    @objc get
  }
  @available(*, unavailable, renamed: "coverURL")
  @objc dynamic public var coverUrl: Swift.String? {
    @objc get
  }
}
@_hasMissingDesignatedInitializers @objc(SBDBaseChannel) open class BaseChannel : ObjectiveC.NSObject, Swift.Codable, Swift.Identifiable {
  @objc open var id: Swift.String {
    @objc get
  }
  @objc open var channelURL: Swift.String {
    get
  }
  @objc open var name: Swift.String {
    get
  }
  @objc open var coverURL: Swift.String? {
    get
  }
  @objc open var creator: SendbirdChatSDK.User? {
    get
  }
  @objc open var createdAt: Swift.Int64 {
    get
  }
  @objc open var data: Swift.String? {
    get
  }
  @objc open var customType: Swift.String? {
    get
  }
  @objc open var isFrozen: Swift.Bool {
    get
  }
  @objc open var isEphemeral: Swift.Bool {
    get
  }
  @objc open var pinnedMessageIds: [Swift.Int64]? {
    get
  }
  @objc open var lastPinnedMessage: SendbirdChatSDK.BaseMessage? {
    get
  }
  @objc open func getMyMutedInfo(completionHandler: SendbirdChatSDK.MuteInfoHandler?)
  @objc open var channelType: SendbirdChatSDK.ChannelType {
    @objc get
  }
  @objc open var isDirty: Swift.Bool
  @objc open func isOpenChannel() -> Swift.Bool
  @objc open func isGroupChannel() -> Swift.Bool
  @objc open func isFeedChannel() -> Swift.Bool
  @objc public var messageCollectionLastAccessedAt: Swift.Int64 {
    get
  }
  open func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
  @objc override dynamic open var description: Swift.String {
    @objc get
  }
  public typealias ID = Swift.String
  @objc deinit
}
extension SendbirdChatSDK.BaseChannel : SendbirdChatSDK.Serializable {
  @objc dynamic open func serialize() -> Foundation.Data?
  @objc dynamic open class func build(fromSerializedData data: Foundation.Data?) -> Self?
}
@objc(SBDBaseChannelDelegate) public protocol BaseChannelDelegate {
  @objc(channel:didReceiveMessage:) optional func channel(_ channel: SendbirdChatSDK.BaseChannel, didReceive message: SendbirdChatSDK.BaseMessage)
  @objc(channel:didUpdateMessage:) optional func channel(_ channel: SendbirdChatSDK.BaseChannel, didUpdate message: SendbirdChatSDK.BaseMessage)
  @objc(channel:didReceiveMention:) optional func channel(_ channel: SendbirdChatSDK.BaseChannel, didReceiveMention message: SendbirdChatSDK.BaseMessage)
  @objc optional func channel(_ channel: SendbirdChatSDK.BaseChannel, userWasMuted user: SendbirdChatSDK.RestrictedUser)
  @objc optional func channel(_ channel: SendbirdChatSDK.BaseChannel, userWasUnmuted user: SendbirdChatSDK.User)
  @objc optional func channel(_ channel: SendbirdChatSDK.BaseChannel, userWasBanned user: SendbirdChatSDK.RestrictedUser)
  @objc optional func channel(_ channel: SendbirdChatSDK.BaseChannel, userWasUnbanned user: SendbirdChatSDK.User)
  @objc optional func channelWasFrozen(_ channel: SendbirdChatSDK.BaseChannel)
  @objc optional func channelWasUnfrozen(_ channel: SendbirdChatSDK.BaseChannel)
  @objc optional func channelWasChanged(_ channel: SendbirdChatSDK.BaseChannel)
  @objc optional func channelWasDeleted(_ channelURL: Swift.String, channelType: SendbirdChatSDK.ChannelType)
  @objc optional func channel(_ channel: SendbirdChatSDK.BaseChannel, messageWasDeleted messageId: Swift.Int64)
  @objc optional func channel(_ channel: SendbirdChatSDK.BaseChannel, createdMetaData: [Swift.String : Swift.String]?)
  @objc optional func channel(_ channel: SendbirdChatSDK.BaseChannel, updatedMetaData: [Swift.String : Swift.String]?)
  @objc optional func channel(_ channel: SendbirdChatSDK.BaseChannel, deletedMetaDataKeys: [Swift.String]?)
  @objc optional func channel(_ channel: SendbirdChatSDK.BaseChannel, createdMetaCounters: [Swift.String : Swift.Int]?)
  @objc optional func channel(_ channel: SendbirdChatSDK.BaseChannel, updatedMetaCounters: [Swift.String : Swift.Int]?)
  @objc optional func channel(_ channel: SendbirdChatSDK.BaseChannel, deletedMetaCountersKeys: [Swift.String]?)
  @objc optional func channel(_ channel: SendbirdChatSDK.BaseChannel, updatedReaction reactionEvent: SendbirdChatSDK.ReactionEvent)
  @objc optional func channelDidUpdateOperators(_ channel: SendbirdChatSDK.BaseChannel)
  @objc optional func channel(_ channel: SendbirdChatSDK.BaseChannel, didUpdateThreadInfo threadInfoUpdateEvent: SendbirdChatSDK.ThreadInfoUpdateEvent)
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(SBDBaseCollection) open class BaseCollection : ObjectiveC.NSObject {
  @objc deinit
}
extension SendbirdChatSDK.BaseMessage {
  @objc override dynamic public func isEqual(_ object: Any?) -> Swift.Bool
}
extension SendbirdChatSDK.UserMessage {
  @objc override dynamic public func isEqual(_ object: Any?) -> Swift.Bool
}
extension SendbirdChatSDK.FileMessage {
  @objc override dynamic public func isEqual(_ object: Any?) -> Swift.Bool
}
@objc extension SendbirdChatSDK.BaseMessage {
  @objc dynamic open func isOpenChannel() -> Swift.Bool
  @objc dynamic open func isGroupChannel() -> Swift.Bool
  @objc dynamic open func isFeedChannel() -> Swift.Bool
  @objc dynamic open func isResendable() -> Swift.Bool
  @objc dynamic open func metaArrays(keys: [Swift.String]) -> [SendbirdChatSDK.MessageMetaArray]
  @discardableResult
  @objc(applyReactionEvent:) dynamic open func apply(_ reactionEvent: SendbirdChatSDK.ReactionEvent) -> Swift.Bool
  @discardableResult
  @objc(applyThreadInfoUpdateEvent:) dynamic open func apply(_ threadInfoUpdateEvent: SendbirdChatSDK.ThreadInfoUpdateEvent) -> Swift.Bool
  @objc(getMessageWithParams:completionHandler:) dynamic open class func getMessage(params: SendbirdChatSDK.MessageRetrievalParams, completionHandler: SendbirdChatSDK.BaseMessageHandler?)
  @objc(getThreadedMessagesWithTimestamp:params:completionHandler:) dynamic open func getThreadedMessages(timestamp: Swift.Int64, params: SendbirdChatSDK.ThreadedMessageListParams, completionHandler: SendbirdChatSDK.ThreadedMessageListHandler?)
  @objc(getScheduledMessageWithParams:completionHandler:) dynamic open class func getScheduledMessage(params: SendbirdChatSDK.ScheduledMessageRetrievalParams, completionHandler: SendbirdChatSDK.BaseMessageHandler?)
  @objc(submitFeedbackWithRating:comment:completionHandler:) dynamic open func submitFeedback(rating: SendbirdChatSDK.Feedback.Rating, comment: Swift.String? = nil, completionHandler: SendbirdChatSDK.FeedbackHandler? = nil)
  @objc(updateFeedbackWithRating:comment:completionHandler:) dynamic open func updateFeedback(rating: SendbirdChatSDK.Feedback.Rating, comment: Swift.String? = nil, completionHandler: SendbirdChatSDK.FeedbackHandler? = nil)
  @objc(deleteFeedbackWithCompletionHandler:) dynamic open func deleteFeedback(completionHandler: SendbirdChatSDK.SBErrorHandler?)
  @available(*, deprecated, renamed: "submitForm(form:completionHandler:)", message: "This method is deprecated in 4.14.1.")
  @objc(submitFormWithFormKey:answers:completionHandler:) dynamic open func submitForm(formKey: Swift.String, answers: [Swift.String : Swift.String], completionHandler: SendbirdChatSDK.SBErrorHandler?)
  @objc(submitFormWithForm:completionHandler:) dynamic open func submitForm(form: SendbirdChatSDK.Form, completionHandler: SendbirdChatSDK.SBErrorHandler?)
}
@_hasMissingDesignatedInitializers @objc(SBDBaseMessage) open class BaseMessage : ObjectiveC.NSObject, Swift.Codable, Foundation.NSCopying, Swift.Identifiable {
  @objc open var id: Swift.AnyHashable {
    @objc get
  }
  @objc open var requestId: Swift.String {
    get
  }
  @objc final public let messageId: Swift.Int64
  @objc final public let message: Swift.String
  @objc open var sendingStatus: SendbirdChatSDK.MessageSendingStatus {
    get
  }
  @objc open var scheduledInfo: SendbirdChatSDK.ScheduledInfo? {
    get
  }
  @objc open var sender: SendbirdChatSDK.Sender? {
    @objc get
  }
  @available(*, unavailable, renamed: "channelURL")
  @objc open var channelUrl: Swift.String? {
    @objc get
  }
  @objc final public let channelURL: Swift.String
  @objc open var channelType: SendbirdChatSDK.ChannelType {
    get
  }
  @objc open var mentionedUsers: [SendbirdChatSDK.User] {
    @objc get
  }
  @objc open var mentionType: SendbirdChatSDK.MentionType {
    get
  }
  @objc open var requestedMentionUserIds: [Swift.String]? {
    get
  }
  @objc open var createdAt: Swift.Int64 {
    get
  }
  @objc final public let updatedAt: Swift.Int64
  @available(*, unavailable, message: "This property has been removed.")
  @objc open var parentMessageText: Swift.String {
    @objc get
  }
  @objc open var parentMessageId: Swift.Int64 {
    get
  }
  @objc open var threadInfo: SendbirdChatSDK.ThreadInfo {
    get
  }
  @available(*, unavailable, message: "Use `metaArrays` instead.")
  @objc open var metaArray: SendbirdChatSDK.MessageMetaArray? {
    @objc get
  }
  @objc open var metaArrays: [SendbirdChatSDK.MessageMetaArray]? {
    get
  }
  @objc open var data: Swift.String {
    get
  }
  @objc final public let customType: Swift.String?
  @objc open var reactions: [SendbirdChatSDK.Reaction] {
    @objc get
  }
  @objc open var messageSurvivalSeconds: Swift.Int {
    get
  }
  @objc open var silent: Swift.Bool {
    get
  }
  @objc open var isSilent: Swift.Bool {
    @objc get
  }
  @objc open var errorCode: Swift.UInt {
    get
  }
  @objc final public let ogMetaData: SendbirdChatSDK.OGMetaData?
  @objc final public let plugins: [SendbirdChatSDK.Plugin]?
  @objc open var parentMessage: SendbirdChatSDK.BaseMessage?
  @objc final public let isReplyToChannel: Swift.Bool
  @objc open var isOperatorMessage: Swift.Bool {
    get
  }
  @objc open var mentionedMessageTemplate: Swift.String? {
    get
  }
  @objc open var notifiationData: SendbirdChatSDK.NotificationData? {
    get
  }
  @objc open var notificationMessageStatus: SendbirdChatSDK.NotificationMessageStatus {
    get
  }
  @objc open var messageParams: SendbirdChatSDK.BaseMessageCreateParams? {
    get
  }
  @objc public var myFeedback: SendbirdChatSDK.Feedback? {
    @objc get
  }
  @objc public var myFeedbackStatus: SendbirdChatSDK.Feedback.Status {
    @objc get
  }
  final public let extendedMessage: [Swift.String : Any]
  final public let extendedMessagePayload: [Swift.String : Any]
  final public let suggestedReplies: [Swift.String]?
  final public let forms: [SendbirdChatSDK.Form]?
  @objc public var inMemoryUserInfo: [Swift.String : Any]?
  @objc open var notificationPriority: SendbirdChatSDK.NotificationPriority {
    get
  }
  @objc final public let notificationEventDeadline: Swift.Int64
  required public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  public typealias ID = Swift.AnyHashable
  @objc deinit
}
extension SendbirdChatSDK.BaseMessage {
  @objc dynamic open func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @objc dynamic open func copyWithFailedState() -> Self
  @objc dynamic open func copyWithFailedState(errorCode: Swift.Int) -> Self
  public func copyWithFailedState(errorCode: Swift.Int?) -> Self
}
extension SendbirdChatSDK.BaseMessage : SendbirdChatSDK.Serializable {
  @objc dynamic open func serialize() -> Foundation.Data?
  @objc dynamic open class func build(fromSerializedData data: Foundation.Data?) -> Self?
  @objc dynamic open class func build(fromSerializedData data: Foundation.Data?, desiredState: SendbirdChatSDK.MessageSendingStatus) -> Self?
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(SBDBaseMessageCreateParams) public class BaseMessageCreateParams : ObjectiveC.NSObject, Swift.Codable, Foundation.NSCopying {
  @objc public var data: Swift.String?
  @objc public var customType: Swift.String?
  @objc public var pushNotificationDeliveryOption: SendbirdChatSDK.PushNotificationDeliveryOption
  @objc public var metaArrays: [SendbirdChatSDK.MessageMetaArray]?
  @objc public var mentionType: SendbirdChatSDK.MentionType
  @objc public var mentionedUserIds: [Swift.String]? {
    @objc get
    @objc set
  }
  @objc public var mentionedUsers: [SendbirdChatSDK.User]? {
    @objc get
    @objc set
  }
  @objc public func addMentionedUserIds(_ userIds: [Swift.String])
  @objc public var parentMessageId: Swift.Int64
  @objc public var isReplyToChannel: Swift.Bool
  @objc public var appleCriticalAlertOptions: SendbirdChatSDK.AppleCriticalAlertOptions?
  @objc public var payload: [Swift.String : Any]
  @objc public var isPinnedMessage: Swift.Bool
  @objc override dynamic public init()
  @objc public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(SBDBaseMessageUpdateParams) public class BaseMessageUpdateParams : ObjectiveC.NSObject, Swift.Encodable, Foundation.NSCopying {
  @objc public var data: Swift.String?
  @objc public var customType: Swift.String?
  @objc public var mentionType: SendbirdChatSDK.MentionType {
    @objc get
    @objc set
  }
  @objc public var mentionedUserIds: [Swift.String]? {
    @objc get
    @objc set
  }
  @objc public func setMentionedUsers(_ mentionedUsers: [SendbirdChatSDK.User])
  @objc public func addMentionedUserIds(_ userIds: [Swift.String])
  @objc override dynamic public init()
  @objc public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  public func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(SBDBlockedUserListQuery) final public class BlockedUserListQuery : ObjectiveC.NSObject, SendbirdChatSDK.UserListQuery {
  @objc final public var hasNext: Swift.Bool {
    get
  }
  @objc final public var isLoading: Swift.Bool {
    get
  }
  @available(*, unavailable, message: "Use SendbirdChat's `createBlockedUserListQuery`")
  @objc override dynamic public init()
  @objc final public func loadNextPage(completionHandler: @escaping SendbirdChatSDK.UserListHandler)
  @objc final public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @objc deinit
}
extension SendbirdChatSDK.BlockedUserListQuery {
  @objc final public var userIdsFilter: [Swift.String]? {
    @objc get
  }
  @objc final public var limit: Swift.UInt {
    @objc get
  }
}
@_inheritsConvenienceInitializers @objc(SBDBlockedUserListQueryParams) final public class BlockedUserListQueryParams : ObjectiveC.NSObject {
  @objc final public var userIdsFilter: [Swift.String]
  @objc final public var limit: Swift.UInt
  @objc override dynamic public init()
  @objc public init(builder: (SendbirdChatSDK.BlockedUserListQueryParams) -> Swift.Void)
  @objc deinit
}
extension SendbirdChatSDK.BlockedUserListQueryParams {
  @objc override final public func isEqual(_ object: Any?) -> Swift.Bool
}
extension SendbirdChatSDK.BlockedUserListQueryParams : Foundation.NSCopying {
  @objc final public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
}
@_hasMissingDesignatedInitializers @objc(SBDCachedBaseChannelInfo) final public class CachedBaseChannelInfo : ObjectiveC.NSObject, Swift.Comparable {
  public static func < (lhs: SendbirdChatSDK.CachedBaseChannelInfo, rhs: SendbirdChatSDK.CachedBaseChannelInfo) -> Swift.Bool
  @objc final public let baseChannel: SendbirdChatSDK.BaseChannel
  @objc final public let cachedMessageCount: Swift.Int64
  @objc deinit
}
@objc(SBDCachedDataClearOrder) public enum CachedDataClearOrder : Swift.Int {
  case custom
  case messageCollectionAccessedAt
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension SendbirdChatSDK.GroupChannelCollection : SendbirdChatSDK.GroupChannelDelegate {
  @objc dynamic open func channel(_ channel: SendbirdChatSDK.BaseChannel, didReceive message: SendbirdChatSDK.BaseMessage)
  @objc dynamic open func channel(_ channel: SendbirdChatSDK.BaseChannel, didReceiveMention message: SendbirdChatSDK.BaseMessage)
  @objc dynamic open func channelWasChanged(_ channel: SendbirdChatSDK.BaseChannel)
  @objc dynamic open func channel(_ channel: SendbirdChatSDK.GroupChannel, didReceiveInvitation invitees: [SendbirdChatSDK.User]?, inviter: SendbirdChatSDK.User?)
  @objc dynamic open func channel(_ channel: SendbirdChatSDK.GroupChannel, didDeclineInvitation invitee: SendbirdChatSDK.User, inviter: SendbirdChatSDK.User?)
  @objc dynamic open func channelDidUpdateDeliveryStatus(_ channel: SendbirdChatSDK.GroupChannel)
  @objc dynamic open func channelDidUpdateReadStatus(_ channel: SendbirdChatSDK.GroupChannel)
  @objc dynamic open func channelDidChangeMemberCount(_ channels: [SendbirdChatSDK.GroupChannel])
  @objc dynamic open func channel(_ channel: SendbirdChatSDK.BaseChannel, userWasMuted user: SendbirdChatSDK.RestrictedUser)
  @objc dynamic open func channel(_ channel: SendbirdChatSDK.BaseChannel, userWasUnmuted user: SendbirdChatSDK.User)
  @objc dynamic open func channelWasFrozen(_ channel: SendbirdChatSDK.BaseChannel)
  @objc dynamic open func channelWasUnfrozen(_ channel: SendbirdChatSDK.BaseChannel)
  @objc dynamic open func channelWasHidden(_ channel: SendbirdChatSDK.GroupChannel)
  @objc dynamic open func channelDidUpdateOperators(_ channel: SendbirdChatSDK.BaseChannel)
  @objc dynamic open func channelDidUpdateTypingStatus(_ channel: SendbirdChatSDK.GroupChannel)
  @objc dynamic open func channel(_ channel: SendbirdChatSDK.GroupChannel, userDidLeave user: SendbirdChatSDK.User)
  @objc dynamic open func channel(_ channel: SendbirdChatSDK.GroupChannel, userDidJoin user: SendbirdChatSDK.User)
  @objc dynamic open func channel(_ channel: SendbirdChatSDK.BaseChannel, userWasBanned user: SendbirdChatSDK.RestrictedUser)
  @objc dynamic open func channel(_ channel: SendbirdChatSDK.BaseChannel, userWasUnbanned user: SendbirdChatSDK.User)
  @objc dynamic open func channelWasDeleted(_ channelURL: Swift.String, channelType: SendbirdChatSDK.ChannelType)
  @objc dynamic open func channel(_ channel: SendbirdChatSDK.BaseChannel, createdMetaData: [Swift.String : Swift.String]?)
  @objc dynamic open func channel(_ channel: SendbirdChatSDK.BaseChannel, updatedMetaData: [Swift.String : Swift.String]?)
  @objc dynamic open func channel(_ channel: SendbirdChatSDK.BaseChannel, deletedMetaDataKeys: [Swift.String]?)
  @objc dynamic open func channel(_ channel: SendbirdChatSDK.BaseChannel, createdMetaCounters: [Swift.String : Swift.Int]?)
  @objc dynamic open func channel(_ channel: SendbirdChatSDK.BaseChannel, updatedMetaCounters: [Swift.String : Swift.Int]?)
  @objc dynamic open func channel(_ channel: SendbirdChatSDK.BaseChannel, deletedMetaCountersKeys: [Swift.String]?)
  @objc dynamic open func channelDidUpdatePinnedMessages(_ channel: SendbirdChatSDK.GroupChannel)
  @objc dynamic open func channel(_ channel: SendbirdChatSDK.GroupChannel, didUpdateFeedbackMessage: SendbirdChatSDK.BaseMessage)
}
extension SendbirdChatSDK.GroupChannelCollection : SendbirdChatSDK.ConnectionDelegate {
  @objc dynamic open func didSucceedReconnection()
  @objc dynamic open func didConnect(userId: Swift.String)
}
@_hasMissingDesignatedInitializers @objc(SBDGroupChannelCollection) open class GroupChannelCollection : SendbirdChatSDK.BaseCollection {
  @objc open var channelList: [SendbirdChatSDK.GroupChannel] {
    @objc get
  }
  @objc @SendbirdChatSDK.Atomic @_projectedValueProperty($hasNext) open var hasNext: Swift.Bool {
    @objc get
  }
  open var $hasNext: SendbirdChatSDK.Atomic<Swift.Bool> {
    get
  }
  @objc open var query: SendbirdChatSDK.GroupChannelListQuery {
    get
  }
  @objc weak open var delegate: (any SendbirdChatSDK.GroupChannelCollectionDelegate)? {
    @objc get
    @objc set
  }
  @objc open var isLive: Swift.Bool {
    get
  }
  @objc open var changelogsToken: Swift.String? {
    get
  }
  @objc open var defaultTs: Swift.Int64 {
    get
  }
  @objc open var needMoreData: Swift.Bool {
    get
  }
  @objc open func loadMore(completionHandler: @escaping SendbirdChatSDK.GroupChannelListHandler)
  @objc open func dispose()
  @objc deinit
}
@objc(SBDGroupChannelCollectionDelegate) public protocol GroupChannelCollectionDelegate {
  @objc optional func channelCollection(_ collection: SendbirdChatSDK.GroupChannelCollection, context: SendbirdChatSDK.ChannelContext, addedChannels: [SendbirdChatSDK.GroupChannel])
  @objc optional func channelCollection(_ collection: SendbirdChatSDK.GroupChannelCollection, context: SendbirdChatSDK.ChannelContext, updatedChannels: [SendbirdChatSDK.GroupChannel])
  @objc optional func channelCollection(_ collection: SendbirdChatSDK.GroupChannelCollection, context: SendbirdChatSDK.ChannelContext, deletedChannelURLs: [Swift.String])
}
@objc(SBDChannelContext) final public class ChannelContext : ObjectiveC.NSObject {
  @objc final public var source: SendbirdChatSDK.CollectionEventSource {
    get
  }
  public init(source: SendbirdChatSDK.CollectionEventSource)
  @objc final public var fromEvent: Swift.Bool {
    @objc get
  }
  @objc deinit
}
@objc(SBDChannelType) public enum ChannelType : Swift.Int {
  case open = 0
  case group = 1
  case feed = 2
}
extension SendbirdChatSDK.ChannelType : Swift.RawRepresentable, Swift.CustomStringConvertible, Swift.Codable {
  public typealias RawValue = Swift.String
  public var description: Swift.String {
    get
  }
  public var rawValue: Swift.String {
    get
  }
  public var intValue: Swift.Int {
    get
  }
  public init(rawValue: Swift.String)
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
@objc(SBChatError) public enum ChatError : Swift.Int, SendbirdChatSDK.SBErrorCode {
  case invalidParameterValueString = 400100
  case invalidParameterValueNumber = 400101
  case invalidParameterValueList = 400102
  case invalidParameterValueJson = 400103
  case invalidParameterValueBoolean = 400104
  case invalidParameterValueRequired = 400105
  case invalidParameterValuePositive = 400106
  case invalidParameterValueNegative = 400107
  case nonAuthorized = 400108
  case tokenExpired = 400109
  case invalidChannelURL = 400110
  case invalidParameterValue = 400111
  case unusableCharacterIncluded = 400151
  case notFoundInDatabase = 400201
  case duplicatedData = 400202
  case reachedMaxCount = 400203
  case userDeactivated = 400300
  case userNotExist = 400301
  case accessTokenNotValid = 400302
  case authUnknownError = 400303
  case appIdNotValid = 400304
  case authUserIdTooLong = 400305
  case authPlanQuotaExceeded = 400306
  case sessionKeyExpired = 400309
  case sessionTokenRevoked = 400310
  case expiringSessionRequired = 400312
  case authSessionNotAllowed = 400313
  case invalidApiToken = 400401
  case parameterMissing = 400402
  case invalidJsonBody = 400403
  case conflict = 409000
  case statUploadNotAllowed = 403200
  case internalServerError = 500901
  case rateLimitExceeded = 500910
  case unknownError = 800000
  case invalidInitialization = 800100
  case connectionRequired = 800101
  case connectionCanceled = 800102
  case invalidParameter = 800110
  case notSupported = 800111
  case wrongChannelType = 800150
  case markAsReadRateLimitExceeded = 800160
  case queryInProgress = 800170
  case ackTimeout = 800180
  case loginTimeout = 800190
  case webSocketConnectionClosed = 800200
  case webSocketConnectionFailed = 800210
  case timerWasExpired = 800301
  case timerWasAlreadyDone = 800302
  case pendingError = 800400
  case passedInvalidAccessToken = 800500
  case sessionKeyRefreshSucceeded = 800501
  case sessionKeyRefreshFailed = 800502
  case collectionDisposed = 800600
  case localDatabaseError = 800700
  case networkError = 800120
  case networkRoutingError = 800121
  case malformedData = 800130
  case malformedErrorData = 800140
  case requestFailed = 800220
  case fileUploadCancelFailed = 800230
  case fileUploadCanceled = 800240
  case fileUploadTimeout = 800250
  case fileSizeLimitExceeded = 800260
  case socketLoginRequired = 900010
  case socketUserNotMember = 900020
  case socketUserDeactivated = 900021
  case socketUserNotOwnerOfMessage = 900022
  case socketUserSendMessageNotAllowed = 900023
  case socketInvalidMentionForMessage = 900025
  case socketInvalidPushOptionForMessage = 900026
  case socketTooManyMetaKeyForMessage = 900027
  case socketTooManyMetaValueForMessage = 900028
  case socketTooManyMetaArrayForMessage = 900029
  case socketGuestNotAllowed = 900030
  case socketMutedUserInApplicationSendMessageNotAllowed = 900040
  case socketMutedUserInChannelSendMessageNotAllowed = 900041
  case socketChannelFrozen = 900050
  case socketProfanityMessageBlocked = 900060
  case socketBannedUrlsBlocked = 900061
  case socketRestrictedDomainBlocked = 900065
  case socketModeratedFileBlocked = 900066
  case socketEnterDeletedChannel = 900070
  case socketBlockedUserReceiveMessageNotAllowed = 900080
  case socketDeactivatedUserReceiveMessageNotAllowed = 900081
  case socketWrongChannelType = 900090
  case socketBannedUserSendMessageNotAllowed = 900100
  case socketTooManyMessages = 900200
  case socketMessageNotFound = 900300
  case socketTooManyParticipants = 900400
  case socketChannelNotFound = 900500
  public var code: Swift.Int {
    get
  }
  public var message: Swift.String {
    get
  }
  public func asSBError(message: Swift.String?) -> SendbirdChatSDK.SBError
  public func asSBError(message: Swift.String?, failureReason: Swift.String) -> SendbirdChatSDK.SBError
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public static var _nsErrorDomain: Swift.String {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
extension SendbirdChatSDK.ChatError : Swift.Decodable {
  public init(from decoder: any Swift.Decoder) throws
}
extension Swift.Decodable {
  public static func make(_ json: [Swift.AnyHashable : Any]) -> Self?
}
@objc(SBDCollectionEventSource) public enum CollectionEventSource : Swift.Int, Swift.Codable {
  case messageChangelog = 0
  case messageFill
  case channelChangelog
  case localMessagePendingCreated
  case localMessageFailed
  case localMessageCanceled
  case localMessageResendStarted
  case channelRefresh
  case eventMessageSent = 100
  case eventMessageReceived
  case eventMessageUpdated
  case eventMessageDeleted
  case eventReactionUpdated
  case eventThreadInfoUpdated
  case eventMention
  case eventChannelChanged
  case eventChannelMemberCountChanged
  case eventChannelFrozen
  case eventChannelUnfrozen
  case eventChannelHidden
  case eventChannelDeleted
  case eventOperatorUpdated
  case eventTypingStatusUpdated
  case eventDeliveryStatusUpdated
  case eventReadStatusUpdated
  case eventUserReceivedInvitation
  case eventUserDeclinedInvitation
  case eventUserJoined
  case eventUserMuted
  case eventUserUnmuted
  case eventUserLeft
  case eventUserBanned
  case eventUserUnbanned
  case eventMetaDataCreated
  case eventMetaDataUpdated
  case eventMetaDataDeleted
  case eventMetaCounterCreated
  case eventMetaCounterUpdated
  case eventMetaCounterDeleted
  case eventPollUpdated
  case eventPollVoted
  case eventPollChangeLog
  case eventPinnedMessageUpdated
  case eventFeedbackMessageUpdated
  case eventNotificationMessageStatusUpdated
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc(SBDMessageCollectionInitPolicy) public enum MessageCollectionInitPolicy : Swift.Int {
  case cacheAndReplaceByApi
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc(SBDNotificationCollectionInitPolicy) public enum NotificationCollectionInitPolicy : Swift.Int {
  case cacheAndReplaceByApi
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public typealias SBObjectComparator = (_ obj1: Any?, _ obj2: Any?) -> Foundation.ComparisonResult
@objc(SBDConnectionDelegate) public protocol ConnectionDelegate {
  @objc optional func didStartReconnection()
  @objc optional func didSucceedReconnection()
  @objc optional func didFailReconnection()
  @objc optional func didConnect(userId: Swift.String)
  @objc optional func didDisconnect(userId: Swift.String)
}
public enum GzipStatics {
  public static let maxWindowBits: Swift.Int32
}
public struct CompressionLevel : Swift.RawRepresentable {
  public let rawValue: Swift.Int32
  public static let noCompression: SendbirdChatSDK.CompressionLevel
  public static let bestSpeed: SendbirdChatSDK.CompressionLevel
  public static let bestCompression: SendbirdChatSDK.CompressionLevel
  public static let defaultCompression: SendbirdChatSDK.CompressionLevel
  public init(rawValue: Swift.Int32)
  public init(_ rawValue: Swift.Int32)
  public typealias RawValue = Swift.Int32
}
public struct GzipError : Swift.Error {
  public enum Kind : Swift.Equatable {
    case stream
    case data
    case memory
    case buffer
    case version
    case unknown(code: Swift.Int)
    public static func == (a: SendbirdChatSDK.GzipError.Kind, b: SendbirdChatSDK.GzipError.Kind) -> Swift.Bool
  }
  public let kind: SendbirdChatSDK.GzipError.Kind
  public let message: Swift.String
  public var localizedDescription: Swift.String {
    get
  }
}
extension Foundation.Data {
  public var isGzipped: Swift.Bool {
    get
  }
  public func gzipped(level: SendbirdChatSDK.CompressionLevel = .defaultCompression, wBits: Swift.Int32 = GzipStatics.maxWindowBits + 16) throws -> Foundation.Data
  public func gunzipped(wBits: Swift.Int32 = GzipStatics.maxWindowBits + 32) throws -> Foundation.Data
}
public struct DeliveryStatus {
  public let channelURL: Swift.String
  public let channelType: SendbirdChatSDK.ChannelType
  public let member: SendbirdChatSDK.Member
  public let timestamp: Swift.Int64
}
@objc(SBDEmoji) final public class Emoji : ObjectiveC.NSObject, Swift.Codable {
  @objc final public var key: Swift.String {
    get
  }
  @objc final public var url: Swift.String {
    get
  }
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension SendbirdChatSDK.Emoji : SendbirdChatSDK.Serializable {
  @objc final public func serialize() -> Foundation.Data?
  @objc public static func build(fromSerializedData data: Foundation.Data?) -> Self?
}
@objc(SBDEmojiCategory) final public class EmojiCategory : ObjectiveC.NSObject, Swift.Codable {
  @objc final public var cid: Swift.Int64 {
    get
  }
  @objc final public var name: Swift.String {
    get
  }
  @objc final public var url: Swift.String {
    get
  }
  @objc final public var emojis: [SendbirdChatSDK.Emoji] {
    get
  }
  final public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
}
extension SendbirdChatSDK.EmojiCategory : SendbirdChatSDK.Serializable {
  @objc final public func serialize() -> Foundation.Data?
  @objc public static func build(fromSerializedData data: Foundation.Data?) -> Self?
}
@objc(SBDEmojiContainer) final public class EmojiContainer : ObjectiveC.NSObject, Swift.Codable {
  @objc final public var emojiHash: Swift.String {
    get
  }
  @objc final public var categories: [SendbirdChatSDK.EmojiCategory] {
    get
  }
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension SendbirdChatSDK.EmojiContainer : SendbirdChatSDK.Serializable {
  @objc final public func serialize() -> Foundation.Data?
  @objc public static func build(fromSerializedData data: Foundation.Data?) -> Self?
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class SBError : Foundation.NSError {
  @objc public static func error(withDictionary dict: [Swift.String : Any]) -> SendbirdChatSDK.SBError?
  @objc public static func error(withNSError error: Foundation.NSError) -> SendbirdChatSDK.SBError?
  @objc override dynamic public init(domain: Swift.String, code: Swift.Int, userInfo dict: [Swift.String : Any]? = nil)
  @objc deinit
}
public protocol SBErrorCode : Swift.Error {
  var message: Swift.String { get }
  var code: Swift.Int { get }
  func asSBError(message: Swift.String?) -> SendbirdChatSDK.SBError
  init?(rawValue: Swift.Int)
}
extension SendbirdChatSDK.SBErrorCode {
  public var asSBError: SendbirdChatSDK.SBError {
    get
  }
  public func asSBError(message: Swift.String?) -> SendbirdChatSDK.SBError
}
@objc(SBCoreError) public enum CoreError : Swift.Int, SendbirdChatSDK.SBErrorCode {
  case unknownError = 800000
  case networkError = 800120
  case networkRoutingError = 800121
  case malformedData = 800130
  case requestFailed = 800220
  case fileUploadCancelFailed = 800230
  case fileUploadCanceled = 800240
  case fileUploadTimeout = 800250
  case fileSizeLimitExceeded = 800260
  case internalServerError = 500901
  public var code: Swift.Int {
    get
  }
  public var message: Swift.String {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public static var _nsErrorDomain: Swift.String {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
extension SendbirdChatSDK.FeedChannel {
  @objc dynamic open func refresh(completionHandler: SendbirdChatSDK.SBErrorHandler?)
  @objc(getChannelWithURL:completionHandler:) dynamic open class func getChannel(url: Swift.String, completionHandler: SendbirdChatSDK.FeedChannelHandler?)
}
extension SendbirdChatSDK.FeedChannel {
  @objc(markAsReadWithCompletionHandler:) dynamic open func markAsRead(completionHandler: SendbirdChatSDK.SBErrorHandler?)
  @objc(markAsReadByMessages:completionHandler:) dynamic open func markAsRead(messages: [SendbirdChatSDK.BaseMessage], completionHandler: SendbirdChatSDK.SBErrorHandler?)
}
extension SendbirdChatSDK.FeedChannel {
  @objc dynamic open class func createMyFeedChannelListQuery(paramsBuilder: (SendbirdChatSDK.FeedChannelListQueryParams) -> Swift.Void) -> SendbirdChatSDK.FeedChannelListQuery
  @objc dynamic open class func createMyFeedChannelListQuery(params: SendbirdChatSDK.FeedChannelListQueryParams) -> SendbirdChatSDK.FeedChannelListQuery
}
extension SendbirdChatSDK.FeedChannel {
  @available(*, deprecated, renamed: "markAsViewed(messages:)", message: "This method is deprecated in 4.18.0.")
  public func logImpression(messages: [SendbirdChatSDK.BaseMessage]) -> Swift.Bool
  @available(*, deprecated, renamed: "logViewed(messages:)", message: "This method is deprecated in 4.19.8.")
  public func markAsViewed(messages: [SendbirdChatSDK.BaseMessage]) -> Swift.Bool
  public func logViewed(messages: [SendbirdChatSDK.BaseMessage]) -> Swift.Bool
  public func logClicked(message: SendbirdChatSDK.BaseMessage) -> Swift.Bool
  public func logCustom(topic: Swift.String, messages: [SendbirdChatSDK.BaseMessage]) -> Swift.Bool
}
@_hasMissingDesignatedInitializers @objc(SBDFeedChannel) open class FeedChannel : SendbirdChatSDK.BaseChannel {
  @objc override open var channelURL: Swift.String {
    @objc get
  }
  @objc override open var name: Swift.String {
    @objc get
  }
  @objc open var myLastRead: Swift.Int64 {
    @objc get
  }
  @objc open var lastMessage: SendbirdChatSDK.BaseMessage? {
    @objc get
  }
  @objc open var unreadMessageCount: Swift.UInt {
    @objc get
  }
  @objc override open var isDirty: Swift.Bool {
    @objc get
    @objc set
  }
  @objc open var isCategoryFilterEnabled: Swift.Bool {
    get
  }
  @objc open var isTemplateLabelEnabled: Swift.Bool {
    get
  }
  @objc open var categories: [SendbirdChatSDK.NotificationCategory] {
    get
  }
  required public init(from decoder: any Swift.Decoder) throws
  override public func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
extension SendbirdChatSDK.FeedChannel {
  @objc override dynamic open class func build(fromSerializedData data: Foundation.Data?) -> Self?
}
@_inheritsConvenienceInitializers @objc(SBDFeedChannelChangeLogsParams) final public class FeedChannelChangeLogsParams : ObjectiveC.NSObject {
  @objc final public var includeEmptyChannel: Swift.Bool
  @objc override dynamic public init()
  @objc deinit
}
@objc(SBDFeedChannelContext) final public class FeedChannelContext : ObjectiveC.NSObject {
  @objc final public var source: SendbirdChatSDK.CollectionEventSource {
    get
  }
  public init(source: SendbirdChatSDK.CollectionEventSource)
  @objc final public var fromEvent: Swift.Bool {
    @objc get
  }
  @objc deinit
}
@objc(SBDFeedChannelDelegate) public protocol FeedChannelDelegate : SendbirdChatSDK.BaseChannelDelegate {
  @objc optional func feedChannelDidUpdateReadStatus(_ channel: SendbirdChatSDK.FeedChannel)
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(SBDFeedChannelListQuery) final public class FeedChannelListQuery : ObjectiveC.NSObject, Foundation.NSCopying {
  @objc final public var hasNext: Swift.Bool {
    get
  }
  @objc final public var isLoading: Swift.Bool {
    get
  }
  @objc final public var limit: Swift.UInt {
    @objc get
  }
  required public init(from decoder: any Swift.Decoder) throws
  final public func encode(to encoder: any Swift.Encoder) throws
  @objc final public func loadNextPage(completionHandler: @escaping SendbirdChatSDK.FeedChannelListHandler)
  @objc deinit
}
extension SendbirdChatSDK.FeedChannelListQuery {
  @objc final public var includeEmptyChannel: Swift.Bool {
    @objc get
  }
}
extension SendbirdChatSDK.FeedChannelListQuery {
  @objc final public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
}
@_inheritsConvenienceInitializers @objc(SBDFeedChannelListQueryParams) final public class FeedChannelListQueryParams : ObjectiveC.NSObject, Swift.Codable {
  @objc final public var includeEmptyChannel: Swift.Bool
  @objc final public var limit: Swift.UInt
  @objc override dynamic public init()
  @objc public init(builder: (SendbirdChatSDK.FeedChannelListQueryParams) -> Swift.Void)
  required public init(from decoder: any Swift.Decoder) throws
  final public func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
extension SendbirdChatSDK.FeedChannelListQueryParams : Foundation.NSCopying {
  @objc final public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
}
@objc(SBDFeedback) open class Feedback : ObjectiveC.NSObject, Swift.Codable, Foundation.NSCopying {
  @objc final public let id: Swift.Int64
  @objc final public let rating: SendbirdChatSDK.Feedback.Rating
  @objc final public let comment: Swift.String?
  public init(id: Swift.Int64, rating: SendbirdChatSDK.Feedback.Rating, comment: Swift.String?)
  required public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  @objc public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @objc deinit
}
extension SendbirdChatSDK.Feedback {
  @objc(FeedbackRating) public enum Rating : Swift.Int, Swift.RawRepresentable, Swift.CustomStringConvertible, Swift.Codable {
    public typealias RawValue = Swift.String
    case good
    case bad
    public var description: Swift.String {
      get
    }
    public init?(rawValue: Swift.String)
    public var rawValue: Swift.String {
      get
    }
    public init(from decoder: any Swift.Decoder) throws
    public func encode(to encoder: any Swift.Encoder) throws
  }
}
extension SendbirdChatSDK.Feedback {
  @objc(FeedbackStatus) public enum Status : Swift.Int {
    case notApplicable
    case submitted
    case noFeedback
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
}
@_hasMissingDesignatedInitializers @objc(SBDFileMessage) open class FileMessage : SendbirdChatSDK.BaseMessage {
  @objc open var url: Swift.String {
    @objc get
  }
  @available(*, unavailable, renamed: "plainURL")
  @objc open var plainUrl: Swift.String? {
    @objc get
  }
  @objc final public let plainURL: Swift.String?
  @objc final public let name: Swift.String
  @objc final public let size: Swift.UInt
  @objc final public let type: Swift.String
  @objc open var thumbnails: [SendbirdChatSDK.Thumbnail]? {
    get
  }
  @available(*, unavailable, message: "This property has been removed.")
  @objc open var requestState: SendbirdChatSDK.MessageRequestState? {
    @objc get
  }
  required public init(from decoder: any Swift.Decoder) throws
  override open func encode(to encoder: any Swift.Encoder) throws
  @objc open func getFileMessageParams() -> SendbirdChatSDK.FileMessageCreateParams?
  @objc open func dispose()
  @objc deinit
}
extension SendbirdChatSDK.FileMessage {
  @objc override dynamic open func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
}
@_hasMissingDesignatedInitializers @objc(SBDFileMessageCreateParams) final public class FileMessageCreateParams : SendbirdChatSDK.BaseMessageCreateParams {
  @objc final public var file: Foundation.Data?
  @objc final public var fileURL: Swift.String? {
    @objc get
    @objc set
  }
  @objc final public var thumbnailSizes: [SendbirdChatSDK.ThumbnailSize]?
  @objc final public var fileName: Swift.String? {
    @objc get
    @objc set
  }
  @objc final public var mimeType: Swift.String? {
    @objc get
    @objc set
  }
  @objc final public var fileSize: Swift.UInt
  @objc public init(file: Foundation.Data)
  @objc public init(fileURL: Swift.String)
  @objc override dynamic public init()
  @objc override final public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  override final public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc(SBDFileMessageUpdateParams) final public class FileMessageUpdateParams : SendbirdChatSDK.BaseMessageUpdateParams {
  @objc override dynamic public init()
  @objc override final public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  override final public func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
@objc(SBDForm) open class Form : ObjectiveC.NSObject, Swift.Codable, Foundation.NSCopying {
  @objc final public let formKey: Swift.String
  @objc final public let fields: [SendbirdChatSDK.FormField]
  @objc final public let answers: [SendbirdChatSDK.FormFieldAnswer]?
  @objc public init(formKey: Swift.String, fields: [SendbirdChatSDK.FormField], answers: [SendbirdChatSDK.FormFieldAnswer]? = nil)
  required public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  @objc public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @objc public var isSubmitted: Swift.Bool {
    @objc get
  }
  @objc public var canSubmit: Swift.Bool {
    @objc get
  }
  @objc deinit
}
@objc(SBDFormField) open class FormField : ObjectiveC.NSObject, Swift.Codable, Foundation.NSCopying {
  @objc final public let fieldKey: Swift.String
  @objc final public let title: Swift.String
  @objc final public let inputTypeValue: Swift.String
  @objc final public let required: Swift.Bool
  @objc final public let regex: Swift.String?
  @objc final public let placeholder: Swift.String?
  @objc public var temporaryAnswer: Swift.String?
  @objc public init(fieldKey: Swift.String, title: Swift.String, inputTypeValue: Swift.String, required: Swift.Bool, regex: Swift.String? = nil, placeholder: Swift.String? = nil)
  required public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  @objc public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @objc public var inputType: SendbirdChatSDK.FormField.InputType {
    @objc get
  }
  @objc public var isValid: Swift.Bool {
    @objc get
  }
  @objc public var isSubmittable: Swift.Bool {
    @objc get
  }
  @objc deinit
}
@objc(SBDFormFieldAnswer) open class FormFieldAnswer : ObjectiveC.NSObject {
  final public let fieldKey: Swift.String
  final public let value: Swift.String
  @objc public init(fieldKey: Swift.String, value: Swift.String)
  @objc deinit
}
extension SendbirdChatSDK.FormField {
  @objc(SBDFormInputType) public enum InputType : Swift.Int {
    case text
    case phone
    case email
    case password
  }
}
extension SendbirdChatSDK.FormField.InputType {
  public var keyboardType: UIKit.UIKeyboardType {
    get
  }
  public var isSecureText: Swift.Bool {
    get
  }
}
extension Swift.Array where Element : SendbirdChatSDK.FormFieldAnswer {
  public func answer(for key: Swift.String) -> SendbirdChatSDK.FormFieldAnswer?
}
extension SendbirdChatSDK.FormField.InputType : Swift.RawRepresentable {
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
  public init?(rawValue: Swift.String)
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(SBDFriendListQuery) final public class FriendListQuery : ObjectiveC.NSObject, SendbirdChatSDK.UserListQuery {
  @objc final public var hasNext: Swift.Bool {
    get
  }
  @objc final public var isLoading: Swift.Bool {
    get
  }
  @objc final public func loadNextPage(completionHandler: @escaping SendbirdChatSDK.UserListHandler)
  @objc final public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @objc deinit
}
extension SendbirdChatSDK.FriendListQuery {
  @objc final public var limit: Swift.UInt {
    @objc get
  }
}
@_inheritsConvenienceInitializers @objc(SBDFriendListQueryParams) final public class FriendListQueryParams : ObjectiveC.NSObject {
  @objc final public var limit: Swift.UInt
  @objc override dynamic public init()
  @objc public init(builder: (SendbirdChatSDK.FriendListQueryParams) -> Swift.Void)
  @objc deinit
}
extension SendbirdChatSDK.FriendListQueryParams {
  @objc override final public func isEqual(_ object: Any?) -> Swift.Bool
}
extension SendbirdChatSDK.FriendListQueryParams : Foundation.NSCopying {
  @objc final public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
}
@_hasMissingDesignatedInitializers @objc(SBDGlobalNotificationChannelSetting) open class GlobalNotificationChannelSetting : ObjectiveC.NSObject {
  @objc final public let jsonPayload: Swift.String
  @objc deinit
}
extension SendbirdChatSDK.GroupChannel {
  @objc dynamic open func refresh(completionHandler: SendbirdChatSDK.SBErrorHandler?)
  @objc(createChannelWithParams:completionHandler:) dynamic open class func createChannel(params: SendbirdChatSDK.GroupChannelCreateParams, completionHandler: SendbirdChatSDK.GroupChannelHandler?)
  @objc(createChannelWithParams:progressHandler:completionHandler:) dynamic open class func createChannel(params: SendbirdChatSDK.GroupChannelCreateParams, progressHandler: SendbirdChatSDK.ProgressHandler?, completionHandler: SendbirdChatSDK.GroupChannelHandler?)
  @objc(createDistinctChannelIfNotExistWithParams:completionHandler:) dynamic open class func createDistinctChannelIfNotExist(params: SendbirdChatSDK.GroupChannelCreateParams, completionHandler: @escaping SendbirdChatSDK.DistinctGroupChannelHandler)
  @objc(createDistinctChannelIfNotExistWithParams:progressHandler:completionHandler:) dynamic open class func createDistinctChannelIfNotExist(params: SendbirdChatSDK.GroupChannelCreateParams, progressHandler: SendbirdChatSDK.ProgressHandler?, completionHandler: @escaping SendbirdChatSDK.DistinctGroupChannelHandler)
  @objc(updateChannelWithParams:completionHandler:) dynamic open func update(params: SendbirdChatSDK.GroupChannelUpdateParams, completionHandler: @escaping SendbirdChatSDK.GroupChannelHandler)
  @objc(updateChannelWithParams:progressHandler:completionHandler:) dynamic open func update(params: SendbirdChatSDK.GroupChannelUpdateParams, progressHandler: SendbirdChatSDK.ProgressHandler?, completionHandler: @escaping SendbirdChatSDK.GroupChannelHandler)
  @objc(getChannelWithURL:completionHandler:) dynamic open class func getChannel(url: Swift.String, completionHandler: SendbirdChatSDK.GroupChannelHandler?)
  @objc(deleteChannelWithCompletionHandler:) dynamic open func delete(completionHandler: SendbirdChatSDK.SBErrorHandler?)
}
@objc extension SendbirdChatSDK.GroupChannel {
  @objc dynamic open func resetMyHistory(completionHandler: SendbirdChatSDK.SBErrorHandler?)
  @objc dynamic open func setMyPushTriggerOption(_ option: SendbirdChatSDK.GroupChannelPushTriggerOption, completionHandler: SendbirdChatSDK.SBErrorHandler?)
  @objc dynamic open func getMyPushTriggerOption(completionHandler: @escaping SendbirdChatSDK.GroupChannelPushTriggerOptionHandler)
  @objc dynamic open func setMyCountPreference(_ myCountPreference: SendbirdChatSDK.CountPreference, completionHandler: SendbirdChatSDK.SBErrorHandler?)
}
@objc extension SendbirdChatSDK.GroupChannel {
  @nonobjc public func getDeliveryStatus(with includeAllMembers: Swift.Bool) -> [Swift.String : SendbirdChatSDK.DeliveryStatus]
}
@objc extension SendbirdChatSDK.GroupChannel {
  @objc dynamic open func freeze(completionHandler: SendbirdChatSDK.SBErrorHandler?)
  @objc dynamic open func unfreeze(completionHandler: SendbirdChatSDK.SBErrorHandler?)
}
extension SendbirdChatSDK.GroupChannel {
  @discardableResult
  @objc dynamic public func sendMultipleFilesMessage(params: SendbirdChatSDK.MultipleFilesMessageCreateParams, fileUploadHandler: SendbirdChatSDK.FileUploadHandler?, completionHandler: @escaping SendbirdChatSDK.MultipleFilesMessageHandler) -> SendbirdChatSDK.MultipleFilesMessage?
  @discardableResult
  @objc(copyMultipleFilesMessageWithMessage:toTargetChannel:completionHandler:) dynamic public func copyMultipleFilesMessage(_ message: SendbirdChatSDK.MultipleFilesMessage, toTargetChannel targetChannel: SendbirdChatSDK.GroupChannel, completionHandler: SendbirdChatSDK.MultipleFilesMessageHandler?) -> SendbirdChatSDK.MultipleFilesMessage?
  @discardableResult
  @objc(resendMultipleFilesMessageWithMessage:fileUploadHandler:completionHandler:) dynamic public func resendMultipleFilesMessage(_ message: SendbirdChatSDK.MultipleFilesMessage, fileUploadHandler: SendbirdChatSDK.FileUploadHandler?, completionHandler: SendbirdChatSDK.MultipleFilesMessageHandler?) -> SendbirdChatSDK.MultipleFilesMessage?
}
@objc extension SendbirdChatSDK.GroupChannel {
  @objc dynamic open func inviteUser(_ user: SendbirdChatSDK.User, completionHandler: SendbirdChatSDK.SBErrorHandler?)
  @objc dynamic open func inviteUserId(_ userId: Swift.String, completionHandler: SendbirdChatSDK.SBErrorHandler?)
  @objc dynamic open func inviteUsers(_ users: [SendbirdChatSDK.User], completionHandler: SendbirdChatSDK.SBErrorHandler?)
  @objc dynamic open func inviteUserIds(_ userIds: [Swift.String], completionHandler: SendbirdChatSDK.SBErrorHandler?)
  @objc dynamic open func acceptInvitation(completionHandler: SendbirdChatSDK.SBErrorHandler?)
  @objc dynamic open func acceptInvitation(accessCode: Swift.String?, completionHandler: SendbirdChatSDK.SBErrorHandler?)
  @objc dynamic open func declineInvitation(completionHandler: SendbirdChatSDK.SBErrorHandler?)
  @objc dynamic open func join(completionHandler: SendbirdChatSDK.SBErrorHandler?)
  @objc dynamic open func join(accessCode: Swift.String?, completionHandler: SendbirdChatSDK.SBErrorHandler?)
  @objc(leaveChannelWithCompletionHandler:) dynamic open func leave(completionHandler: SendbirdChatSDK.SBErrorHandler?)
  @objc(leaveChannelWithShouldRemoveOperatorStatus:completionHandler:) dynamic open func leave(shouldRemoveOperatorStatus: Swift.Bool, completionHandler: SendbirdChatSDK.SBErrorHandler?)
  @objc(hideChannelWithHidePreviousMessages:completionHandler:) dynamic open func hide(hidePreviousMessages: Swift.Bool, completionHandler: SendbirdChatSDK.SBErrorHandler?)
  @objc(hideChannelWithHidePreviousMessages:allowAutoUnhide:completionHandler:) dynamic open func hide(hidePreviousMessages: Swift.Bool, allowAutoUnhide: Swift.Bool, completionHandler: SendbirdChatSDK.SBErrorHandler?)
  @objc(unhideChannelWithCompletionHandler:) dynamic open func unhide(completionHandler: SendbirdChatSDK.SBErrorHandler?)
  @objc(markAsReadWithCompletionHandler:) dynamic open func markAsRead(completionHandler: SendbirdChatSDK.SBErrorHandler?)
  @objc dynamic open func notifyScreenshotWasTaken(completionHandler: SendbirdChatSDK.SBErrorHandler?)
}
extension SendbirdChatSDK.GroupChannel {
  @objc dynamic open class func createMyGroupChannelListQuery() -> SendbirdChatSDK.GroupChannelListQuery
  @objc dynamic open class func createMyGroupChannelListQuery(paramsBuilder: (SendbirdChatSDK.GroupChannelListQueryParams) -> Swift.Void) -> SendbirdChatSDK.GroupChannelListQuery
  @objc dynamic open class func createMyGroupChannelListQuery(params: SendbirdChatSDK.GroupChannelListQueryParams) -> SendbirdChatSDK.GroupChannelListQuery
  @objc dynamic open class func createPublicGroupChannelListQuery() -> SendbirdChatSDK.PublicGroupChannelListQuery
  @objc dynamic open class func createPublicGroupChannelListQuery(paramsBuilder: (SendbirdChatSDK.PublicGroupChannelListQueryParams) -> Swift.Void) -> SendbirdChatSDK.PublicGroupChannelListQuery
  @objc dynamic open class func createPublicGroupChannelListQuery(params: SendbirdChatSDK.PublicGroupChannelListQueryParams) -> SendbirdChatSDK.PublicGroupChannelListQuery
  @objc dynamic open class func createMemberListQuery(channelURL: Swift.String) -> SendbirdChatSDK.MemberListQuery
  @objc dynamic open class func createMemberListQuery(channelURL: Swift.String, paramsBuilder: (SendbirdChatSDK.MemberListQueryParams) -> Swift.Void) -> SendbirdChatSDK.MemberListQuery
  @objc dynamic open func createMemberListQuery() -> SendbirdChatSDK.MemberListQuery?
  @objc dynamic open func createMemberListQuery(paramsBuilder: (SendbirdChatSDK.MemberListQueryParams) -> Swift.Void) -> SendbirdChatSDK.MemberListQuery?
  @objc dynamic open func createMemberListQuery(params: SendbirdChatSDK.MemberListQueryParams) -> SendbirdChatSDK.MemberListQuery?
}
@objc extension SendbirdChatSDK.GroupChannel {
  @objc dynamic open func getUnreadMemberCount(_ message: SendbirdChatSDK.BaseMessage) -> Swift.Int
  @objc(getReadMembersWithMessage:includeAllMembers:) dynamic open func getReadMembers(message: SendbirdChatSDK.BaseMessage, includeAllMembers: Swift.Bool) -> [SendbirdChatSDK.Member]
  @objc(getUnreadMembersWithMessage:includeAllMembers:) dynamic open func getUnreadMembers(message: SendbirdChatSDK.BaseMessage, includeAllMembers: Swift.Bool) -> [SendbirdChatSDK.Member]
  @objc dynamic open func getUndeliveredMemberCount(_ message: SendbirdChatSDK.BaseMessage) -> Swift.Int
  @objc(getReadStatusIncludingAllMembers:) dynamic open func getReadStatus(includeAllMembers: Swift.Bool) -> [Swift.String : [Swift.String : Any]]
  @nonobjc public func getReadStatus(with includeAllMembers: Swift.Bool) -> [Swift.String : SendbirdChatSDK.ReadStatus]
}
extension SendbirdChatSDK.GroupChannel {
  @discardableResult
  @objc(createScheduledFileMessageWithParams:completionHandler:) dynamic open func createScheduledFileMessage(params: SendbirdChatSDK.ScheduledFileMessageCreateParams, completionHandler: SendbirdChatSDK.FileMessageHandler?) -> SendbirdChatSDK.FileMessage?
}
extension SendbirdChatSDK.GroupChannel {
  @objc(updateScheduledFileMessageWithScheduledMessageId:params:completionHandler:) dynamic open func updateScheduledFileMessage(scheduledMessageId: Swift.Int64, params: SendbirdChatSDK.ScheduledFileMessageUpdateParams, completionHandler: SendbirdChatSDK.FileMessageHandler?)
}
extension SendbirdChatSDK.GroupChannel {
  @objc dynamic open func sendScheduledMessageNow(scheduledMessageId: Swift.Int64, completionHandler: @escaping SendbirdChatSDK.SBErrorHandler)
  @objc dynamic open func cancelScheduledMessage(scheduledMessageId: Swift.Int64, completionHandler: @escaping SendbirdChatSDK.SBErrorHandler)
}
extension SendbirdChatSDK.GroupChannel {
  @discardableResult
  @objc(createScheduledUserMessageWithParams:completionHandler:) dynamic open func createScheduledUserMessage(params: SendbirdChatSDK.ScheduledUserMessageCreateParams, completionHandler: SendbirdChatSDK.UserMessageHandler?) -> SendbirdChatSDK.UserMessage?
  @objc(updateScheduledUserMessageWithScheduledMessageId:userMessageParams:completionHandler:) dynamic open func updateScheduledUserMessage(scheduledMessageId: Swift.Int64, params: SendbirdChatSDK.ScheduledUserMessageUpdateParams, completionHandler: SendbirdChatSDK.UserMessageHandler?)
}
@objc extension SendbirdChatSDK.GroupChannel {
  @objc dynamic open func startTyping()
  @objc dynamic open func endTyping()
  @objc dynamic open func isTyping() -> Swift.Bool
  @objc dynamic open func getTypingUsers() -> [SendbirdChatSDK.User]?
}
extension SendbirdChatSDK.GroupChannel {
  @available(*, unavailable, message: "`sendMarkAsReadEnable` has been removed.")
  @objc dynamic public var sendMarkAsReadEnable: Swift.Bool {
    @objc get
    @objc set
  }
  @available(*, unavailable, message: "`isPushEnabled` has been removed.")
  @objc dynamic public var isPushEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  @available(*, unavailable, message: "`getChannelFromCache(withChannelUrl:)` has been removed.")
  @objc dynamic public func getChannelFromCache(withChannelUrl: Swift.String)
  @available(*, unavailable, message: "`getReadReceipt(of:)` has been removed.")
  @objc dynamic public func getReadReceipt(of message: SendbirdChatSDK.BaseMessage)
  @available(*, unavailable, renamed: "createChannel(params:progressHandler:completionHandler:)")
  @objc public static func createChannel(withName name: Swift.String?, isDistinct: Swift.Bool, userIds: [Swift.String], coverImage: Foundation.Data, coverImageName: Swift.String, data: Swift.String?, customType: Swift.String?, progressHandler: ((Swift.Int64, Swift.Int64, Swift.Int64) -> Swift.Void)?, completionHandler: @escaping (SendbirdChatSDK.GroupChannel?, SendbirdChatSDK.SBError?) -> Swift.Void)
  @available(*, unavailable, renamed: "update(params:progressHandler:completionHandler:)")
  @objc dynamic public func update(withName name: Swift.String?, isDistinct: Swift.Bool, coverImage: Foundation.Data?, coverImageName: Swift.String?, data: Swift.String?, customType: Swift.String?, progressHandler: ((Swift.Int64, Swift.Int64, Swift.Int64) -> Swift.Void)?, completionHandler: @escaping (SendbirdChatSDK.GroupChannel?, SendbirdChatSDK.SBError?) -> Swift.Void)
  @available(*, unavailable, renamed: "hide(hidePreviousMessages:completionHandler:)")
  @objc dynamic public func hide(withHidePreviousMessages hidePreviousMessages: Swift.Bool, completionHandler: ((SendbirdChatSDK.SBError?) -> Swift.Void)? = nil)
  @available(*, unavailable, renamed: "getReadMembers(message:includeAllMembers:)")
  @objc dynamic public func getLastSeenAt(by: SendbirdChatSDK.User) -> Swift.Int64
  @available(*, unavailable, renamed: "getReadMembers(message:includeAllMembers:)")
  @objc dynamic public func getLastSeenAt(byUserId: SendbirdChatSDK.User) -> Swift.Int64
  @available(*, unavailable, renamed: "getUndeliveredMemberCount")
  @objc dynamic public func getDeliveryReceipt() -> Swift.Int
  @available(*, unavailable, renamed: "getTypingUsers")
  @objc dynamic public func getTypingMembers() -> [SendbirdChatSDK.User]
  @available(*, unavailable, message: "`setPushPreferenceWithPushOn(_:completionHandler:)` has been removed.")
  @objc dynamic public func setPushPreferenceWithPushOn(_: Swift.Bool, completionHandler: ((SendbirdChatSDK.SBError?) -> Swift.Void)?)
  @available(*, unavailable, message: "Use `SendbirdChat.getTotalUnreadMessageCount(completionHandler:)` instead.")
  @objc public static func getTotalUnreadMessageCount(completionHandler: ((Swift.UInt, SendbirdChatSDK.SBError) -> Swift.Void)?)
  @available(*, unavailable, message: "Use `SendbirdChat.getTotalUnreadMessageCount(params:completionHandler:)` instead.")
  @objc public static func getTotalUnreadMessageCount(with: SendbirdChatSDK.GroupChannelTotalUnreadChannelCountParams, completionHandler: ((Swift.UInt, SendbirdChatSDK.SBError) -> Swift.Void)?)
  @available(*, unavailable, message: "Use `SendbirdChat.getTotalUnreadMessageCount(params:completionHandler:)` instead.")
  @objc public static func getTotalUnreadMessageCount(withChannelCustomTypes: [Swift.String]?, completionHandler: ((Swift.UInt, SendbirdChatSDK.SBError) -> Swift.Void)?)
}
@_hasMissingDesignatedInitializers @objc(SBDGroupChannel) open class GroupChannel : SendbirdChatSDK.BaseChannel {
  @objc open var lastMessage: SendbirdChatSDK.BaseMessage? {
    get
  }
  @objc open var isSuper: Swift.Bool {
    get
  }
  @objc open var isBroadcast: Swift.Bool {
    get
  }
  @objc open var isExclusive: Swift.Bool {
    get
  }
  @objc open var isPublic: Swift.Bool {
    get
  }
  @objc open var isAccessCodeRequired: Swift.Bool {
    get
  }
  @objc open var isDistinct: Swift.Bool {
    get
  }
  @objc open var isDiscoverable: Swift.Bool {
    get
  }
  @objc open var isConversation: Swift.Bool {
    get
  }
  @objc open var isChatNotification: Swift.Bool {
    get
  }
  @SendbirdChatSDK.Atomic @objc @_projectedValueProperty($unreadMessageCount) open var unreadMessageCount: Swift.UInt {
    @objc get
  }
  open var $unreadMessageCount: SendbirdChatSDK.Atomic<Swift.UInt> {
    get
  }
  @objc open var unreadMentionCount: Swift.UInt {
    get
  }
  @objc open var members: [SendbirdChatSDK.Member] {
    @objc get
  }
  @objc open var memberCount: Swift.UInt {
    get
  }
  @objc open var joinedMemberCount: Swift.UInt {
    get
  }
  @objc open var joinedAt: Swift.Int64 {
    get
  }
  @objc open var myPushTriggerOption: SendbirdChatSDK.GroupChannelPushTriggerOption {
    get
  }
  @objc open var isHidden: Swift.Bool {
    get
  }
  @objc open var myMemberState: SendbirdChatSDK.MemberState {
    get
  }
  @objc open var myRole: SendbirdChatSDK.Role {
    get
  }
  @objc open var myMutedState: SendbirdChatSDK.MutedState {
    get
  }
  @objc open var myCountPreference: SendbirdChatSDK.CountPreference {
    get
  }
  @objc open var invitedAt: Swift.Int64 {
    get
  }
  @objc open var hiddenState: SendbirdChatSDK.GroupChannelHiddenState {
    get
  }
  @objc open var myLastRead: Swift.Int64 {
    get
  }
  @objc open var messageOffsetTimestamp: Swift.Int64 {
    @objc get
  }
  @objc open var messageSurvivalSeconds: Swift.Int {
    get
  }
  @objc open var hasAIBot: Swift.Bool {
    get
  }
  @objc open var hasBot: Swift.Bool {
    get
  }
  @objc open func hasMember(_ userId: Swift.String) -> Swift.Bool
  @objc open func getMember(_ userId: Swift.String) -> SendbirdChatSDK.Member?
  @objc open func getInviter() -> SendbirdChatSDK.User?
  @objc open func myDeliveryStatus() -> Swift.Int64
  @objc open class func compare(channelA: SendbirdChatSDK.GroupChannel, channelB: SendbirdChatSDK.GroupChannel, order: SendbirdChatSDK.GroupChannelListOrder) -> Swift.Bool
  required public init(from decoder: any Swift.Decoder) throws
  override public func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
extension SendbirdChatSDK.GroupChannel {
  @objc override dynamic open class func build(fromSerializedData data: Foundation.Data?) -> Self?
}
@_inheritsConvenienceInitializers @objc(SBDGroupChannelChangeLogsParams) final public class GroupChannelChangeLogsParams : ObjectiveC.NSObject {
  @objc final public var customTypes: [Swift.String]
  @objc final public var includeEmptyChannel: Swift.Bool
  @objc final public var includeFrozenChannel: Swift.Bool
  @objc final public var includeChatNotification: Swift.Bool
  @objc(createWithGroupChannelListQuery:) public static func create(query: SendbirdChatSDK.GroupChannelListQuery) -> SendbirdChatSDK.GroupChannelChangeLogsParams
  @objc override dynamic public init()
  @objc deinit
}
@objc(SBDGroupChannelDelegate) public protocol GroupChannelDelegate : SendbirdChatSDK.BaseChannelDelegate {
  @objc optional func channelDidUpdateReadStatus(_ channel: SendbirdChatSDK.GroupChannel)
  @objc optional func channelDidUpdateDeliveryStatus(_ channel: SendbirdChatSDK.GroupChannel)
  @objc optional func channelDidUpdateTypingStatus(_ channel: SendbirdChatSDK.GroupChannel)
  @objc optional func channelDidChangeMemberCount(_ channels: [SendbirdChatSDK.GroupChannel])
  @objc optional func channel(_ channel: SendbirdChatSDK.GroupChannel, didReceiveInvitation invitees: [SendbirdChatSDK.User]?, inviter: SendbirdChatSDK.User?)
  @objc optional func channel(_ channel: SendbirdChatSDK.GroupChannel, didDeclineInvitation invitee: SendbirdChatSDK.User, inviter: SendbirdChatSDK.User?)
  @objc optional func channel(_ channel: SendbirdChatSDK.GroupChannel, userDidJoin user: SendbirdChatSDK.User)
  @objc optional func channel(_ channel: SendbirdChatSDK.GroupChannel, userDidLeave user: SendbirdChatSDK.User)
  @objc optional func channelWasHidden(_ channel: SendbirdChatSDK.GroupChannel)
  @objc optional func channel(_ channel: SendbirdChatSDK.GroupChannel, didUpdatePoll event: SendbirdChatSDK.PollUpdateEvent)
  @objc optional func channel(_ channel: SendbirdChatSDK.GroupChannel, didVotePoll event: SendbirdChatSDK.PollVoteEvent)
  @objc optional func channel(_ channel: SendbirdChatSDK.GroupChannel, pollWasDeleted pollId: Swift.Int64)
  @objc optional func channelDidUpdatePinnedMessages(_ channel: SendbirdChatSDK.GroupChannel)
}
extension SendbirdChatSDK.GroupChannelListQuery {
  @available(*, unavailable, renamed: "myMemberStateFilter")
  @objc final public var memberStateFilter: SendbirdChatSDK.MyMemberStateFilter {
    @objc get
  }
  @available(*, unavailable, message: "Use `GroupChannelListQueryParams`'s `setUserIdsIncludeFilter(_:queryType:)`")
  @objc final public func setUserIdsIncludeFilter(_ userIds: [Swift.String], queryType: SendbirdChatSDK.GroupChannelListQueryType)
  @available(*, unavailable, message: "Use `GroupChannelListQueryParams`'s `setSearchFilter(_:fields:)`")
  @objc final public func setSearchFilter(_ query: Swift.String, fields: SendbirdChatSDK.GroupChannelListQuerySearchField)
  @available(*, unavailable, message: "Use `GroupChannelListQueryParams`'s `setMetaDataFilter(_:values:)`")
  @objc(setMetaDataFilterWithKey:values:) final public func setMetaDataFilter(_ key: Swift.String, values: [Swift.String])
  @available(*, unavailable, message: "Use `GroupChannelListQueryParams`'s `setMetaDataFilterWithKey(_:valueStartsWith:)`")
  @objc(setMetaDataFilterWithKey:valueStartsWith:) final public func setMetaDataFilter(_ key: Swift.String, valueStartsWith value: Swift.String)
  @available(*, unavailable, message: "Use `GroupChannelListQueryParams`'s `limit`")
  @objc final public func setLimit(_ limit: Swift.UInt)
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(SBDGroupChannelListQuery) final public class GroupChannelListQuery : ObjectiveC.NSObject, Swift.Codable {
  @objc final public var hasNext: Swift.Bool {
    get
  }
  @objc final public var isLoading: Swift.Bool {
    get
  }
  @objc final public var limit: Swift.UInt {
    @objc get
  }
  required public init(from decoder: any Swift.Decoder) throws
  final public func encode(to encoder: any Swift.Encoder) throws
  @objc final public func loadNextPage(completionHandler: @escaping SendbirdChatSDK.GroupChannelListHandler)
  @objc deinit
}
extension SendbirdChatSDK.GroupChannelListQuery {
  @objc final public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
}
extension SendbirdChatSDK.GroupChannelListQuery {
  @objc final public func comparator() -> SendbirdChatSDK.SBObjectComparator
  @objc final public func orderBetweenObject(obj1: Any?, obj2: Any?) -> Foundation.ComparisonResult
}
extension SendbirdChatSDK.GroupChannelListQuery {
  @objc final public func belongsTo(channel: SendbirdChatSDK.GroupChannel) -> Swift.Bool
}
extension SendbirdChatSDK.GroupChannelListQuery : SendbirdChatSDK.Serializable {
  @objc final public func serialize() -> Foundation.Data?
  @objc public static func build(fromSerializedData data: Foundation.Data?) -> Self?
}
extension SendbirdChatSDK.GroupChannelListQuery {
  @objc final public var includeEmptyChannel: Swift.Bool {
    @objc get
  }
  @objc final public var includeFrozenChannel: Swift.Bool {
    @objc get
  }
  @objc final public var includeMemberList: Swift.Bool {
    @objc get
  }
  @objc final public var includeMetaData: Swift.Bool {
    @objc get
  }
  @objc final public var queryType: SendbirdChatSDK.GroupChannelListQueryType {
    @objc get
  }
  @objc final public var myMemberStateFilter: SendbirdChatSDK.MyMemberStateFilter {
    @objc get
  }
  @objc final public var channelURLsFilter: [Swift.String]? {
    @objc get
  }
  @objc final public var superChannelFilter: SendbirdChatSDK.GroupChannelSuperChannelFilter {
    @objc get
  }
  @objc final public var publicChannelFilter: SendbirdChatSDK.GroupChannelPublicChannelFilter {
    @objc get
  }
  @objc final public var customTypeStartsWithFilter: Swift.String? {
    @objc get
  }
  @objc final public var customTypesFilter: [Swift.String]? {
    @objc get
  }
  @objc final public var nicknameContainsFilter: Swift.String? {
    @objc get
  }
  @objc final public var nicknameStartsWithFilter: Swift.String? {
    @objc get
  }
  @objc final public var nicknameExactMatchFilter: Swift.String? {
    @objc get
  }
  @objc final public var userIdsIncludeFilter: [Swift.String]? {
    @objc get
  }
  @objc final public var userIdsExactFilter: [Swift.String]? {
    @objc get
  }
  @objc final public var channelNameContainsFilter: Swift.String? {
    @objc get
  }
  @objc final public var unreadChannelFilter: SendbirdChatSDK.UnreadChannelFilter {
    @objc get
  }
  @objc final public var metaDataOrderKeyFilter: Swift.String? {
    @objc get
  }
  @objc final public var metaDataKeyFilter: Swift.String? {
    @objc get
  }
  @objc final public var metaDataValuesFilter: [Swift.String]? {
    @objc get
  }
  @objc final public var metaDataValueStartsWithFilter: Swift.String? {
    @objc get
  }
  @objc final public var channelHiddenStateFilter: SendbirdChatSDK.ChannelHiddenStateFilter {
    @objc get
  }
  @objc final public var searchQuery: Swift.String? {
    @objc get
  }
  @objc final public var searchFields: SendbirdChatSDK.GroupChannelListQuerySearchField {
    @objc get
  }
  @objc final public var order: SendbirdChatSDK.GroupChannelListOrder {
    @objc get
  }
  @objc final public var includeChatNotification: Swift.Bool {
    @objc get
  }
  @objc final public var createdBefore: Swift.Int64 {
    @objc get
  }
  @objc final public var createdAfter: Swift.Int64 {
    @objc get
  }
}
@_inheritsConvenienceInitializers @objc(SBDGroupChannelListQueryParams) final public class GroupChannelListQueryParams : ObjectiveC.NSObject, Swift.Codable {
  @objc final public var includeEmptyChannel: Swift.Bool
  @objc final public var includeFrozenChannel: Swift.Bool
  @objc final public var includeMemberList: Swift.Bool
  @objc final public var includeMetaData: Swift.Bool
  @objc final public var order: SendbirdChatSDK.GroupChannelListOrder
  @objc final public var queryType: SendbirdChatSDK.GroupChannelListQueryType
  @objc final public var myMemberStateFilter: SendbirdChatSDK.MyMemberStateFilter
  @objc final public var channelURLsFilter: [Swift.String]?
  @objc final public var superChannelFilter: SendbirdChatSDK.GroupChannelSuperChannelFilter
  @objc final public var publicChannelFilter: SendbirdChatSDK.GroupChannelPublicChannelFilter
  @objc final public var customTypeStartsWithFilter: Swift.String?
  @objc final public var customTypesFilter: [Swift.String]?
  @objc final public var nicknameContainsFilter: Swift.String? {
    @objc get
    @objc set
  }
  @objc final public var nicknameStartsWithFilter: Swift.String?
  @objc final public var nicknameExactMatchFilter: Swift.String?
  @objc final public var userIdsIncludeFilter: [Swift.String]? {
    @objc get
  }
  @objc final public var userIdsExactFilter: [Swift.String]? {
    @objc get
    @objc set
  }
  @objc final public var channelNameContainsFilter: Swift.String?
  @objc final public var unreadChannelFilter: SendbirdChatSDK.UnreadChannelFilter
  @objc final public var metaDataOrderKeyFilter: Swift.String?
  @objc final public var metaDataKeyFilter: Swift.String?
  @objc final public var metaDataValuesFilter: [Swift.String]?
  @objc final public var metaDataValueStartsWithFilter: Swift.String?
  @objc final public var channelHiddenStateFilter: SendbirdChatSDK.ChannelHiddenStateFilter
  @objc final public var searchQuery: Swift.String? {
    get
  }
  @objc final public var searchFields: SendbirdChatSDK.GroupChannelListQuerySearchField {
    get
  }
  @objc final public var limit: Swift.UInt
  @objc final public var includeChatNotification: Swift.Bool
  @objc final public var createdBefore: Swift.Int64
  @objc final public var createdAfter: Swift.Int64
  @objc override dynamic public init()
  @objc public init(builder: (SendbirdChatSDK.GroupChannelListQueryParams) -> Swift.Void)
  @objc final public func setUserIdsIncludeFilter(_ userIds: [Swift.String], queryType: SendbirdChatSDK.GroupChannelListQueryType)
  @objc final public func setSearchFilter(_ query: Swift.String, fields: SendbirdChatSDK.GroupChannelListQuerySearchField)
  @objc(setMetaDataFilterWithKey:values:) final public func setMetaDataFilter(_ key: Swift.String, values: [Swift.String])
  @objc(setMetaDataFilterWithKey:valueStartsWith:) final public func setMetaDataFilter(_ key: Swift.String, valueStartsWith value: Swift.String)
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension SendbirdChatSDK.GroupChannelListQueryParams {
  @objc override final public func isEqual(_ object: Any?) -> Swift.Bool
}
extension SendbirdChatSDK.GroupChannelListQueryParams : Foundation.NSCopying {
  @objc final public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
}
@available(*, unavailable, renamed: "MemberListQuery")
public typealias GroupChannelMemberListQuery = SendbirdChatSDK.MemberListQuery
@_inheritsConvenienceInitializers @objc(SBDGroupChannelCreateParams) final public class GroupChannelCreateParams : ObjectiveC.NSObject, Swift.Codable {
  @available(*, unavailable, renamed: "channelURL")
  @objc final public var channelUrl: Swift.String? {
    @objc get
  }
  @objc final public var channelURL: Swift.String?
  @objc final public var isSuper: Swift.Bool
  @objc final public var isBroadcast: Swift.Bool
  @objc final public var isExclusive: Swift.Bool
  @objc final public var isPublic: Swift.Bool
  @objc final public var isDistinct: Swift.Bool
  @objc final public var isEphemeral: Swift.Bool
  @available(*, unavailable, renamed: "isDiscoverable")
  @objc final public var discoverable: Swift.Bool {
    @objc get
  }
  @objc final public var isDiscoverable: Swift.Bool
  @available(*, unavailable, renamed: "isStrict")
  @objc final public var strict: Swift.Bool {
    @objc get
  }
  @objc final public var isStrict: Swift.Bool
  @objc final public var customType: Swift.String?
  @objc final public var data: Swift.String?
  @available(*, unavailable, renamed: "coverURL")
  @objc final public var coverUrl: Swift.String? {
    @objc get
  }
  @objc final public var coverURL: Swift.String?
  @objc final public var coverImage: Foundation.Data?
  @objc final public var name: Swift.String?
  @objc final public var operatorUserIds: [Swift.String]? {
    @objc get
    @objc set
  }
  @objc final public var userIds: [Swift.String]? {
    @objc get
    @objc set
  }
  @objc final public var accessCode: Swift.String?
  @objc final public var messageSurvivalSeconds: Swift.Int
  @objc override dynamic public init()
  final public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
  @objc final public func addUser(_ user: SendbirdChatSDK.User)
  @objc final public func addUserId(_ userId: Swift.String)
  @objc final public func addUsers(_ users: [SendbirdChatSDK.User])
  @objc final public func addUserIds(_ userIds: [Swift.String])
  @objc final public func setOperators(_ operators: [SendbirdChatSDK.User])
  @objc deinit
}
extension SendbirdChatSDK.GroupChannelCreateParams : Foundation.NSCopying {
  @objc final public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
}
@_inheritsConvenienceInitializers @objc(SBDGroupChannelTotalUnreadChannelCountParams) final public class GroupChannelTotalUnreadChannelCountParams : ObjectiveC.NSObject, Swift.Encodable {
  @objc final public var customTypesFilter: [Swift.String]?
  @objc final public var superChannelFilter: SendbirdChatSDK.GroupChannelSuperChannelFilter
  final public func encode(to encoder: any Swift.Encoder) throws
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(SBDGroupChannelTotalUnreadMessageCountParams) final public class GroupChannelTotalUnreadMessageCountParams : ObjectiveC.NSObject {
  @objc final public var channelCustomTypesFilter: [Swift.String]?
  @objc final public var superChannelFilter: SendbirdChatSDK.GroupChannelSuperChannelFilter
  @objc override dynamic public init()
  @objc deinit
}
@objc(SBDGroupChannelListOrder) public enum GroupChannelListOrder : Swift.Int {
  case chronological = 0
  case latestLastMessage = 1
  case channelNameAlphabetical = 2
  case channelMetaDataValueAlphabetical = 3
}
extension SendbirdChatSDK.GroupChannelListOrder : Swift.RawRepresentable, Swift.Codable {
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
  public init(rawValue: Swift.String)
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
@objc(SBDPublicGroupChannelListOrder) public enum PublicGroupChannelListOrder : Swift.Int {
  case chronological = 0
  case channelNameAlphabetical = 2
  case channelMetaDataValueAlphabetical = 3
}
extension SendbirdChatSDK.PublicGroupChannelListOrder : Swift.RawRepresentable, Swift.Codable {
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
  public init(rawValue: Swift.String)
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
@objc(SBDGroupChannelListQueryType) public enum GroupChannelListQueryType : Swift.Int {
  case and = 0
  case or = 1
}
extension SendbirdChatSDK.GroupChannelListQueryType : Swift.RawRepresentable, Swift.Codable {
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
  public init?(rawValue: Swift.String)
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
@objc(SBDGroupChannelSuperChannelFilter) public enum GroupChannelSuperChannelFilter : Swift.Int {
  case all = 0
  case `super` = 1
  case nonSuper = 2
  case broadcastOnly = 3
  case exclusiveOnly = 4
}
extension SendbirdChatSDK.GroupChannelSuperChannelFilter : Swift.RawRepresentable, Swift.Codable {
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
  public init(rawValue: Swift.String)
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
@objc(SBDGroupChannelPublicChannelFilter) public enum GroupChannelPublicChannelFilter : Swift.Int {
  case all = 0
  case `public` = 1
  case `private` = 2
}
extension SendbirdChatSDK.GroupChannelPublicChannelFilter : Swift.RawRepresentable, Swift.Codable {
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
  public init(rawValue: Swift.String)
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
@objc(SBDPublicGroupChannelMembershipFilter) public enum PublicGroupChannelMembershipFilter : Swift.Int {
  case all = 0
  case joined = 1
}
extension SendbirdChatSDK.PublicGroupChannelMembershipFilter : Swift.RawRepresentable, Swift.Codable {
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
  public init(rawValue: Swift.String)
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
@objc(SBDGroupChannelOperatorFilter) public enum GroupChannelOperatorFilter : Swift.Int {
  case all = 0
  case `operator` = 1
  case nonOperator = 2
}
extension SendbirdChatSDK.GroupChannelOperatorFilter : Swift.RawRepresentable, Swift.Codable {
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
  public init(rawValue: Swift.String)
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
@objc(SBDGroupChannelMutedMemberFilter) public enum GroupChannelMutedMemberFilter : Swift.Int {
  case all = 0
  case muted = 1
  case unmuted = 2
}
extension SendbirdChatSDK.GroupChannelMutedMemberFilter : Swift.RawRepresentable, Swift.Codable {
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
  public init(rawValue: Swift.String)
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
@objc(SBDUnreadChannelFilter) public enum UnreadChannelFilter : Swift.Int {
  case all = 0
  case unreadMessage = 1
}
extension SendbirdChatSDK.UnreadChannelFilter : Swift.RawRepresentable, Swift.Codable {
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
  public init(rawValue: Swift.String)
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
@objc(SBDGroupChannelHiddenState) public enum GroupChannelHiddenState : Swift.Int {
  case unhidden = 0
  case hiddenAllowAutoUnhide = 1
  case hiddenPreventAutoUnhide = 2
}
extension SendbirdChatSDK.GroupChannelHiddenState : Swift.RawRepresentable, Swift.Codable {
  public typealias RawValue = Swift.String
  public init(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
@objc(SBDChannelHiddenStateFilter) public enum ChannelHiddenStateFilter : Swift.Int {
  case unhiddenOnly = 0
  case hiddenOnly = 1
  case hiddenAllowAutoUnhide = 2
  case hiddenPreventAutoUnhide = 3
  case all = 4
}
extension SendbirdChatSDK.ChannelHiddenStateFilter : Swift.RawRepresentable, Swift.Codable {
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
  public init(rawValue: Swift.String)
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
@objc(SBDGroupChannelPushTriggerOption) public enum GroupChannelPushTriggerOption : Swift.Int {
  case `default` = 0
  case all = 1
  case off = 2
  case mentionOnly = 3
}
extension SendbirdChatSDK.GroupChannelPushTriggerOption : Swift.RawRepresentable, Swift.Codable {
  public typealias RawValue = Swift.String
  public init(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
@objc(SBDPushTokenType) public enum PushTokenType : Swift.Int {
  case none = 0
  case GCM = 1
  case APNS = 2
  case APNSVoIP = 3
}
extension SendbirdChatSDK.PushTokenType : Swift.RawRepresentable, Swift.CustomStringConvertible, Swift.Codable {
  public typealias RawValue = Swift.String
  public var description: Swift.String {
    get
  }
  public var rawValue: Swift.String {
    get
  }
  public init(rawValue: Swift.String)
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
@objc(SBDGroupChannelListQuerySearchField) final public class GroupChannelListQuerySearchField : ObjectiveC.NSObject, Swift.OptionSet, Swift.Codable {
  @objc final public var rawValue: Swift.UInt
  @objc required public init(rawValue: Swift.UInt)
  @objc public static let memberNickname: SendbirdChatSDK.GroupChannelListQuerySearchField
  @objc public static let channelName: SendbirdChatSDK.GroupChannelListQuerySearchField
  @objc convenience public init(fields: [SendbirdChatSDK.GroupChannelListQuerySearchField])
  required convenience public init(from decoder: any Swift.Decoder) throws
  final public func encode(to encoder: any Swift.Encoder) throws
  @objc override final public var hash: Swift.Int {
    @objc get
  }
  @objc override final public func isEqual(_ object: Any?) -> Swift.Bool
  @objc final public func formUnion(_ other: SendbirdChatSDK.GroupChannelListQuerySearchField)
  @objc final public func formIntersection(_ other: SendbirdChatSDK.GroupChannelListQuerySearchField)
  @objc final public func formSymmetricDifference(_ other: SendbirdChatSDK.GroupChannelListQuerySearchField)
  public typealias ArrayLiteralElement = SendbirdChatSDK.GroupChannelListQuerySearchField
  public typealias Element = SendbirdChatSDK.GroupChannelListQuerySearchField
  public typealias RawValue = Swift.UInt
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(SBDGroupChannelUpdateParams) final public class GroupChannelUpdateParams : ObjectiveC.NSObject, Swift.Encodable {
  @objc final public var name: Swift.String?
  @available(*, unavailable, renamed: "coverURL")
  @objc final public var coverUrl: Swift.String? {
    @objc get
  }
  @objc final public var coverURL: Swift.String?
  @objc final public var coverImage: Foundation.Data?
  @objc final public var data: Swift.String?
  @objc final public var customType: Swift.String?
  @objc final public var isPublic: Swift.Bool {
    @objc get
    @objc set
  }
  @objc final public var isDistinct: Swift.Bool {
    @objc get
    @objc set
  }
  @objc final public var isDiscoverable: Swift.Bool {
    @objc get
    @objc set
  }
  @objc final public var accessCode: Swift.String?
  @objc final public var operatorUserIds: [Swift.String]? {
    @objc get
    @objc set
  }
  @objc final public var messageSurvivalSeconds: Swift.Int {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  final public func encode(to encoder: any Swift.Encoder) throws
  @objc final public func setOperators(_ operators: [SendbirdChatSDK.User])
  @objc deinit
}
public typealias VoidHandler = (() -> Swift.Void)
public typealias SBErrorHandler = ((_ error: SendbirdChatSDK.SBError?) -> Swift.Void)
public typealias UserHandler = ((_ user: SendbirdChatSDK.User?, _ error: SendbirdChatSDK.SBError?) -> Swift.Void)
public typealias GetPushTokensHandler = ((_ pushTokens: [Swift.String], _ pushTokenType: SendbirdChatSDK.PushTokenType, _ hasMore: Swift.Bool, _ token: Swift.String?, _ error: SendbirdChatSDK.SBError?) -> Swift.Void)
public typealias ChannelChangeLogsHandler = ((_ updatedChannel: [SendbirdChatSDK.GroupChannel]?, _ deletedChannelURLs: [Swift.String]?, _ hasMore: Swift.Bool, _ token: Swift.String?, _ error: SendbirdChatSDK.SBError?) -> Swift.Void)
public typealias FeedChannelChangeLogsHandler = ((_ updatedChannel: [SendbirdChatSDK.FeedChannel]?, _ deletedChannelURLs: [Swift.String]?, _ hasMore: Swift.Bool, _ token: Swift.String?, _ error: SendbirdChatSDK.SBError?) -> Swift.Void)
public typealias ChannelChangeLogsPagerHandler = ((_ updatedChannels: [SendbirdChatSDK.GroupChannel], _ deletedChannelURLs: [Swift.String], _ token: Swift.String?, _ error: SendbirdChatSDK.SBError?) -> Swift.Void)
public typealias MembersChangeLogsHandler = ((_ result: SendbirdChatSDK.MembersChangeLogsResult?, _ error: SendbirdChatSDK.SBError?) -> Swift.Void)
public typealias SnoozePeriodHandler = ((_ enabled: Swift.Bool, _ startTimestamp: Swift.Int64, _ endTimestamp: Swift.Int64, _ error: SendbirdChatSDK.SBError?) -> Swift.Void)
public typealias PushTriggerOptionHandler = ((_ pushTriggerOption: SendbirdChatSDK.PushTriggerOption, _ error: SendbirdChatSDK.SBError?) -> Swift.Void)
public typealias ReactionEventHandler = ((_ event: SendbirdChatSDK.ReactionEvent?, _ error: SendbirdChatSDK.SBError?) -> Swift.Void)
public typealias BaseMessageHandler = ((_ message: SendbirdChatSDK.BaseMessage?, _ error: SendbirdChatSDK.SBError?) -> Swift.Void)
public typealias UserMessageHandler = ((_ message: SendbirdChatSDK.UserMessage?, _ error: SendbirdChatSDK.SBError?) -> Swift.Void)
public typealias FileMessageHandler = ((_ message: SendbirdChatSDK.FileMessage?, _ error: SendbirdChatSDK.SBError?) -> Swift.Void)
public typealias ProgressHandler = ((_ bytesSent: Swift.Int64, _ totalBytesSent: Swift.Int64, _ totalBytesExpectedToSend: Swift.Int64) -> Swift.Void)
public typealias MultiProgressHandler = ((_ requestId: Swift.String?, _ bytesSent: Swift.Int64, _ totalBytesSent: Swift.Int64, _ totalBytesExpectedToSend: Swift.Int64) -> Swift.Void)
public typealias MultipleFilesMessageHandler = ((_ message: SendbirdChatSDK.MultipleFilesMessage?, _ error: SendbirdChatSDK.SBError?) -> Swift.Void)
public typealias FileUploadHandler = ((_ requestId: Swift.String, _ index: Swift.Int, _ uploadableFileInfo: SendbirdChatSDK.UploadableFileInfo, _ error: SendbirdChatSDK.SBError?) -> Swift.Void)
public typealias MessageChangeLogHandler = ((_ updatedMessages: [SendbirdChatSDK.BaseMessage]?, _ deletedMessageIds: [Swift.Int64]?, _ hasMore: Swift.Bool, _ token: Swift.String?, _ error: SendbirdChatSDK.SBError?) -> Swift.Void)
public typealias MessageListHandler = ((_ messages: [SendbirdChatSDK.BaseMessage]?, _ error: SendbirdChatSDK.SBError?) -> Swift.Void)
public typealias MessageRequestIdsHandler = ((_ requestIds: [Swift.String]?, _ error: SendbirdChatSDK.SBError?) -> Swift.Void)
public typealias MetaDataHandler = ((_ metaData: [Swift.String : Swift.String]?, _ error: SendbirdChatSDK.SBError?) -> Swift.Void)
public typealias MetaCountersHandler = ((_ metaData: [Swift.String : Swift.Int]?, _ error: SendbirdChatSDK.SBError?) -> Swift.Void)
public typealias BaseChannelHandler = ((_ channel: SendbirdChatSDK.BaseChannel?, _ error: SendbirdChatSDK.SBError?) -> Swift.Void)
public typealias GroupChannelHandler = ((_ channel: SendbirdChatSDK.GroupChannel?, _ error: SendbirdChatSDK.SBError?) -> Swift.Void)
public typealias FeedChannelHandler = ((_ channel: SendbirdChatSDK.FeedChannel?, _ error: SendbirdChatSDK.SBError?) -> Swift.Void)
public typealias DistinctGroupChannelHandler = ((_ channel: SendbirdChatSDK.GroupChannel?, _ isCreated: Swift.Bool, _ error: SendbirdChatSDK.SBError?) -> Swift.Void)
public typealias OpenChannelHandler = ((_ channel: SendbirdChatSDK.OpenChannel?, _ error: SendbirdChatSDK.SBError?) -> Swift.Void)
public typealias GroupChannelPushTriggerOptionHandler = ((_ option: SendbirdChatSDK.GroupChannelPushTriggerOption, _ error: SendbirdChatSDK.SBError?) -> Swift.Void)
public typealias ThreadedMessageListHandler = ((_ parentMessage: SendbirdChatSDK.BaseMessage?, _ messages: [SendbirdChatSDK.BaseMessage]?, _ error: SendbirdChatSDK.SBError?) -> Swift.Void)
public typealias MuteInfoHandler = ((_ isMuted: Swift.Bool, _ description: Swift.String, _ startAt: Swift.Int64, _ endAt: Swift.Int64, _ remainingDuration: Swift.Int64, _ error: SendbirdChatSDK.SBError?) -> Swift.Void)
public typealias SBDResponseHandler = ((_ response: Any?, _ error: SendbirdChatSDK.SBError?) -> Swift.Void)
public typealias PollHandler = (_ poll: SendbirdChatSDK.Poll?, _ error: SendbirdChatSDK.SBError?) -> Swift.Void
public typealias PollListHandler = (_ polls: [SendbirdChatSDK.Poll]?, _ error: SendbirdChatSDK.SBError?) -> Swift.Void
public typealias PollOptionHandler = (_ option: SendbirdChatSDK.PollOption?, _ error: SendbirdChatSDK.SBError?) -> Swift.Void
public typealias PollChangeLogsHandler = ((_ updatedPolls: [SendbirdChatSDK.Poll]?, _ deletedPollIds: [Swift.Int64]?, _ hasMore: Swift.Bool, _ token: Swift.String?, _ error: SendbirdChatSDK.SBError?) -> Swift.Void)
public typealias PollVoteEventHandler = ((_ event: SendbirdChatSDK.PollVoteEvent?, _ error: SendbirdChatSDK.SBError?) -> Swift.Void)?
public typealias GroupChannelListHandler = (_ channels: [SendbirdChatSDK.GroupChannel]?, _ error: SendbirdChatSDK.SBError?) -> Swift.Void
public typealias FeedChannelListHandler = (_ channels: [SendbirdChatSDK.FeedChannel]?, _ error: SendbirdChatSDK.SBError?) -> Swift.Void
public typealias OpenChannelListHandler = (_ channels: [SendbirdChatSDK.OpenChannel]?, _ error: SendbirdChatSDK.SBError?) -> Swift.Void
public typealias UserListHandler = (_ users: [SendbirdChatSDK.User]?, _ error: SendbirdChatSDK.SBError?) -> Swift.Void
public typealias RestrictedUserListHandler = (_ users: [SendbirdChatSDK.RestrictedUser]?, _ error: SendbirdChatSDK.SBError?) -> Swift.Void
public typealias VoterListHandler = (_ voters: [SendbirdChatSDK.User]?, _ error: SendbirdChatSDK.SBError?) -> Swift.Void
public typealias MemberListHandler = (_ members: [SendbirdChatSDK.Member]?, _ error: SendbirdChatSDK.SBError?) -> Swift.Void
public typealias CountHandler = (_ count: Swift.UInt, _ error: SendbirdChatSDK.SBError?) -> Swift.Void
public typealias UnreadMessageCountHandler = (_ groupChannelCount: Swift.UInt, _ feedChannelCount: Swift.UInt, _ error: SendbirdChatSDK.SBError?) -> Swift.Void
public typealias NotificationTemplateHandler = (_ notificationTemplate: SendbirdChatSDK.NotificationTemplate?, _ error: SendbirdChatSDK.SBError?) -> Swift.Void
public typealias NotificationTemplateListHandler = (_ notificationTemplateList: SendbirdChatSDK.NotificationTemplateList?, _ hasMore: Swift.Bool, _ token: Swift.String?, _ error: SendbirdChatSDK.SBError?) -> Swift.Void
public typealias GlobalNotificationChannelSettingHandler = (_ globalNotificationChannelSetting: SendbirdChatSDK.GlobalNotificationChannelSetting?, _ error: SendbirdChatSDK.SBError?) -> Swift.Void
public typealias PinnedMessageListHandler = (_ messages: [SendbirdChatSDK.PinnedMessage]?, _ error: SendbirdChatSDK.SBError?) -> Swift.Void
public typealias UIKitConfigurationHandler = (_ uikitConfiguration: SendbirdChatSDK.UIKitConfiguration?, _ error: SendbirdChatSDK.SBError?) -> Swift.Void
public typealias FeedbackHandler = (_ feedback: SendbirdChatSDK.Feedback?, _ error: SendbirdChatSDK.SBError?) -> Swift.Void
public typealias MessageTemplateHandler = (_ messageTemplate: SendbirdChatSDK.MessageTemplate?, _ error: SendbirdChatSDK.SBError?) -> Swift.Void
public typealias MessageTemplateListHandler = (_ messageTemplateList: SendbirdChatSDK.MessageTemplateList?, _ hasMore: Swift.Bool, _ token: Swift.String?, _ error: SendbirdChatSDK.SBError?) -> Swift.Void
@objc(SBDInitParams) final public class InitParams : ObjectiveC.NSObject {
  @objc final public var applicationId: Swift.String
  @objc final public var isLocalCachingEnabled: Swift.Bool
  @objc final public var logLevel: SendbirdChatSDK.LogLevel
  @objc final public var appVersion: Swift.String?
  @objc final public var localCacheConfig: SendbirdChatSDK.LocalCacheConfig?
  @objc final public var needsSynchronous: Swift.Bool
  @objc public init(applicationId: Swift.String, isLocalCachingEnabled: Swift.Bool = false, localCacheConfig: SendbirdChatSDK.LocalCacheConfig? = nil, logLevel: SendbirdChatSDK.LogLevel = .none, appVersion: Swift.String? = nil)
  @objc public init(applicationId: Swift.String, isLocalCachingEnabled: Swift.Bool = false, localCacheConfig: SendbirdChatSDK.LocalCacheConfig? = nil, logLevel: SendbirdChatSDK.LogLevel = .none, appVersion: Swift.String? = nil, needsSynchronous: Swift.Bool)
  @objc override final public func isEqual(_ object: Any?) -> Swift.Bool
  @objc deinit
}
infix operator ?+= : AssignmentPrecedence
infix operator ?= : DefaultPrecedence
infix operator =? : DefaultPrecedence
@objc(SBDChannelMetaCountersUpdateMode) public enum ChannelMetaCountersUpdateMode : Swift.Int {
  case set = 0
  case increase = 1
  case decrease = 2
}
extension SendbirdChatSDK.ChannelMetaCountersUpdateMode : Swift.RawRepresentable, Swift.Codable {
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
  public init(rawValue: Swift.String)
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
@objc(SBDLocalCacheConfig) final public class LocalCacheConfig : ObjectiveC.NSObject {
  @objc final public var maxSize: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc final public var clearOrder: SendbirdChatSDK.CachedDataClearOrder
  @objc final public var customClearOrderComparator: ((SendbirdChatSDK.CachedBaseChannelInfo, SendbirdChatSDK.CachedBaseChannelInfo) -> Foundation.ComparisonResult)?
  @objc final public var isEncryptionEnabled: Swift.Bool {
    get
  }
  @objc final public var enableAutoResend: Swift.Bool {
    get
  }
  @objc convenience public init(isEncryptionEnabled: Swift.Bool)
  @objc public init(isEncryptionEnabled: Swift.Bool = false, enableAutoResend: Swift.Bool = true)
  @objc deinit
}
@objc public protocol Mappable {
  @objc func initWithDictionary(_ json: [Swift.String : Any]) -> Self?
  @objc optional func _toDictionary() -> [Swift.String : Any]
}
extension SendbirdChatSDK.BaseMessage : SendbirdChatSDK.Mappable {
  @objc dynamic public func initWithDictionary(_ json: [Swift.String : Any]) -> Self?
  @objc dynamic public func _toDictionary() -> [Swift.String : Any]
}
extension SendbirdChatSDK.BaseChannel : SendbirdChatSDK.Mappable {
  @objc dynamic public func initWithDictionary(_ json: [Swift.String : Any]) -> Self?
  @objc dynamic public func _toDictionary() -> [Swift.String : Any]
}
extension SendbirdChatSDK.User : SendbirdChatSDK.Mappable {
  @objc dynamic public func initWithDictionary(_ json: [Swift.String : Any]) -> Self?
  @objc dynamic public func _toDictionary() -> [Swift.String : Any]
}
extension SendbirdChatSDK.Poll : SendbirdChatSDK.Mappable {
  @objc final public func initWithDictionary(_ json: [Swift.String : Any]) -> Self?
  @objc final public func _toDictionary() -> [Swift.String : Any]
}
extension SendbirdChatSDK.EmojiCategory : SendbirdChatSDK.Mappable {
  @objc final public func initWithDictionary(_ json: [Swift.String : Any]) -> Self?
  @objc final public func _toDictionary() -> [Swift.String : Any]
}
extension SendbirdChatSDK.ReactionEvent : SendbirdChatSDK.Mappable {
  @objc final public func initWithDictionary(_ json: [Swift.String : Any]) -> Self?
  @objc final public func _toDictionary() -> [Swift.String : Any]
}
extension SendbirdChatSDK.UnreadItemCount : SendbirdChatSDK.Mappable {
  @objc final public func initWithDictionary(_ json: [Swift.String : Any]) -> Self?
  @objc final public func _toDictionary() -> [Swift.String : Any]
}
extension SendbirdChatSDK.Reaction : SendbirdChatSDK.Mappable {
  @objc final public func initWithDictionary(_ json: [Swift.String : Any]) -> Self?
  @objc final public func _toDictionary() -> [Swift.String : Any]
}
@_hasMissingDesignatedInitializers @objc(SBDMember) final public class Member : SendbirdChatSDK.User {
  @objc final public var state: SendbirdChatSDK.MemberState {
    get
  }
  @objc final public var isBlockedByMe: Swift.Bool {
    get
  }
  @objc final public var isBlockingMe: Swift.Bool {
    get
  }
  @objc final public var isMuted: Swift.Bool {
    get
  }
  @objc final public var role: SendbirdChatSDK.Role {
    get
  }
  @objc final public var restrictionInfo: SendbirdChatSDK.RestrictionInfo? {
    get
  }
  required public init(from decoder: any Swift.Decoder) throws
  override final public func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
extension SendbirdChatSDK.Member {
  @objc override final public func isEqual(_ object: Any?) -> Swift.Bool
  @objc override final public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
}
extension SendbirdChatSDK.Member {
  @objc override final public func serialize() -> Foundation.Data?
  @objc final override public class func build(fromSerializedData data: Foundation.Data?) -> Self?
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(SBDMemberListQuery) final public class MemberListQuery : ObjectiveC.NSObject {
  @objc final public var hasNext: Swift.Bool {
    get
  }
  @objc final public var isLoading: Swift.Bool {
    get
  }
  @objc final public func loadNextPage(completionHandler: @escaping SendbirdChatSDK.MemberListHandler)
  @objc final public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @objc deinit
}
extension SendbirdChatSDK.MemberListQuery {
  @objc final public var nicknameStartsWithFilter: Swift.String? {
    @objc get
  }
  @objc final public var operatorFilter: SendbirdChatSDK.GroupChannelOperatorFilter {
    @objc get
  }
  @objc final public var mutedMemberFilter: SendbirdChatSDK.GroupChannelMutedMemberFilter {
    @objc get
  }
  @objc final public var memberStateFilter: SendbirdChatSDK.MemberStateFilter {
    @objc get
  }
  @objc final public var order: SendbirdChatSDK.MemberListOrder {
    @objc get
  }
  @objc final public var limit: Swift.UInt {
    @objc get
  }
}
@_inheritsConvenienceInitializers @objc(SBDMemberListQueryParams) final public class MemberListQueryParams : ObjectiveC.NSObject {
  @objc final public var nicknameStartsWithFilter: Swift.String?
  @objc final public var operatorFilter: SendbirdChatSDK.GroupChannelOperatorFilter
  @objc final public var mutedMemberFilter: SendbirdChatSDK.GroupChannelMutedMemberFilter
  @objc final public var memberStateFilter: SendbirdChatSDK.MemberStateFilter
  @objc final public var order: SendbirdChatSDK.MemberListOrder
  @objc final public var limit: Swift.UInt
  @objc override dynamic public init()
  @objc public init(builder: (SendbirdChatSDK.MemberListQueryParams) -> Swift.Void)
  @objc deinit
}
extension SendbirdChatSDK.MemberListQueryParams {
  @objc override final public func isEqual(_ object: Any?) -> Swift.Bool
}
extension SendbirdChatSDK.MemberListQueryParams : Foundation.NSCopying {
  @objc final public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
}
@objc open class MembersChangeLogsResult : ObjectiveC.NSObject {
  @objc final public let userList: [SendbirdChatSDK.User]
  @objc final public let remainingTimeUntilNextRequest: Swift.Int64
  @objc final public let hasMore: Swift.Bool
  @objc final public let token: Swift.String?
  public init(userList: [SendbirdChatSDK.User], remainingTimeUntilNextRequest: Swift.Int64, hasMore: Swift.Bool, token: Swift.String?)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(SBDMessageChangeLogsParams) final public class MessageChangeLogsParams : ObjectiveC.NSObject, Foundation.NSCopying {
  @objc final public var includeMetaArray: Swift.Bool
  @objc final public var includeReactions: Swift.Bool
  @objc final public var includeThreadInfo: Swift.Bool
  @objc final public var includeParentMessageInfo: Swift.Bool
  @objc final public var replyType: SendbirdChatSDK.ReplyType
  @objc override dynamic public init()
  @objc public init(includeMetaArray: Swift.Bool = false, includeReactions: Swift.Bool = false, includeThreadInfo: Swift.Bool = false, includeParentMessageInfo: Swift.Bool = false, replyType: SendbirdChatSDK.ReplyType = .none)
  @objc(createWithPreviousMessageListQuery:) public static func create(with query: SendbirdChatSDK.PreviousMessageListQuery?) -> SendbirdChatSDK.MessageChangeLogsParams
  @objc(createWithMessageListParams:) public static func create(with params: SendbirdChatSDK.MessageListParams?) -> SendbirdChatSDK.MessageChangeLogsParams
  @objc final public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @objc deinit
}
extension SendbirdChatSDK.MessageCollection : SendbirdChatSDK.GroupChannelDelegate {
  @objc dynamic open func channel(_ channel: SendbirdChatSDK.BaseChannel, didReceive message: SendbirdChatSDK.BaseMessage)
  @objc dynamic open func channel(_ channel: SendbirdChatSDK.BaseChannel, didUpdate message: SendbirdChatSDK.BaseMessage)
  @objc dynamic open func channel(_ channel: SendbirdChatSDK.BaseChannel, messageWasDeleted messageId: Swift.Int64)
  @objc dynamic open func channel(_ channel: SendbirdChatSDK.BaseChannel, updatedReaction reactionEvent: SendbirdChatSDK.ReactionEvent)
  @objc dynamic open func channel(_ channel: SendbirdChatSDK.BaseChannel, didUpdateThreadInfo threadInfoUpdateEvent: SendbirdChatSDK.ThreadInfoUpdateEvent)
  @objc dynamic open func channelWasChanged(_ channel: SendbirdChatSDK.BaseChannel)
  @objc dynamic open func channel(_ channel: SendbirdChatSDK.GroupChannel, didReceiveInvitation invitees: [SendbirdChatSDK.User]?, inviter: SendbirdChatSDK.User?)
  @objc dynamic open func channelDidUpdateDeliveryStatus(_ channel: SendbirdChatSDK.GroupChannel)
  @objc dynamic open func channelDidUpdateReadStatus(_ channel: SendbirdChatSDK.GroupChannel)
  @objc dynamic open func channelDidChangeMemberCount(_ channels: [SendbirdChatSDK.GroupChannel])
  @objc dynamic open func channel(_ channel: SendbirdChatSDK.BaseChannel, userWasMuted user: SendbirdChatSDK.RestrictedUser)
  @objc dynamic open func channel(_ channel: SendbirdChatSDK.BaseChannel, userWasUnmuted user: SendbirdChatSDK.User)
  @objc dynamic open func channelWasFrozen(_ channel: SendbirdChatSDK.BaseChannel)
  @objc dynamic open func channelWasUnfrozen(_ channel: SendbirdChatSDK.BaseChannel)
  @objc dynamic open func channelWasHidden(_ channel: SendbirdChatSDK.GroupChannel)
  @objc dynamic open func channelDidUpdateOperators(_ channel: SendbirdChatSDK.BaseChannel)
  @objc dynamic open func channelDidUpdateTypingStatus(_ channel: SendbirdChatSDK.GroupChannel)
  @objc dynamic open func channel(_ channel: SendbirdChatSDK.GroupChannel, userDidLeave user: SendbirdChatSDK.User)
  @objc dynamic open func channel(_ channel: SendbirdChatSDK.BaseChannel, userWasBanned user: SendbirdChatSDK.RestrictedUser)
  @objc dynamic open func channel(_ channel: SendbirdChatSDK.GroupChannel, didDeclineInvitation invitee: SendbirdChatSDK.User, inviter: SendbirdChatSDK.User?)
  @objc dynamic open func channel(_ channel: SendbirdChatSDK.GroupChannel, userDidJoin user: SendbirdChatSDK.User)
  @objc dynamic open func channelWasDeleted(_ channelURL: Swift.String, channelType: SendbirdChatSDK.ChannelType)
  @objc dynamic open func channel(_ channel: SendbirdChatSDK.BaseChannel, didReceiveMention message: SendbirdChatSDK.BaseMessage)
  @objc dynamic open func channel(_ channel: SendbirdChatSDK.BaseChannel, createdMetaData: [Swift.String : Swift.String]?)
  @objc dynamic open func channel(_ channel: SendbirdChatSDK.BaseChannel, updatedMetaData: [Swift.String : Swift.String]?)
  @objc dynamic open func channel(_ channel: SendbirdChatSDK.BaseChannel, deletedMetaDataKeys: [Swift.String]?)
  @objc dynamic open func channel(_ channel: SendbirdChatSDK.BaseChannel, createdMetaCounters: [Swift.String : Swift.Int]?)
  @objc dynamic open func channel(_ channel: SendbirdChatSDK.BaseChannel, updatedMetaCounters: [Swift.String : Swift.Int]?)
  @objc dynamic open func channel(_ channel: SendbirdChatSDK.BaseChannel, deletedMetaCountersKeys: [Swift.String]?)
  @objc dynamic open func channel(_ channel: SendbirdChatSDK.GroupChannel, didUpdatePoll event: SendbirdChatSDK.PollUpdateEvent)
  @objc dynamic open func channel(_ channel: SendbirdChatSDK.GroupChannel, didVotePoll event: SendbirdChatSDK.PollVoteEvent)
  @objc dynamic open func channelDidUpdatePinnedMessages(_ channel: SendbirdChatSDK.GroupChannel)
  @objc dynamic open func channel(_ channel: SendbirdChatSDK.GroupChannel, didUpdateFeedbackMessage: SendbirdChatSDK.BaseMessage)
}
extension SendbirdChatSDK.MessageCollection : SendbirdChatSDK.ConnectionDelegate {
  @objc dynamic public func didStartReconnection()
  @objc dynamic open func didSucceedReconnection()
  @objc dynamic open func didConnect(userId: Swift.String)
}
@_hasMissingDesignatedInitializers @objc(SBDMessageCollection) open class MessageCollection : SendbirdChatSDK.BaseCollection {
  @objc weak open var delegate: (any SendbirdChatSDK.MessageCollectionDelegate)? {
    @objc get
    @objc set
  }
  @objc open var startingPoint: Swift.Int64 {
    get
  }
  @objc open var hasNext: Swift.Bool {
    get
  }
  @objc open var hasPrevious: Swift.Bool {
    get
  }
  @objc open var succeededMessages: [SendbirdChatSDK.BaseMessage] {
    @objc get
  }
  @objc open var pendingMessages: [SendbirdChatSDK.BaseMessage] {
    @objc get
  }
  @objc open var failedMessages: [SendbirdChatSDK.BaseMessage] {
    @objc get
  }
  @objc open func startCollection(initPolicy: SendbirdChatSDK.MessageCollectionInitPolicy, cacheResultHandler: SendbirdChatSDK.MessageListHandler?, apiResultHandler: SendbirdChatSDK.MessageListHandler?)
  @objc open func dispose()
  @objc open func loadNext(completionHandler: @escaping SendbirdChatSDK.MessageListHandler)
  @objc open func loadPrevious(completionHandler: @escaping SendbirdChatSDK.MessageListHandler)
  @objc open func removeFailed(messages: [SendbirdChatSDK.BaseMessage], completionHandler: SendbirdChatSDK.MessageRequestIdsHandler?)
  @objc open func removeAllFailed(completionHandler: SendbirdChatSDK.SBErrorHandler?)
  @objc deinit
}
@objc(SBDMessageCollectionDelegate) public protocol MessageCollectionDelegate {
  @objc optional func messageCollection(_ collection: SendbirdChatSDK.MessageCollection, context: SendbirdChatSDK.MessageContext, channel: SendbirdChatSDK.GroupChannel, addedMessages: [SendbirdChatSDK.BaseMessage])
  @objc optional func messageCollection(_ collection: SendbirdChatSDK.MessageCollection, context: SendbirdChatSDK.MessageContext, channel: SendbirdChatSDK.GroupChannel, updatedMessages: [SendbirdChatSDK.BaseMessage])
  @objc optional func messageCollection(_ collection: SendbirdChatSDK.MessageCollection, context: SendbirdChatSDK.MessageContext, channel: SendbirdChatSDK.GroupChannel, deletedMessages: [SendbirdChatSDK.BaseMessage])
  @objc optional func messageCollection(_ collection: SendbirdChatSDK.MessageCollection, context: SendbirdChatSDK.MessageContext, updatedChannel: SendbirdChatSDK.GroupChannel)
  @objc optional func messageCollection(_ collection: SendbirdChatSDK.MessageCollection, context: SendbirdChatSDK.MessageContext, deletedChannel channelURL: Swift.String)
  @objc optional func didDetectHugeGap(_ collection: SendbirdChatSDK.MessageCollection)
}
@objc(SBDMessageContext) final public class MessageContext : ObjectiveC.NSObject {
  @objc final public var source: SendbirdChatSDK.CollectionEventSource {
    get
  }
  @objc final public var sendingStatus: SendbirdChatSDK.MessageSendingStatus {
    get
  }
  public init(source: SendbirdChatSDK.CollectionEventSource, sendingStatus: SendbirdChatSDK.MessageSendingStatus)
  @objc final public var fromEvent: Swift.Bool {
    @objc get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(SBDMessageListParams) final public class MessageListParams : ObjectiveC.NSObject, Foundation.NSCopying {
  @objc final public var previousResultSize: Swift.Int
  @objc final public var nextResultSize: Swift.Int
  @objc final public var isInclusive: Swift.Bool
  @objc final public var reverse: Swift.Bool
  @objc final public var messageTypeFilter: SendbirdChatSDK.MessageTypeFilter
  @objc final public var customType: Swift.String?
  @objc final public var senderUserIds: [Swift.String]?
  @objc final public var includeMetaArray: Swift.Bool
  @objc final public var includeReactions: Swift.Bool
  @objc final public var includeThreadInfo: Swift.Bool
  @objc final public var includeParentMessageInfo: Swift.Bool
  @objc final public var replyType: SendbirdChatSDK.ReplyType
  @objc final public var showSubChannelMessagesOnly: Swift.Bool
  @objc final public var customTypes: [Swift.String]?
  @objc override dynamic public init()
  @objc public init(previousResultSize: Swift.Int = 0, nextResultSize: Swift.Int = 0, isInclusive: Swift.Bool = false, reverse: Swift.Bool = false, messageTypeFilter: SendbirdChatSDK.MessageTypeFilter = .all, customType: Swift.String? = nil, senderUserIds: [Swift.String]? = nil, includeMetaArray: Swift.Bool = false, includeReactions: Swift.Bool = false, includeThreadInfo: Swift.Bool = false, includeParentMessageInfo: Swift.Bool = false, replyType: SendbirdChatSDK.ReplyType = .all, showSubChannelMessagesOnly: Swift.Bool = false, customTypes: [Swift.String]? = nil)
  @objc final public func belongsTo(_ message: SendbirdChatSDK.BaseMessage) -> Swift.Bool
  @objc final public func belongsToMessageParams(_ params: SendbirdChatSDK.BaseMessageCreateParams) -> Swift.Bool
  @objc final public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @objc override final public func isEqual(_ object: Any?) -> Swift.Bool
  @objc deinit
}
@objc(SBDMessageMetaArray) final public class MessageMetaArray : ObjectiveC.NSObject, Swift.Codable, Foundation.NSCopying {
  @objc final public var key: Swift.String {
    get
  }
  @objc final public var value: [Swift.String] {
    get
  }
  final public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
  @objc convenience public init(key: Swift.String)
  @objc public init(key: Swift.String, value: [Swift.String]?)
  @objc final public func addValue(_ value: Swift.Set<Swift.String>)
  @objc(addValueWithArray:) final public func addValue(with array: [Swift.String])
  @objc final public func removeValue(_ value: Swift.Set<Swift.String>)
  @objc(removeValueWithArray:) final public func removeValue(with array: [Swift.String])
  @objc deinit
}
extension SendbirdChatSDK.MessageMetaArray {
  @objc override final public func isEqual(_ object: Any?) -> Swift.Bool
  @objc final public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
}
extension SendbirdChatSDK.MessageMetaArray : SendbirdChatSDK.Serializable {
  @objc final public func serialize() -> Foundation.Data?
  @objc public static func build(fromSerializedData data: Foundation.Data?) -> Self?
}
@_inheritsConvenienceInitializers @objc(SBDMessageRequestState) final public class MessageRequestState : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(SBDMessageRetrievalParams) final public class MessageRetrievalParams : ObjectiveC.NSObject, Foundation.NSCopying {
  @available(*, unavailable, renamed: "channelURL")
  @objc final public var channelUrl: Swift.String? {
    @objc get
  }
  @objc final public var channelURL: Swift.String
  @objc final public var channelType: SendbirdChatSDK.ChannelType
  @objc final public var messageId: Swift.Int64
  @objc final public var includeMetaArray: Swift.Bool
  @objc final public var includeReactions: Swift.Bool
  @objc final public var includeThreadInfo: Swift.Bool
  @objc final public var includeParentMessageInfo: Swift.Bool
  @objc override dynamic public init()
  @objc public init(channelURL: Swift.String = "", channelType: SendbirdChatSDK.ChannelType = .group, messageId: Swift.Int64 = 0, includeMetaArray: Swift.Bool = false, includeReactions: Swift.Bool = false, includeThreadInfo: Swift.Bool = false, includeParentMessageInfo: Swift.Bool = false)
  @objc final public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc(SBDMessageReviewInfo) final public class MessageReviewInfo : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let status: SendbirdChatSDK.MessageReviewStatus
  @objc final public let originalMessageInfo: SendbirdChatSDK.OriginalMessageInfo?
  final public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
}
@objc(SBDMessageReviewStatus) public enum MessageReviewStatus : Swift.Int {
  case none = 0
  case inReview = 1
  case approved = 2
}
extension SendbirdChatSDK.MessageReviewStatus : Swift.RawRepresentable, Swift.Codable {
  public typealias RawValue = Swift.String
  public init(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
@available(*, unavailable, renamed: "MessageSearchQueryParams")
public typealias SBDMessageSearchQueryBuilder = SendbirdChatSDK.MessageSearchQueryParams
extension SendbirdChatSDK.MessageSearchQuery {
  @available(*, unavailable, renamed: "channelURL")
  @objc final public var channelUrl: Swift.String? {
    @objc get
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(SBDMessageSearchQuery) final public class MessageSearchQuery : ObjectiveC.NSObject, Swift.Codable {
  @objc final public var hasNext: Swift.Bool {
    get
  }
  @objc final public var isLoading: Swift.Bool {
    get
  }
  final public var totalCount: Swift.Int32 {
    get
  }
  required public init(from decoder: any Swift.Decoder) throws
  final public func encode(to encoder: any Swift.Encoder) throws
  @objc final public func loadNextPage(completionHandler: @escaping SendbirdChatSDK.MessageListHandler)
  @objc final public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @objc deinit
}
extension SendbirdChatSDK.MessageSearchQuery : SendbirdChatSDK.Serializable {
  @objc final public func serialize() -> Foundation.Data?
  @objc public static func build(fromSerializedData data: Foundation.Data?) -> Self?
}
extension SendbirdChatSDK.MessageSearchQuery {
  @objc final public var limit: Swift.UInt {
    @objc get
  }
  @objc final public var keyword: Swift.String? {
    @objc get
  }
  @objc final public var channelURL: Swift.String? {
    @objc get
  }
  @objc final public var channelCustomType: Swift.String? {
    @objc get
  }
  @objc final public var reverse: Swift.Bool {
    @objc get
  }
  @objc final public var exactMatch: Swift.Bool {
    @objc get
  }
  @objc final public var messageTimestampFrom: Swift.Int64 {
    @objc get
  }
  @objc final public var messageTimestampTo: Swift.Int64 {
    @objc get
  }
  @objc final public var order: SendbirdChatSDK.MessageSearchQueryOrder {
    @objc get
  }
  @objc final public var advancedQuery: Swift.Bool {
    @objc get
  }
  @objc final public var targetFields: [Swift.String]? {
    @objc get
  }
}
@_inheritsConvenienceInitializers @objc(SBDMessageSearchQueryParams) final public class MessageSearchQueryParams : ObjectiveC.NSObject, Swift.Codable {
  @objc final public var keyword: Swift.String?
  @available(*, unavailable, renamed: "channelURL")
  @objc final public var channelUrl: Swift.String? {
    @objc get
  }
  @objc final public var channelURL: Swift.String?
  @objc final public var channelCustomType: Swift.String?
  @objc final public var reverse: Swift.Bool
  @objc final public var exactMatch: Swift.Bool
  @objc final public var messageTimestampFrom: Swift.Int64
  @objc final public var messageTimestampTo: Swift.Int64
  @objc final public var order: SendbirdChatSDK.MessageSearchQueryOrder
  @objc final public var limit: Swift.UInt
  @objc final public var advancedQuery: Swift.Bool
  @objc final public var targetFields: [Swift.String]?
  @objc override dynamic public init()
  @objc public init(builder: (SendbirdChatSDK.MessageSearchQueryParams) -> Swift.Void)
  required public init(from decoder: any Swift.Decoder) throws
  final public func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
extension SendbirdChatSDK.MessageSearchQueryParams {
  @objc override final public func isEqual(_ object: Any?) -> Swift.Bool
}
extension SendbirdChatSDK.MessageSearchQueryParams : Foundation.NSCopying {
  @objc final public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
}
@_hasMissingDesignatedInitializers @objc(SBDMessageTemplate) open class MessageTemplate : ObjectiveC.NSObject {
  @objc final public let jsonPayload: Swift.String
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc(SBDMessageTemplateInfo) open class MessageTemplateInfo : ObjectiveC.NSObject, Swift.Codable {
  @objc public var templateListToken: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc(SBDMessageTemplateList) open class MessageTemplateList : ObjectiveC.NSObject {
  @objc final public let jsonPayload: Swift.String
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(SBDMessageTemplateListParams) final public class MessageTemplateListParams : ObjectiveC.NSObject {
  @objc final public var reverse: Swift.Bool
  @objc final public var limit: Swift.Int
  @objc final public var keys: [Swift.String]
  @objc override dynamic public init()
  @objc public init(builder: (SendbirdChatSDK.MessageTemplateListParams) -> Swift.Void)
  @objc deinit
}
extension SendbirdChatSDK.MessageTemplateListParams {
  @objc override final public func isEqual(_ object: Any?) -> Swift.Bool
}
extension SendbirdChatSDK.MessageTemplateListParams : Foundation.NSCopying {
  @objc final public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
}
@objc(SBDMessageTypeFilter) public enum MessageTypeFilter : Swift.Int {
  case all = 0
  case user = 1
  case file = 2
  case admin = 3
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc(SBDUnreadItemKey) final public class UnreadItemKey : ObjectiveC.NSObject, Swift.OptionSet, Swift.Codable {
  @objc final public var rawValue: Swift.Int
  @objc required public init(rawValue: Swift.Int)
  @objc public static let nonSuperUnreadMessageCount: SendbirdChatSDK.UnreadItemKey
  @objc public static let superUnreadMessageCount: SendbirdChatSDK.UnreadItemKey
  @objc public static let nonSuperInvitationCount: SendbirdChatSDK.UnreadItemKey
  @objc public static let superInvitationCount: SendbirdChatSDK.UnreadItemKey
  @objc public static let nonSuperUnreadMentionCount: SendbirdChatSDK.UnreadItemKey
  @objc public static let superUnreadMentionCount: SendbirdChatSDK.UnreadItemKey
  @objc public static let groupChannelUnreadMessageCount: SendbirdChatSDK.UnreadItemKey
  @objc public static let groupChannelUnreadMentionCount: SendbirdChatSDK.UnreadItemKey
  @objc public static let groupChannelInvitationCount: SendbirdChatSDK.UnreadItemKey
  required convenience public init(from decoder: any Swift.Decoder) throws
  final public func encode(to encoder: any Swift.Encoder) throws
  @objc convenience public init(keys: [SendbirdChatSDK.UnreadItemKey])
  @objc override final public var hash: Swift.Int {
    @objc get
  }
  @objc override final public func isEqual(_ object: Any?) -> Swift.Bool
  @objc final public func formUnion(_ other: SendbirdChatSDK.UnreadItemKey)
  @objc final public func formIntersection(_ other: SendbirdChatSDK.UnreadItemKey)
  @objc final public func formSymmetricDifference(_ other: SendbirdChatSDK.UnreadItemKey)
  public typealias ArrayLiteralElement = SendbirdChatSDK.UnreadItemKey
  public typealias Element = SendbirdChatSDK.UnreadItemKey
  public typealias RawValue = Swift.Int
  @objc deinit
}
@objc(SBDCountPreference) public enum CountPreference : Swift.Int {
  case all = 0
  case unreadMessageCountOnly = 1
  case unreadMentionCountOnly = 2
  case off = 3
}
extension SendbirdChatSDK.CountPreference : Swift.RawRepresentable, Swift.Codable {
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
  public init(rawValue: Swift.String)
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
@objc(SBDMentionType) public enum MentionType : Swift.Int {
  case users = 0
  case channel = 1
}
extension SendbirdChatSDK.MentionType : Swift.RawRepresentable, Swift.Codable {
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
  public init(rawValue: Swift.String)
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
@objc(SBDMessageSendingStatus) public enum MessageSendingStatus : Swift.Int {
  case none = 0
  case pending = 1
  case failed = 2
  case succeeded = 3
  case canceled = 4
  case scheduled = 5
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension SendbirdChatSDK.MessageSendingStatus : Swift.Codable {
  public init(stringValue: Swift.String)
  public init(rawValue: Swift.Int)
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
extension SendbirdChatSDK.MessageSendingStatus : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
}
@objc(SBDMessageSearchQueryOrder) public enum MessageSearchQueryOrder : Swift.Int {
  case score = 0
  case timestamp = 1
}
extension SendbirdChatSDK.MessageSearchQueryOrder : Swift.RawRepresentable, Swift.Codable {
  public typealias RawValue = Swift.String
  public init(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
@objc(SBDReplyType) public enum ReplyType : Swift.Int {
  case none = 0
  case all
  case onlyReplyToChannel
}
extension SendbirdChatSDK.ReplyType : Swift.RawRepresentable, Swift.Codable {
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
  public init(rawValue: Swift.String)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers @objc(SBDMultipleFilesMessage) final public class MultipleFilesMessage : SendbirdChatSDK.BaseMessage {
  @objc final public var files: [SendbirdChatSDK.UploadedFileInfo]
  required public init(from decoder: any Swift.Decoder) throws
  override final public func encode(to encoder: any Swift.Encoder) throws
  @objc final public func copyWithFailedState(errorCode: Swift.Int, latestUploadableFileInfos: [SendbirdChatSDK.UploadableFileInfo]) -> Self
  final public func copyWithFailedState(errorCode: Swift.Int?, latestUploadableFileInfos: [SendbirdChatSDK.UploadableFileInfo]) -> Self
  @objc final public func getMultipleFilesMessageParams() -> SendbirdChatSDK.MultipleFilesMessageCreateParams?
  @objc final public func dispose()
  @objc deinit
}
extension SendbirdChatSDK.MultipleFilesMessage {
  @objc override final public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
}
@_hasMissingDesignatedInitializers @objc(SBDMultipleFilesMessageCreateParams) final public class MultipleFilesMessageCreateParams : SendbirdChatSDK.BaseMessageCreateParams {
  @objc final public var uploadableFileInfoList: [SendbirdChatSDK.UploadableFileInfo]
  @objc public init(uploadableFileInfoList: [SendbirdChatSDK.UploadableFileInfo])
  override final public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
  @objc override final public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(SBDMutedUserListQuery) final public class MutedUserListQuery : ObjectiveC.NSObject, SendbirdChatSDK.RestrictedUserListQuery {
  @objc final public var hasNext: Swift.Bool {
    get
  }
  @objc final public var isLoading: Swift.Bool {
    get
  }
  @available(*, unavailable, message: "Use BaseChannel's `createMutedUserListQuery`")
  @objc override dynamic public init()
  @objc final public func loadNextPage(completionHandler: @escaping SendbirdChatSDK.RestrictedUserListHandler)
  @objc final public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @objc deinit
}
extension SendbirdChatSDK.MutedUserListQuery {
  @objc final public var limit: Swift.UInt {
    @objc get
  }
}
@_inheritsConvenienceInitializers @objc(SBDMutedUserListQueryParams) final public class MutedUserListQueryParams : ObjectiveC.NSObject {
  @objc final public var limit: Swift.UInt
  @objc override dynamic public init()
  @objc public init(builder: (SendbirdChatSDK.MutedUserListQueryParams) -> Swift.Void)
  @objc deinit
}
extension SendbirdChatSDK.MutedUserListQueryParams {
  @objc override final public func isEqual(_ object: Any?) -> Swift.Bool
}
extension SendbirdChatSDK.MutedUserListQueryParams : Foundation.NSCopying {
  @objc final public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
}
@objc(SBDNetworkDelegate) public protocol NetworkDelegate {
  @objc func didReconnect()
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(SBDNotificationCategory) open class NotificationCategory : ObjectiveC.NSObject, Swift.Codable {
  @objc open var categoryId: Swift.Int64 {
    get
  }
  @objc open var customType: Swift.String? {
    @objc get
  }
  @objc open var name: Swift.String {
    get
  }
  @objc open var isDefault: Swift.Bool {
    get
  }
  required public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
extension SendbirdChatSDK.NotificationCollection : SendbirdChatSDK.FeedChannelDelegate {
  @objc dynamic open func channel(_ channel: SendbirdChatSDK.BaseChannel, didReceive message: SendbirdChatSDK.BaseMessage)
  @objc dynamic open func channel(_ channel: SendbirdChatSDK.BaseChannel, didUpdate message: SendbirdChatSDK.BaseMessage)
  @objc dynamic open func channel(_ channel: SendbirdChatSDK.BaseChannel, messageWasDeleted messageId: Swift.Int64)
  @objc dynamic open func channel(_ channel: SendbirdChatSDK.BaseChannel, updatedReaction reactionEvent: SendbirdChatSDK.ReactionEvent)
  @objc dynamic open func channel(_ channel: SendbirdChatSDK.BaseChannel, didUpdateThreadInfo threadInfoUpdateEvent: SendbirdChatSDK.ThreadInfoUpdateEvent)
  @objc dynamic open func channelWasChanged(_ channel: SendbirdChatSDK.BaseChannel)
  @objc dynamic open func channel(_ channel: SendbirdChatSDK.BaseChannel, userWasMuted user: SendbirdChatSDK.RestrictedUser)
  @objc dynamic open func channel(_ channel: SendbirdChatSDK.BaseChannel, userWasUnmuted user: SendbirdChatSDK.User)
  @objc dynamic open func channelWasFrozen(_ channel: SendbirdChatSDK.BaseChannel)
  @objc dynamic open func channelWasUnfrozen(_ channel: SendbirdChatSDK.BaseChannel)
  @objc dynamic open func channelDidUpdateOperators(_ channel: SendbirdChatSDK.BaseChannel)
  @objc dynamic open func channel(_ channel: SendbirdChatSDK.BaseChannel, userWasBanned user: SendbirdChatSDK.RestrictedUser)
  @objc dynamic open func channelWasDeleted(_ channelURL: Swift.String, channelType: SendbirdChatSDK.ChannelType)
  @objc dynamic open func channel(_ channel: SendbirdChatSDK.BaseChannel, didReceiveMention message: SendbirdChatSDK.BaseMessage)
  @objc dynamic open func channel(_ channel: SendbirdChatSDK.BaseChannel, createdMetaData: [Swift.String : Swift.String]?)
  @objc dynamic open func channel(_ channel: SendbirdChatSDK.BaseChannel, updatedMetaData: [Swift.String : Swift.String]?)
  @objc dynamic open func channel(_ channel: SendbirdChatSDK.BaseChannel, deletedMetaDataKeys: [Swift.String]?)
  @objc dynamic open func channel(_ channel: SendbirdChatSDK.BaseChannel, createdMetaCounters: [Swift.String : Swift.Int]?)
  @objc dynamic open func channel(_ channel: SendbirdChatSDK.BaseChannel, updatedMetaCounters: [Swift.String : Swift.Int]?)
  @objc dynamic open func channel(_ channel: SendbirdChatSDK.BaseChannel, deletedMetaCountersKeys: [Swift.String]?)
  @objc dynamic open func feedChannelDidUpdateReadStatus(_ channel: SendbirdChatSDK.FeedChannel)
}
extension SendbirdChatSDK.NotificationCollection : SendbirdChatSDK.ConnectionDelegate {
  @objc dynamic open func didSucceedReconnection()
  @objc dynamic open func didConnect(userId: Swift.String)
}
@_hasMissingDesignatedInitializers @objc(SBDNotificationCollection) open class NotificationCollection : SendbirdChatSDK.BaseCollection {
  @objc weak open var delegate: (any SendbirdChatSDK.NotificationCollectionDelegate)? {
    @objc get
    @objc set
  }
  @objc open var startingPoint: Swift.Int64 {
    get
  }
  @objc open var hasNext: Swift.Bool {
    get
  }
  @objc open var hasPrevious: Swift.Bool {
    get
  }
  @objc open var succeededMessages: [SendbirdChatSDK.BaseMessage] {
    @objc get
  }
  @objc open func startCollection(initPolicy: SendbirdChatSDK.NotificationCollectionInitPolicy, cacheResultHandler: SendbirdChatSDK.MessageListHandler?, apiResultHandler: SendbirdChatSDK.MessageListHandler?)
  @objc open func dispose()
  @objc open func loadNext(completionHandler: @escaping SendbirdChatSDK.MessageListHandler)
  @objc open func loadPrevious(completionHandler: @escaping SendbirdChatSDK.MessageListHandler)
  @objc deinit
}
@objc(SBDNotificationCollectionDelegate) public protocol NotificationCollectionDelegate {
  @objc optional func notificationCollection(_ collection: SendbirdChatSDK.NotificationCollection, context: SendbirdChatSDK.NotificationContext, channel: SendbirdChatSDK.FeedChannel, addedMessages: [SendbirdChatSDK.BaseMessage])
  @objc optional func notificationCollection(_ collection: SendbirdChatSDK.NotificationCollection, context: SendbirdChatSDK.NotificationContext, channel: SendbirdChatSDK.FeedChannel, updatedMessages: [SendbirdChatSDK.BaseMessage])
  @objc optional func notificationCollection(_ collection: SendbirdChatSDK.NotificationCollection, context: SendbirdChatSDK.NotificationContext, channel: SendbirdChatSDK.FeedChannel, deletedMessages: [SendbirdChatSDK.BaseMessage])
  @objc optional func notificationCollection(_ collection: SendbirdChatSDK.NotificationCollection, context: SendbirdChatSDK.FeedChannelContext, updatedChannel: SendbirdChatSDK.FeedChannel)
  @objc optional func notificationCollection(_ collection: SendbirdChatSDK.NotificationCollection, context: SendbirdChatSDK.FeedChannelContext, deletedChannel channelURL: Swift.String)
  @objc optional func didDetectHugeGap(_ collection: SendbirdChatSDK.NotificationCollection)
}
@objc(SBDNotificationContext) final public class NotificationContext : ObjectiveC.NSObject {
  @objc final public var source: SendbirdChatSDK.CollectionEventSource {
    get
  }
  public init(source: SendbirdChatSDK.CollectionEventSource)
  @objc final public var fromEvent: Swift.Bool {
    @objc get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(SBDNotificationData) open class NotificationData : ObjectiveC.NSObject, Swift.Codable {
  @objc open var label: Swift.String {
    get
  }
  @objc open var templateKey: Swift.String {
    get
  }
  @objc open var tags: [Swift.String]? {
    get
  }
  @objc open var templateVariables: [Swift.String : Any] {
    get
  }
  required public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc(SBDNotificationInfo) open class NotificationInfo : ObjectiveC.NSObject, Swift.Codable {
  @objc public var isEnabled: Swift.Bool
  @objc public var templateListToken: Swift.String
  @objc public var settingsUpdatedAt: Swift.Int64
  @objc public var feedChannels: [Swift.String : Swift.String]
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
}
@objc(SBDNotificationMessageStatus) public enum NotificationMessageStatus : Swift.Int {
  case none = 0
  case sent = 1
  case read = 2
}
extension SendbirdChatSDK.NotificationMessageStatus : Swift.RawRepresentable, Swift.CustomStringConvertible, Swift.Codable {
  public typealias RawValue = Swift.Int
  public var description: Swift.String {
    get
  }
  public init(rawValue: Swift.Int64)
  public init(rawValue: Swift.String)
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@objc(SBDNotificationPriority) public enum NotificationPriority : Swift.Int {
  case high = 0
  case normal = 100
  case low = 200
}
extension SendbirdChatSDK.NotificationPriority : Swift.RawRepresentable, Swift.CustomStringConvertible, Swift.Codable {
  public typealias RawValue = Swift.String
  public var description: Swift.String {
    get
  }
  public var rawValue: Swift.String {
    get
  }
  public var intValue: Swift.Int {
    get
  }
  public init(rawValue: Swift.String)
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
@_hasMissingDesignatedInitializers @objc(SBDNotificationTemplate) open class NotificationTemplate : ObjectiveC.NSObject {
  @objc final public let jsonPayload: Swift.String
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc(SBDNotificationTemplateList) open class NotificationTemplateList : ObjectiveC.NSObject {
  @objc final public let jsonPayload: Swift.String
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(SBDNotificationTemplateListParams) final public class NotificationTemplateListParams : ObjectiveC.NSObject {
  @objc final public var reverse: Swift.Bool
  @objc final public var keys: [Swift.String]?
  @objc final public var limit: Swift.Int
  @objc override dynamic public init()
  @objc public init(builder: (SendbirdChatSDK.NotificationTemplateListParams) -> Swift.Void)
  @objc deinit
}
extension SendbirdChatSDK.NotificationTemplateListParams {
  @objc override final public func isEqual(_ object: Any?) -> Swift.Bool
}
extension SendbirdChatSDK.NotificationTemplateListParams : Foundation.NSCopying {
  @objc final public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
}
@objc(SBDOGImage) final public class OGImage : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let url: Swift.String?
  @objc final public let secureURL: Swift.String?
  @objc final public let type: Swift.String?
  @objc final public let alt: Swift.String?
  @objc final public let width: Swift.Int
  @objc final public let height: Swift.Int
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
}
@objc(SBDOGMetaData) final public class OGMetaData : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let title: Swift.String?
  @objc final public let url: Swift.String?
  @objc final public let desc: Swift.String?
  @objc final public let defaultImage: SendbirdChatSDK.OGImage?
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@objc extension SendbirdChatSDK.OpenChannel {
  @objc(createChannelWithCompletionHandler:) dynamic open class func createChannel(completionHandler: @escaping SendbirdChatSDK.OpenChannelHandler)
  @objc(createChannelWithParams:completionHandler:) dynamic open class func createChannel(params: SendbirdChatSDK.OpenChannelCreateParams, completionHandler: @escaping SendbirdChatSDK.OpenChannelHandler)
  @objc(createChannelWithParams:progressHandler:completionHandler:) dynamic open class func createChannel(params: SendbirdChatSDK.OpenChannelCreateParams, progressHandler: SendbirdChatSDK.ProgressHandler?, completionHandler: @escaping SendbirdChatSDK.OpenChannelHandler)
  @objc(updateChannelWithParams:completionHandler:) dynamic open func update(params: SendbirdChatSDK.OpenChannelUpdateParams, completionHandler: @escaping SendbirdChatSDK.OpenChannelHandler)
  @objc(updateChannelWithParams:progressHandler:completionHandler:) dynamic open func update(params: SendbirdChatSDK.OpenChannelUpdateParams, progressHandler: SendbirdChatSDK.ProgressHandler?, completionHandler: @escaping SendbirdChatSDK.OpenChannelHandler)
  @objc(deleteChannelWithCompletionHandler:) dynamic open func delete(completionHandler: SendbirdChatSDK.SBErrorHandler?)
  @objc(getChannelWithURL:completionHandler:) dynamic open class func getChannel(url: Swift.String, completionHandler: SendbirdChatSDK.OpenChannelHandler?)
  @objc dynamic open func refresh(completionHandler: SendbirdChatSDK.SBErrorHandler?)
}
@objc extension SendbirdChatSDK.OpenChannel {
  @objc(enterChannelWithCompletionHandler:) dynamic open func enter(completionHandler: SendbirdChatSDK.SBErrorHandler?)
  @objc(exitChannelWithCompletionHandler:) dynamic open func exit(completionHandler: SendbirdChatSDK.SBErrorHandler?)
}
extension SendbirdChatSDK.OpenChannel {
  @objc dynamic open class func createOpenChannelListQuery() -> SendbirdChatSDK.OpenChannelListQuery
  @objc dynamic open class func createOpenChannelListQuery(paramsBuilder: (SendbirdChatSDK.OpenChannelListQueryParams) -> Swift.Void) -> SendbirdChatSDK.OpenChannelListQuery
  @objc dynamic open class func createOpenChannelListQuery(params: SendbirdChatSDK.OpenChannelListQueryParams) -> SendbirdChatSDK.OpenChannelListQuery
  @objc dynamic open class func createParticipantListQuery(channelURL: Swift.String) -> SendbirdChatSDK.ParticipantListQuery
  @objc dynamic open class func createParticipantListQuery(channelURL: Swift.String, paramsBuilder: (SendbirdChatSDK.ParticipantListQueryParams) -> Swift.Void) -> SendbirdChatSDK.ParticipantListQuery
  @objc dynamic open class func createParticipantListQuery(channelURL: Swift.String, params: SendbirdChatSDK.ParticipantListQueryParams) -> SendbirdChatSDK.ParticipantListQuery
  @objc dynamic open func createParticipantListQuery() -> SendbirdChatSDK.ParticipantListQuery?
  @objc dynamic open func createParticipantListQuery(paramsBuilder: (SendbirdChatSDK.ParticipantListQueryParams) -> Swift.Void) -> SendbirdChatSDK.ParticipantListQuery?
  @objc dynamic open func createParticipantListQuery(params: SendbirdChatSDK.ParticipantListQueryParams) -> SendbirdChatSDK.ParticipantListQuery?
}
extension SendbirdChatSDK.OpenChannel {
  @available(*, unavailable, renamed: "createChannel(params:completionHandler:)")
  @objc public static func createChannel(withName name: Swift.String?, channelUrl: Swift.String?, coverUrl: Swift.String?, data: Swift.String?, operatorUserIds: [Swift.String]?, customType: Swift.String?, completionHandler: @escaping (SendbirdChatSDK.OpenChannel?, SendbirdChatSDK.SBError?) -> Swift.Void)
  @available(*, unavailable, renamed: "createChannel(params:progressHandler:completionHandler:)")
  @objc public static func createChannel(withName name: Swift.String?, channelUrl: Swift.String?, coverImage: Foundation.Data, coverImageName: Swift.String, data: Swift.String?, operatorUserIds: [Swift.String]?, customType: Swift.String?, progressHandler: ((Swift.Int64, Swift.Int64, Swift.Int64) -> Swift.Void)?, completionHandler: @escaping (SendbirdChatSDK.OpenChannel?, SendbirdChatSDK.SBError?) -> Swift.Void)
  @available(*, unavailable, renamed: "update(params:progressHandler:completionHandler:)")
  @objc dynamic public func update(withName name: Swift.String?, coverImage: Foundation.Data?, coverImageName: Swift.String?, data: Swift.String?, operatorUserIds: [Swift.String]?, customType: Swift.String?, progressHandler: ((Swift.Int64, Swift.Int64, Swift.Int64) -> Swift.Void)?, completionHandler: @escaping (SendbirdChatSDK.OpenChannel?, SendbirdChatSDK.SBError?) -> Swift.Void)
}
@_hasMissingDesignatedInitializers @objc(SBDOpenChannel) open class OpenChannel : SendbirdChatSDK.BaseChannel {
  @objc open var participantCount: Swift.Int {
    get
  }
  @objc open var operators: [SendbirdChatSDK.User]? {
    get
  }
  @objc(isOperatorWithUser:) open func isOperator(user: SendbirdChatSDK.User) -> Swift.Bool
  @objc open func isOperator(userId: Swift.String) -> Swift.Bool
  required public init(from decoder: any Swift.Decoder) throws
  override open func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
extension SendbirdChatSDK.OpenChannel {
  @objc override dynamic open class func build(fromSerializedData data: Foundation.Data?) -> Self?
}
@objc(SBDOpenChannelDelegate) public protocol OpenChannelDelegate : SendbirdChatSDK.BaseChannelDelegate {
  @objc optional func channelDidChangeParticipantCount(_ channels: [SendbirdChatSDK.OpenChannel])
  @objc optional func channel(_ channel: SendbirdChatSDK.OpenChannel, userDidEnter user: SendbirdChatSDK.User)
  @objc optional func channel(_ channel: SendbirdChatSDK.OpenChannel, userDidExit user: SendbirdChatSDK.User)
  @objc optional func channel(_ channel: SendbirdChatSDK.OpenChannel, didUpdatePoll event: SendbirdChatSDK.PollUpdateEvent)
  @objc optional func channel(_ channel: SendbirdChatSDK.OpenChannel, didVotePoll event: SendbirdChatSDK.PollVoteEvent)
  @objc optional func channel(_ channel: SendbirdChatSDK.OpenChannel, pollWasDeleted pollId: Swift.Int64)
  @objc optional func channelDidUpdatePinnedMessages(_ channel: SendbirdChatSDK.OpenChannel)
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(SBDOpenChannelListQuery) final public class OpenChannelListQuery : ObjectiveC.NSObject, Foundation.NSCopying {
  @objc final public var hasNext: Swift.Bool {
    get
  }
  @objc final public var isLoading: Swift.Bool {
    get
  }
  @available(*, unavailable, message: "Use OpenChannel's `createOpenChannelListQuery`")
  @objc override dynamic public init()
  @objc final public func loadNextPage(completionHandler: @escaping SendbirdChatSDK.OpenChannelListHandler)
  @objc final public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @objc deinit
}
extension SendbirdChatSDK.OpenChannelListQuery {
  @objc final public var includeFrozenChannel: Swift.Bool {
    @objc get
  }
  @objc final public var includeMetaData: Swift.Bool {
    @objc get
  }
  @objc final public var includePinnedMessages: Swift.Bool {
    @objc get
  }
  @objc final public var channelURLFilter: Swift.String? {
    @objc get
  }
  @objc final public var channelNameFilter: Swift.String? {
    @objc get
  }
  @objc final public var customTypeFilter: Swift.String? {
    @objc get
  }
  @objc final public var limit: Swift.UInt {
    @objc get
  }
}
@_inheritsConvenienceInitializers @objc(SBDOpenChannelListQueryParams) final public class OpenChannelListQueryParams : ObjectiveC.NSObject {
  @objc final public var includeFrozenChannel: Swift.Bool
  @objc final public var includeMetaData: Swift.Bool
  @objc final public var includePinnedMessages: Swift.Bool
  @objc final public var channelURLFilter: Swift.String?
  @objc final public var channelNameFilter: Swift.String?
  @objc final public var customTypeFilter: Swift.String?
  @objc final public var limit: Swift.UInt
  @objc override dynamic public init()
  @objc public init(builder: (SendbirdChatSDK.OpenChannelListQueryParams) -> Swift.Void)
  @objc deinit
}
extension SendbirdChatSDK.OpenChannelListQueryParams {
  @objc override final public func isEqual(_ object: Any?) -> Swift.Bool
}
extension SendbirdChatSDK.OpenChannelListQueryParams : Foundation.NSCopying {
  @objc final public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
}
@_inheritsConvenienceInitializers @objc(SBDOpenChannelCreateParams) final public class OpenChannelCreateParams : ObjectiveC.NSObject, Foundation.NSCopying {
  @objc final public var name: Swift.String?
  @available(*, unavailable, renamed: "channelURL")
  @objc final public var channelUrl: Swift.String? {
    @objc get
  }
  @objc final public var channelURL: Swift.String?
  @available(*, unavailable, renamed: "coverURL")
  @objc final public var coverUrl: Swift.String? {
    @objc get
  }
  @objc final public var coverURL: Swift.String?
  @objc final public var coverImage: Foundation.Data?
  @objc final public var coverImageName: Swift.String?
  @objc final public var data: Swift.String?
  @objc final public var operatorUserIds: [Swift.String]?
  @objc final public var customType: Swift.String?
  @objc final public var isEphemeral: Swift.Bool
  @objc override convenience dynamic public init()
  @objc public init(name: Swift.String? = nil, channelURL: Swift.String? = nil, coverURL: Swift.String? = nil, coverImage: Foundation.Data? = nil, coverImageName: Swift.String? = nil, data: Swift.String? = nil, operatorUserIds: [Swift.String]? = nil, customType: Swift.String? = nil, isEphemeral: Swift.Bool = false)
  @objc final public func setOperators(_ operators: [SendbirdChatSDK.User])
  @objc final public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(SBDOpenChannelUpdateParams) final public class OpenChannelUpdateParams : ObjectiveC.NSObject, Foundation.NSCopying {
  @objc final public var name: Swift.String?
  @available(*, unavailable, renamed: "coverURL")
  @objc final public var coverUrl: Swift.String? {
    @objc get
  }
  @objc final public var coverURL: Swift.String?
  @objc final public var coverImage: Foundation.Data?
  @objc final public var coverImageName: Swift.String?
  @objc final public var data: Swift.String?
  @objc final public var operatorUserIds: [Swift.String]?
  @objc final public var customType: Swift.String?
  @objc override convenience dynamic public init()
  @objc public init(name: Swift.String? = nil, coverURL: Swift.String? = nil, coverImage: Foundation.Data? = nil, coverImageName: Swift.String? = nil, data: Swift.String? = nil, operatorUserIds: [Swift.String]? = nil, customType: Swift.String? = nil)
  @objc final public func setOperators(_ operators: [SendbirdChatSDK.User])
  @objc final public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(SBDOperatorListQuery) final public class OperatorListQuery : ObjectiveC.NSObject, SendbirdChatSDK.UserListQuery {
  @objc final public var hasNext: Swift.Bool {
    get
  }
  @objc final public var isLoading: Swift.Bool {
    get
  }
  @objc final public func loadNextPage(completionHandler: @escaping SendbirdChatSDK.UserListHandler)
  @objc final public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @objc deinit
}
extension SendbirdChatSDK.OperatorListQuery {
  @objc final public var limit: Swift.UInt {
    @objc get
  }
}
@_inheritsConvenienceInitializers @objc(SBDOperatorListQueryParams) final public class OperatorListQueryParams : ObjectiveC.NSObject {
  @objc final public var limit: Swift.UInt
  @objc override dynamic public init()
  @objc public init(builder: (SendbirdChatSDK.OperatorListQueryParams) -> Swift.Void)
  @objc deinit
}
extension SendbirdChatSDK.OperatorListQueryParams {
  @objc override final public func isEqual(_ object: Any?) -> Swift.Bool
}
extension SendbirdChatSDK.OperatorListQueryParams : Foundation.NSCopying {
  @objc final public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
}
@objc @_inheritsConvenienceInitializers final public class SendbirdChatOptions : ObjectiveC.NSObject {
  @available(*, unavailable, renamed: "useMemberInfoInMessage()")
  @objc public static func useMemberAsMessageSender() -> Swift.Bool
  @objc public static func useMemberInfoInMessage() -> Swift.Bool
  @available(*, unavailable, renamed: "setMemberInfoInMessage()")
  @objc public static func setUseMemberAsMessageSender(_ value: Swift.Bool)
  @objc public static func setMemberInfoInMessage(_ value: Swift.Bool)
  @objc public static func getConnectionTimeout() -> Foundation.TimeInterval
  @objc public static func setConnectionTimeout(_ timeout: Swift.Int)
  @objc public static func getTypingIndicatorThrottle() -> Foundation.TimeInterval
  @objc public static func setTypingIndicatorThrottle(_ interval: Foundation.TimeInterval)
  @objc public static func getFileTransferTimeout() -> Foundation.TimeInterval
  @objc public static func setFileTransferTimeout(_ timeout: Swift.Int)
  @objc public static func getWebSocketResponseTimeout() -> Foundation.TimeInterval
  @objc public static func setWebSocketResponseTimeout(_ timeout: Swift.Int)
  @objc public static func setSessionTokenRefreshTimeout(_ timeout: Swift.Int)
  @objc public static func getSessionTokenRefreshTimeout() -> Foundation.TimeInterval
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc(SBDOriginalMessageInfo) final public class OriginalMessageInfo : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let createdAt: Swift.Int64
  @objc final public let messageId: Swift.Int64
  final public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc(SBDParticipant) final public class Participant : SendbirdChatSDK.User {
  @objc final public var isMuted: Swift.Bool {
    get
  }
  required public init(from decoder: any Swift.Decoder) throws
  override final public func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(SBDParticipantListQuery) final public class ParticipantListQuery : ObjectiveC.NSObject, SendbirdChatSDK.UserListQuery {
  @objc final public var hasNext: Swift.Bool {
    get
  }
  @objc final public var isLoading: Swift.Bool {
    get
  }
  @objc final public func loadNextPage(completionHandler: @escaping SendbirdChatSDK.UserListHandler)
  @objc final public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @objc deinit
}
extension SendbirdChatSDK.ParticipantListQuery {
  @objc final public var limit: Swift.UInt {
    @objc get
  }
}
@_inheritsConvenienceInitializers @objc(SBDParticipantListQueryParams) final public class ParticipantListQueryParams : ObjectiveC.NSObject {
  @objc final public var limit: Swift.UInt
  @objc override dynamic public init()
  @objc public init(builder: (SendbirdChatSDK.ParticipantListQueryParams) -> Swift.Void)
  @objc deinit
}
extension SendbirdChatSDK.ParticipantListQueryParams {
  @objc override final public func isEqual(_ object: Any?) -> Swift.Bool
}
extension SendbirdChatSDK.ParticipantListQueryParams : Foundation.NSCopying {
  @objc final public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
}
@objc(SBDPinnedMessage) final public class PinnedMessage : ObjectiveC.NSObject, Swift.Codable, Foundation.NSCopying {
  @objc final public var message: SendbirdChatSDK.BaseMessage? {
    get
  }
  required public init(from decoder: any Swift.Decoder) throws
  @objc final public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(SBDPinnedMessageListQuery) final public class PinnedMessageListQuery : ObjectiveC.NSObject {
  @SendbirdChatSDK.Atomic @objc @_projectedValueProperty($hasNext) final public var hasNext: Swift.Bool {
    @objc get
  }
  final public var $hasNext: SendbirdChatSDK.Atomic<Swift.Bool> {
    get
  }
  @SendbirdChatSDK.Atomic @objc @_projectedValueProperty($isLoading) final public var isLoading: Swift.Bool {
    @objc get
  }
  final public var $isLoading: SendbirdChatSDK.Atomic<Swift.Bool> {
    get
  }
  @objc final public let limit: Swift.Int
  @objc final public var includeMetaArray: Swift.Bool {
    @objc get
  }
  @objc final public var includeThreadInfo: Swift.Bool {
    @objc get
  }
  @objc final public var includeReactions: Swift.Bool {
    @objc get
  }
  @objc final public var includePollDetails: Swift.Bool {
    @objc get
  }
  @objc final public var includeParentMessageInfo: Swift.Bool {
    @objc get
  }
  @objc final public func loadNextPage(completionHandler: @escaping SendbirdChatSDK.PinnedMessageListHandler)
  @objc final public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(SBDPinnedMessageListQueryParams) final public class PinnedMessageListQueryParams : ObjectiveC.NSObject, Foundation.NSCopying {
  @objc final public var limit: Swift.Int
  @objc final public var includeMetaArray: Swift.Bool
  @objc final public var includeThreadInfo: Swift.Bool
  @objc final public var includeReactions: Swift.Bool
  @objc final public var includePollDetails: Swift.Bool
  @objc final public var includeParentMessageInfo: Swift.Bool
  @objc override dynamic public init()
  @objc public init(builder: (SendbirdChatSDK.PinnedMessageListQueryParams) -> Swift.Void)
  @objc final public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @objc deinit
}
@objc(SBDPlugin) final public class Plugin : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let type: Swift.String?
  @objc final public let vendor: Swift.String?
  @objc final public let detail: [Swift.String : Any]?
  required public init(from decoder: any Swift.Decoder) throws
  final public func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(SBDPoll) final public class Poll : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let pollId: Swift.Int64
  @objc final public var title: Swift.String {
    get
  }
  @objc final public let createdAt: Swift.Int64
  @objc final public var updatedAt: Swift.Int64 {
    get
  }
  @objc final public var closeAt: Swift.Int64 {
    get
  }
  @objc final public var status: SendbirdChatSDK.PollStatus {
    get
  }
  @objc final public let messageId: Swift.Int64
  @objc final public let data: SendbirdChatSDK.PollData?
  @objc final public var voterCount: Swift.Int64 {
    get
  }
  @objc final public var options: [SendbirdChatSDK.PollOption] {
    get
  }
  @objc final public let createdBy: Swift.String?
  @objc final public var allowUserSuggestion: Swift.Bool {
    get
  }
  @objc final public var allowMultipleVotes: Swift.Bool {
    get
  }
  @objc final public var votedPollOptionIds: [Swift.Int64] {
    get
  }
  final public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
  @objc public static func create(params: SendbirdChatSDK.PollCreateParams, completionHandler: @escaping SendbirdChatSDK.PollHandler)
  @objc public static func get(params: SendbirdChatSDK.PollRetrievalParams, completionHandler: @escaping SendbirdChatSDK.PollHandler)
  @objc deinit
}
extension SendbirdChatSDK.Poll {
  @objc override final public func isEqual(_ object: Any?) -> Swift.Bool
}
extension SendbirdChatSDK.Poll : SendbirdChatSDK.Serializable {
  @objc final public func serialize() -> Foundation.Data?
  @objc public static func build(fromSerializedData data: Foundation.Data?) -> Self?
}
@_inheritsConvenienceInitializers @objc(SBDPollCreateParams) final public class PollCreateParams : ObjectiveC.NSObject {
  @objc final public var title: Swift.String
  @objc final public var data: SendbirdChatSDK.PollData?
  @objc final public var optionTexts: [Swift.String]
  @objc final public var allowUserSuggestion: Swift.Bool
  @objc final public var allowMultipleVotes: Swift.Bool
  @objc final public var closeAt: Swift.Int64
  @objc override dynamic public init()
  @objc public init(builder: (SendbirdChatSDK.PollCreateParams) -> Swift.Void)
  @objc deinit
}
extension SendbirdChatSDK.PollCreateParams : Swift.Encodable {
  final public func encode(to encoder: any Swift.Encoder) throws
}
@objc(SBDPollData) final public class PollData : ObjectiveC.NSObject, Swift.Codable {
  @objc final public var text: Swift.String? {
    get
  }
  @objc public init(text: Swift.String?)
  final public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
}
@objc(SBDPollDetails) final public class PollDetails : ObjectiveC.NSObject, Swift.Codable {
  @objc final public var data: SendbirdChatSDK.PollData? {
    get
  }
  @objc final public var voterCount: Swift.Int {
    get
  }
  @objc final public var options: [SendbirdChatSDK.PollOption] {
    get
  }
  @objc final public var votedOptionIds: [Swift.Int] {
    get
  }
  @objc final public let createdBy: Swift.String?
  @objc final public let allowUserSuggestion: Swift.Bool
  @objc final public let allowMultipleVotes: Swift.Bool
  @objc final public let createdAt: Swift.Int64
  @objc final public let updatedAt: Swift.Int64
  @objc final public let closeAt: Swift.Int64
  @objc final public var status: SendbirdChatSDK.PollStatus {
    get
  }
  final public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
}
extension SendbirdChatSDK.PollDetails {
  @objc override final public func isEqual(_ object: Any?) -> Swift.Bool
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(SBDPollListQuery) final public class PollListQuery : ObjectiveC.NSObject {
  @objc final public var limit: Swift.UInt {
    get
  }
  @objc final public var hasNext: Swift.Bool {
    get
  }
  @objc final public var isLoading: Swift.Bool {
    get
  }
  @objc final public func loadNextPage(completionHandler: @escaping SendbirdChatSDK.PollListHandler)
  @objc final public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(SBDPollListQueryParams) final public class PollListQueryParams : ObjectiveC.NSObject {
  @objc final public var channelType: SendbirdChatSDK.ChannelType
  @objc final public var channelURL: Swift.String
  @objc final public var limit: Swift.UInt
  @objc override dynamic public init()
  @objc public init(builder: (SendbirdChatSDK.PollListQueryParams) -> Swift.Void)
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(SBDPollOption) final public class PollOption : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let pollId: Swift.Int64
  @objc final public let pollOptionId: Swift.Int64
  @objc final public let text: Swift.String
  @objc final public let createdBy: Swift.String
  @objc final public let createdAt: Swift.Int64
  @objc final public var voteCount: Swift.Int64 {
    get
  }
  @objc final public let updatedAt: Swift.Int64
  final public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
  @objc(getPollOptionWithParams:completionHandler:) public static func getPollOption(params: SendbirdChatSDK.PollOptionRetrievalParams, completionHandler: @escaping SendbirdChatSDK.PollOptionHandler)
  @objc deinit
}
extension SendbirdChatSDK.PollOption {
  @objc override final public func isEqual(_ object: Any?) -> Swift.Bool
}
@_inheritsConvenienceInitializers @objc(SBDPollOptionRetrievalParams) final public class PollOptionRetrievalParams : ObjectiveC.NSObject {
  @objc final public var pollId: Swift.Int64
  @objc final public var pollOptionId: Swift.Int64
  @objc final public var channelType: SendbirdChatSDK.ChannelType
  @objc final public var channelURL: Swift.String
  @objc override dynamic public init()
  @objc public init(builder: (SendbirdChatSDK.PollOptionRetrievalParams) -> Swift.Void)
  @objc deinit
}
extension SendbirdChatSDK.PollOptionRetrievalParams : Swift.Encodable {
  final public func encode(to encoder: any Swift.Encoder) throws
}
@objc(SBDPollOptionVoterResult) final public class PollOptionVoterResult : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let voteCount: Swift.UInt
  @objc final public let voters: [SendbirdChatSDK.User]
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@_inheritsConvenienceInitializers @objc(SBDPollRetrievalParams) final public class PollRetrievalParams : ObjectiveC.NSObject {
  @objc final public var channelURL: Swift.String?
  @objc final public var channelType: SendbirdChatSDK.ChannelType
  @objc final public var pollId: Swift.Int64
  @objc override dynamic public init()
  @objc deinit
}
extension SendbirdChatSDK.PollRetrievalParams : Swift.Encodable {
  final public func encode(to encoder: any Swift.Encoder) throws
}
@objc(SBDPollStatus) public enum PollStatus : Swift.Int {
  case open
  case closed
}
extension SendbirdChatSDK.PollStatus : Swift.RawRepresentable, Swift.Codable {
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
  public init?(rawValue: Swift.String)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@objc(SBDPollUpdateEvent) final public class PollUpdateEvent : ObjectiveC.NSObject {
  @objc final public let poll: SendbirdChatSDK.UpdatedPoll
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class UpdatedPoll : ObjectiveC.NSObject, Swift.Codable {
  final public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(SBDPollUpdateParams) final public class PollUpdateParams : ObjectiveC.NSObject {
  @objc final public var title: Swift.String?
  @objc final public var text: Swift.String?
  @objc final public var allowUserSuggestion: Swift.Bool {
    @objc get
    @objc set
  }
  @objc final public var allowMultipleVotes: Swift.Bool {
    @objc get
    @objc set
  }
  @objc final public var closeAt: Swift.Int64
  @objc override dynamic public init()
  @objc public init(builder: (SendbirdChatSDK.PollUpdateParams) -> Swift.Void)
  @objc deinit
}
extension SendbirdChatSDK.PollUpdateParams : Swift.Encodable {
  final public func encode(to encoder: any Swift.Encoder) throws
}
@objc(SBDUpdatedVoteCount) final public class UpdatedVoteCount : ObjectiveC.NSObject, Swift.Decodable {
  @objc final public let pollOptionId: Swift.Int64
  @objc final public let voteCount: Swift.Int64
  @objc deinit
  public init(from decoder: any Swift.Decoder) throws
}
@objc(SBDPollVoteEvent) final public class PollVoteEvent : ObjectiveC.NSObject, Swift.Decodable {
  @objc final public let pollId: Swift.Int64
  @objc final public let updatedVoteCounts: [SendbirdChatSDK.UpdatedVoteCount]
  @objc final public let timestamp: Swift.Int64
  @objc final public let messageId: Swift.Int64
  @objc final public let votedOptionIds: [Swift.Int64]
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(SBDPollVoterListQuery) final public class PollVoterListQuery : ObjectiveC.NSObject {
  @objc final public var limit: Swift.UInt {
    get
  }
  @objc final public var hasNext: Swift.Bool {
    get
  }
  @objc final public var isLoading: Swift.Bool {
    get
  }
  @objc final public func loadNextPage(completionHandler: @escaping SendbirdChatSDK.VoterListHandler)
  @objc final public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(SBDPollVoterListQueryParams) final public class PollVoterListQueryParams : ObjectiveC.NSObject {
  @objc final public var pollId: Swift.Int64
  @objc final public var pollOptionId: Swift.Int64
  @objc final public var channelType: SendbirdChatSDK.ChannelType
  @objc final public var channelURL: Swift.String
  @objc final public var limit: Swift.UInt
  @objc override dynamic public init()
  @objc public init(builder: (SendbirdChatSDK.PollVoterListQueryParams) -> Swift.Void)
  @objc deinit
}
extension SendbirdChatSDK.PreviousMessageListQuery {
  @available(*, unavailable, message: "Use `loadNextPage(completionHandler:)` instead")
  @objc final public func loadPreviousMessages(limit: Swift.UInt, reverse: Swift.Bool, completionHandler: @escaping SendbirdChatSDK.MessageListHandler)
  @available(*, unavailable, renamed: "loadNextPage(completionHandler:)")
  @objc final public func load(completionHandler: (([SendbirdChatSDK.BaseMessage]?, (any Swift.Error)?) -> Swift.Void)? = nil)
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(SBDPreviousMessageListQuery) final public class PreviousMessageListQuery : ObjectiveC.NSObject {
  @objc final public var hasNext: Swift.Bool {
    get
  }
  @objc final public var isLoading: Swift.Bool {
    get
  }
  @objc final public func loadNextPage(completionHandler: @escaping SendbirdChatSDK.MessageListHandler)
  @objc final public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @objc deinit
}
extension SendbirdChatSDK.PreviousMessageListQuery {
  @objc final public var reverse: Swift.Bool {
    @objc get
  }
  @objc final public var messageTypeFilter: SendbirdChatSDK.MessageTypeFilter {
    @objc get
  }
  @objc final public var customTypeFilter: Swift.String? {
    @objc get
  }
  @objc final public var customTypesFilter: [Swift.String]? {
    @objc get
  }
  @objc final public var senderUserIdsFilter: [Swift.String]? {
    @objc get
  }
  @objc final public var includeMetaArray: Swift.Bool {
    @objc get
  }
  @objc final public var includeReactions: Swift.Bool {
    @objc get
  }
  @objc final public var includeThreadInfo: Swift.Bool {
    @objc get
  }
  @objc final public var includeParentMessageInfo: Swift.Bool {
    @objc get
  }
  @objc final public var replyType: SendbirdChatSDK.ReplyType {
    @objc get
  }
  @objc final public var showSubChannelMessagesOnly: Swift.Bool {
    @objc get
  }
  @objc final public var limit: Swift.UInt {
    @objc get
  }
}
@_inheritsConvenienceInitializers @objc(SBDPreviousMessageListQueryParams) final public class PreviousMessageListQueryParams : ObjectiveC.NSObject {
  @objc final public var reverse: Swift.Bool
  @objc final public var messageTypeFilter: SendbirdChatSDK.MessageTypeFilter
  @objc final public var customTypeFilter: Swift.String?
  @objc final public var customTypesFilter: [Swift.String]?
  @objc final public var senderUserIdsFilter: [Swift.String]?
  @objc final public var includeMetaArray: Swift.Bool
  @objc final public var includeReactions: Swift.Bool
  @objc final public var includeThreadInfo: Swift.Bool
  @objc final public var includeParentMessageInfo: Swift.Bool
  @objc final public var replyType: SendbirdChatSDK.ReplyType
  @objc final public var showSubChannelMessagesOnly: Swift.Bool
  @objc final public var limit: Swift.UInt
  @objc override dynamic public init()
  @objc public init(builder: (SendbirdChatSDK.PreviousMessageListQueryParams) -> Swift.Void)
  @objc deinit
}
extension SendbirdChatSDK.PreviousMessageListQueryParams {
  @objc override final public func isEqual(_ object: Any?) -> Swift.Bool
}
extension SendbirdChatSDK.PreviousMessageListQueryParams : Foundation.NSCopying {
  @objc final public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
}
extension SendbirdChatSDK.PublicGroupChannelListQuery {
  @available(*, unavailable, message: "Use `PublicGroupChannelListQueryParams`'s `setMetaDataFilter(withKey:values)`")
  @objc(setMetaDataFilterWithKey:values:) final public func setMetaDataFilter(with key: Swift.String, values: [Swift.String])
  @available(*, unavailable, message: "Use `PublicGroupChannelListQueryParams`'s `setMetaDataFilter(withKey:valueStartsWith)`")
  @objc(setMetaDataFilterWithKey:valueStartsWith:) final public func setMetaDataFilter(with key: Swift.String, valueStartsWith value: Swift.String)
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(SBDPublicGroupChannelListQuery) final public class PublicGroupChannelListQuery : ObjectiveC.NSObject {
  @objc final public var hasNext: Swift.Bool {
    get
  }
  @objc final public var isLoading: Swift.Bool {
    get
  }
  @objc final public func loadNextPage(completionHandler: @escaping SendbirdChatSDK.GroupChannelListHandler)
  @objc final public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @objc deinit
}
extension SendbirdChatSDK.PublicGroupChannelListQuery {
  @objc final public var includeEmptyChannel: Swift.Bool {
    @objc get
  }
  @objc final public var includeFrozenChannel: Swift.Bool {
    @objc get
  }
  @objc final public var includeMemberList: Swift.Bool {
    @objc get
  }
  @objc final public var includeMetaData: Swift.Bool {
    @objc get
  }
  @objc final public var order: SendbirdChatSDK.PublicGroupChannelListOrder {
    @objc get
  }
  @objc final public var superChannelFilter: SendbirdChatSDK.GroupChannelSuperChannelFilter {
    @objc get
  }
  @objc final public var publicMembershipFilter: SendbirdChatSDK.PublicGroupChannelMembershipFilter {
    @objc get
  }
  @objc final public var customTypesFilter: [Swift.String]? {
    @objc get
  }
  @objc final public var customTypeStartsWithFilter: Swift.String? {
    @objc get
  }
  @objc final public var channelURLsFilter: [Swift.String]? {
    @objc get
  }
  @objc final public var channelNameContainsFilter: Swift.String? {
    @objc get
  }
  @objc final public var metaDataOrderKeyFilter: Swift.String? {
    @objc get
  }
  @objc final public var metaDataKeyFilter: Swift.String? {
    @objc get
  }
  @objc final public var metaDataValuesFilter: [Swift.String]? {
    @objc get
  }
  @objc final public var metaDataValueStartsWithFilter: Swift.String? {
    @objc get
  }
  @objc final public var limit: Swift.UInt {
    @objc get
  }
  @objc final public var createdBefore: Swift.Int64 {
    @objc get
  }
  @objc final public var createdAfter: Swift.Int64 {
    @objc get
  }
}
@_inheritsConvenienceInitializers @objc(SBDPublicGroupChannelListQueryParams) final public class PublicGroupChannelListQueryParams : ObjectiveC.NSObject {
  @objc final public var includeEmptyChannel: Swift.Bool
  @objc final public var includeFrozenChannel: Swift.Bool
  @objc final public var includeMemberList: Swift.Bool
  @objc final public var includeMetaData: Swift.Bool
  @objc final public var order: SendbirdChatSDK.PublicGroupChannelListOrder
  @objc final public var superChannelFilter: SendbirdChatSDK.GroupChannelSuperChannelFilter
  @objc final public var publicMembershipFilter: SendbirdChatSDK.PublicGroupChannelMembershipFilter
  @objc final public var customTypesFilter: [Swift.String]?
  @objc final public var customTypeStartsWithFilter: Swift.String?
  @objc final public var channelURLsFilter: [Swift.String]?
  @objc final public var channelNameContainsFilter: Swift.String?
  @objc final public var metaDataOrderKeyFilter: Swift.String?
  @objc final public var metaDataKeyFilter: Swift.String? {
    get
  }
  @objc final public var metaDataValuesFilter: [Swift.String]? {
    get
  }
  @objc final public var metaDataValueStartsWithFilter: Swift.String? {
    get
  }
  @objc final public var limit: Swift.UInt
  @objc final public var createdBefore: Swift.Int64
  @objc final public var createdAfter: Swift.Int64
  @objc override dynamic public init()
  @objc public init(builder: (SendbirdChatSDK.PublicGroupChannelListQueryParams) -> Swift.Void)
  @objc(setMetaDataFilterWithKey:values:) final public func setMetaDataFilter(withKey key: Swift.String, values: [Swift.String])
  @objc(setMetaDataFilterWithKey:valueStartsWith:) final public func setMetaDataFilter(withKey key: Swift.String, valueStartsWith value: Swift.String)
  @objc deinit
}
extension SendbirdChatSDK.PublicGroupChannelListQueryParams {
  @objc override final public func isEqual(_ object: Any?) -> Swift.Bool
}
extension SendbirdChatSDK.PublicGroupChannelListQueryParams : Foundation.NSCopying {
  @objc final public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
}
@objc(SBDPushTokenRegistrationStatus) public enum PushTokenRegistrationStatus : Swift.Int {
  case success = 0
  case pending = 1
  case error = 2
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc(SBDPushNotificationDeliveryOption) public enum PushNotificationDeliveryOption : Swift.Int {
  case `default` = 0
  case suppress = 1
}
extension SendbirdChatSDK.PushNotificationDeliveryOption : Swift.RawRepresentable, Swift.Codable {
  public typealias RawValue = Swift.String
  public init(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
@objc(SBDPushTriggerOption) public enum PushTriggerOption : Swift.Int {
  case all = 0
  case off = 1
  case mentionOnly = 2
}
extension SendbirdChatSDK.PushTriggerOption : Swift.RawRepresentable, Swift.Codable {
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
  public init(rawValue: Swift.String)
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
@objc(SBDUserListQuery) public protocol UserListQuery {
  @objc var hasNext: Swift.Bool { get }
  @objc var isLoading: Swift.Bool { get }
  @objc func loadNextPage(completionHandler: @escaping SendbirdChatSDK.UserListHandler)
}
public protocol RestrictedUserListQuery : AnyObject {
  var hasNext: Swift.Bool { get }
  var isLoading: Swift.Bool { get }
  func loadNextPage(completionHandler: @escaping SendbirdChatSDK.RestrictedUserListHandler)
}
@_hasMissingDesignatedInitializers @objc(SBDReaction) final public class Reaction : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let key: Swift.String
  @objc final public var userIds: [Swift.String] {
    get
  }
  @objc final public var getUserIds: [Swift.String] {
    @objc get
  }
  @objc final public var updatedAt: Swift.Int64 {
    get
  }
  required public init(from decoder: any Swift.Decoder) throws
  final public func encode(to encoder: any Swift.Encoder) throws
  @objc override final public func isEqual(_ object: Any?) -> Swift.Bool
  @objc override final public var hash: Swift.Int {
    @objc get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc(SBDReactionEvent) final public class ReactionEvent : ObjectiveC.NSObject, Swift.Codable {
  @objc final public var messageId: Swift.Int64 {
    get
  }
  @objc final public let key: Swift.String
  @objc final public let userId: Swift.String
  @objc final public let operation: SendbirdChatSDK.ReactionEventAction
  @objc final public let updatedAt: Swift.Int64
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
}
public struct ReadStatus {
  public let channelURL: Swift.String
  public let channelType: SendbirdChatSDK.ChannelType
  public let user: SendbirdChatSDK.User
  public let lastSeenAt: Swift.Int64
}
@_hasMissingDesignatedInitializers @objc(SBDRestrictedUser) final public class RestrictedUser : SendbirdChatSDK.User {
  @objc final public var restrictionInfo: SendbirdChatSDK.RestrictionInfo? {
    get
  }
  override final public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
}
@objc(SBDRestrictionInfo) final public class RestrictionInfo : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let desc: Swift.String?
  @objc final public let endAt: Swift.Int64
  @objc final public var restrictionType: SendbirdChatSDK.RestrictionType {
    get
  }
  @objc final public let remainingDuration: Swift.Int64
  final public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
}
public struct SSLClientCertificateError : Foundation.LocalizedError {
  public var errorDescription: Swift.String?
}
public class SSLClientCertificate {
  convenience public init(pkcs12Path: Swift.String, password: Swift.String) throws
  public init(identity: Security.SecIdentity, identityCertificate: Security.SecCertificate)
  convenience public init(pkcs12Url: Foundation.URL, password: Swift.String) throws
  public init(pkcs12Url: Foundation.URL, importOptions: CoreFoundation.CFDictionary) throws
  @objc deinit
}
public protocol SSLTrustValidator {
  func isValid(_ trust: Security.SecTrust, domain: Swift.String?) -> Swift.Bool
}
open class SSLCert {
  public init(data: Foundation.Data)
  public init(key: Security.SecKey)
  @objc deinit
}
open class SSLSecurity : SendbirdChatSDK.SSLTrustValidator {
  public var validatedDN: Swift.Bool
  public var validateEntireChain: Swift.Bool
  convenience public init(usePublicKeys: Swift.Bool = false)
  public init(certs: [SendbirdChatSDK.SSLCert], usePublicKeys: Swift.Bool)
  open func isValid(_ trust: Security.SecTrust, domain: Swift.String?) -> Swift.Bool
  public func extractPublicKey(_ data: Foundation.Data) -> Security.SecKey?
  public func extractPublicKey(_ cert: Security.SecCertificate, policy: Security.SecPolicy) -> Security.SecKey?
  public func certificateChain(_ trust: Security.SecTrust) -> [Foundation.Data]
  public func publicKeyChain(_ trust: Security.SecTrust) -> [Security.SecKey]
  @objc deinit
}
@objc(SBDScheduledBaseMessageCreateParams) public class ScheduledBaseMessageCreateParams : ObjectiveC.NSObject, Swift.Codable {
  @objc public var scheduledAt: Swift.Int64
  @objc public var data: Swift.String?
  @objc public var customType: Swift.String?
  @objc public var pushNotificationDeliveryOption: SendbirdChatSDK.PushNotificationDeliveryOption
  @objc public var metaArrays: [SendbirdChatSDK.MessageMetaArray]?
  @objc public var mentionType: SendbirdChatSDK.MentionType
  @objc public var mentionedUserIds: [Swift.String]? {
    @objc get
    @objc set
  }
  @objc public var mentionedUsers: [SendbirdChatSDK.User]? {
    @objc get
    @objc set
  }
  @objc public func addMentionedUserIds(_ userIds: [Swift.String])
  @objc public var appleCriticalAlertOptions: SendbirdChatSDK.AppleCriticalAlertOptions?
  @objc public init(scheduledAt: Swift.Int64)
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(SBDScheduledBaseMessageUpdateParams) public class ScheduledBaseMessageUpdateParams : ObjectiveC.NSObject {
  @objc public var scheduledAt: Swift.Int64
  @objc public var data: Swift.String?
  @objc public var customType: Swift.String?
  @objc public var pushNotificationDeliveryOption: SendbirdChatSDK.PushNotificationDeliveryOption {
    @objc get
    @objc set
  }
  @objc public var metaArrays: [SendbirdChatSDK.MessageMetaArray]?
  @objc public var mentionType: SendbirdChatSDK.MentionType {
    @objc get
    @objc set
  }
  @objc public var mentionedUserIds: [Swift.String]? {
    @objc get
    @objc set
  }
  @objc public func setMentionedUsers(_ mentionedUsers: [SendbirdChatSDK.User])
  @objc public func addMentionedUserIds(_ userIds: [Swift.String])
  @objc public var appleCriticalAlertOptions: SendbirdChatSDK.AppleCriticalAlertOptions?
  @objc override dynamic public init()
  @objc deinit
}
@objc(SBDScheduledFileMessageCreateParams) final public class ScheduledFileMessageCreateParams : SendbirdChatSDK.ScheduledBaseMessageCreateParams {
  @objc final public var file: Foundation.Data? {
    @objc get
    @objc set
  }
  @objc final public var fileURL: Swift.String? {
    @objc get
    @objc set
  }
  @objc final public var thumbnailSizes: [SendbirdChatSDK.ThumbnailSize]?
  @objc final public var fileName: Swift.String? {
    @objc get
    @objc set
  }
  @objc final public var mimeType: Swift.String? {
    @objc get
    @objc set
  }
  @objc final public var fileSize: Swift.UInt
  @objc public init(scheduledAt: Swift.Int64, file: Foundation.Data)
  @objc public init(scheduledAt: Swift.Int64, fileURL: Swift.String)
  override final public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(SBDScheduledFileMessageUpdateParams) final public class ScheduledFileMessageUpdateParams : SendbirdChatSDK.ScheduledBaseMessageUpdateParams {
  @objc final public var file: Foundation.Data? {
    @objc get
    @objc set
  }
  @objc final public var fileURL: Swift.String? {
    @objc get
    @objc set
  }
  @objc final public var thumbnailSizes: [SendbirdChatSDK.ThumbnailSize]?
  @objc final public var fileName: Swift.String?
  @objc final public var mimeType: Swift.String?
  @objc final public var fileSize: Swift.UInt
  @objc override dynamic public init()
  @objc deinit
}
@objc(SBDScheduledInfo) final public class ScheduledInfo : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let scheduledMessageId: Swift.Int64
  @objc final public let scheduledAt: Swift.Int64
  @objc final public var scheduledMessageParams: SendbirdChatSDK.ScheduledBaseMessageCreateParams?
  required public init(from decoder: any Swift.Decoder) throws
  final public func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
extension SendbirdChatSDK.ScheduledInfo {
  @objc override final public func isEqual(_ object: Any?) -> Swift.Bool
}
@objc(SBDScheduledMessageListOrder) public enum ScheduledMessageListOrder : Swift.Int {
  case createdAt
  case scheduledAt
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers @objc(SBDScheduledMessageListQuery) final public class ScheduledMessageListQuery : ObjectiveC.NSObject {
  @objc final public var hasNext: Swift.Bool {
    get
  }
  @objc final public var isLoading: Swift.Bool {
    get
  }
  @objc final public func loadNextPage(completionHandler: @escaping SendbirdChatSDK.MessageListHandler)
  @objc deinit
}
extension SendbirdChatSDK.ScheduledMessageListQuery : Foundation.NSCopying {
  @objc final public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
}
extension SendbirdChatSDK.ScheduledMessageListQuery {
  @objc final public var limit: Swift.Int {
    @objc get
  }
  @objc final public var order: SendbirdChatSDK.ScheduledMessageListOrder {
    @objc get
  }
  @objc final public var reverse: Swift.Bool {
    @objc get
  }
  @objc final public var scheduledStatusOptions: SendbirdChatSDK.ScheduledStatusOptions {
    @objc get
  }
  @objc final public var messageTypeFilter: SendbirdChatSDK.MessageTypeFilter {
    @objc get
  }
}
@_inheritsConvenienceInitializers @objc(SBDScheduledMessageListQueryParams) final public class ScheduledMessageListQueryParams : ObjectiveC.NSObject {
  @objc final public var limit: Swift.Int
  @objc final public var order: SendbirdChatSDK.ScheduledMessageListOrder
  @objc final public var reverse: Swift.Bool
  @objc final public var scheduledStatusOptions: SendbirdChatSDK.ScheduledStatusOptions
  @objc final public var messageTypeFilter: SendbirdChatSDK.MessageTypeFilter
  @objc override dynamic public init()
  @objc public init(builder: (SendbirdChatSDK.ScheduledMessageListQueryParams) -> Swift.Void)
  @objc deinit
}
extension SendbirdChatSDK.ScheduledMessageListQueryParams {
  @objc override final public func isEqual(_ object: Any?) -> Swift.Bool
}
extension SendbirdChatSDK.ScheduledMessageListQueryParams : Foundation.NSCopying {
  @objc final public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
}
@objc(SBDScheduledMessageRetrievalParams) final public class ScheduledMessageRetrievalParams : ObjectiveC.NSObject {
  @objc final public let channelURL: Swift.String
  @objc final public let scheduledMessageId: Swift.Int64
  @objc public init(channelURL: Swift.String, scheduledMessageId: Swift.Int64)
  @objc deinit
}
@objc(SBDScheduledStatus) public enum ScheduledStatus : Swift.Int {
  case pending
  case sent
  case failed
  case canceled
}
extension SendbirdChatSDK.ScheduledStatus : Swift.RawRepresentable, Swift.Codable {
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
  public init?(rawValue: Swift.String)
  public init(from decoder: any Swift.Decoder) throws
}
@objc(SBDScheduledStatusOptions) final public class ScheduledStatusOptions : ObjectiveC.NSObject, Swift.OptionSet {
  @objc public static let pending: SendbirdChatSDK.ScheduledStatusOptions
  @objc public static let sent: SendbirdChatSDK.ScheduledStatusOptions
  @objc public static let failed: SendbirdChatSDK.ScheduledStatusOptions
  @objc public static let canceled: SendbirdChatSDK.ScheduledStatusOptions
  @objc final public let rawValue: Swift.Int
  public init(rawValue: Swift.Int)
  @available(swift, obsoleted: 1.0)
  @objc convenience public init(abilitiesToUnion: [SendbirdChatSDK.ScheduledStatusOptions])
  @objc override final public var hash: Swift.Int {
    @objc get
  }
  @objc override final public func isEqual(_ object: Any?) -> Swift.Bool
  public typealias ArrayLiteralElement = SendbirdChatSDK.ScheduledStatusOptions
  public typealias Element = SendbirdChatSDK.ScheduledStatusOptions
  public typealias RawValue = Swift.Int
  @objc deinit
}
@objc(SBDScheduledUserMessageCreateParams) final public class ScheduledUserMessageCreateParams : SendbirdChatSDK.ScheduledBaseMessageCreateParams {
  @objc final public var message: Swift.String
  @objc final public var translationTargetLanguages: [Swift.String]?
  @objc public init(scheduledAt: Swift.Int64, message: Swift.String)
  override final public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(SBDScheduledUserMessageUpdateParams) final public class ScheduledUserMessageUpdateParams : SendbirdChatSDK.ScheduledBaseMessageUpdateParams {
  @objc final public var message: Swift.String?
  @objc final public var translationTargetLanguages: [Swift.String]?
  @objc final public var payload: [Swift.String : Any]
  @objc override dynamic public init()
  @objc deinit
}
extension SendbirdChatSDK.SendbirdChat {
  @objc public static func __addExtension(_ key: Swift.String, version: Swift.String)
  @available(*, deprecated, renamed: "__addExtension(_:version:)", message: "This method is deprecated in 4.8.3")
  @objc public static func addExtension(_ key: Swift.String, version: Swift.String)
  public static func __addSendbirdExtensions(extensions: [SendbirdChatSDK.__SendbirdSDKInfo], customData: [Swift.String : Swift.String]?) -> Swift.Bool
}
@available(*, unavailable, renamed: "SendbirdChat")
public typealias SBDMain = SendbirdChatSDK.SendbirdChat
extension SendbirdChatSDK.SendbirdChat {
  @available(*, unavailable, message: "`connectionDelegatesDictionary` has been removed.")
  final public class var connectionDelegatesDictionary: Foundation.NSMapTable<Foundation.NSString, any SendbirdChatSDK.ConnectionDelegate>? {
    get
  }
  @available(*, unavailable, message: "`channelDelegatesDictionary` has been removed.")
  final public class var channelDelegatesDictionary: Foundation.NSMapTable<Foundation.NSString, any SendbirdChatSDK.BaseChannelDelegate>? {
    get
  }
  @available(*, unavailable, message: "`userEventDelegatesDictionary` has been removed.")
  final public class var userEventDelegatesDictionary: Foundation.NSMapTable<Foundation.NSString, any SendbirdChatSDK.UserEventDelegate>? {
    get
  }
  @available(*, unavailable, renamed: "connect(userId:completionHandler:)")
  public static func connect(withUserId userId: Swift.String, completionHandler: SendbirdChatSDK.UserHandler? = nil)
  @available(*, unavailable, renamed: "initialize(params:migrationStartHandler:completionHandler:)")
  public static func initWithApplicationId() -> Swift.Bool
  @available(*, unavailable, renamed: "getGroupChannelCount(memberStateFilter:completionHandler:)")
  @objc public static func getChannelCount(with: SendbirdChatSDK.MemberStateFilter, completionHandler: (Swift.UInt, SendbirdChatSDK.SBError?) -> Swift.Void)
  @available(*, unavailable, renamed: "getMyGroupChannelChangeLogs(timestamp:params:completionHandler:)")
  @objc public static func getMyGroupChannelChangeLogs(byTimestamp: Swift.Int64, params: SendbirdChatSDK.GroupChannelChangeLogsParams?, completionHandler: (_ updatedChannel: [SendbirdChatSDK.GroupChannel]?, _ deletedChannelURLs: [Swift.String]?, _ hasMore: Swift.Bool, _ token: Swift.String?, _ error: SendbirdChatSDK.SBError?) -> Swift.Void)
  @available(*, unavailable, renamed: "getMyGroupChannelChangeLogs(token:params:completionHandler:)")
  @objc public static func getMyGroupChannelChangeLogs(byToken: Swift.String?, params: SendbirdChatSDK.GroupChannelChangeLogsParams?, completionHandler: (_ updatedChannel: [SendbirdChatSDK.GroupChannel]?, _ deletedChannelURLs: [Swift.String]?, _ hasMore: Swift.Bool, _ token: Swift.String?, _ error: SendbirdChatSDK.SBError?) -> Swift.Void)
  @available(*, unavailable, renamed: "isLocalCachingEnabled")
  @objc public static func isUsingLocalCaching() -> Swift.Bool
  @available(*, unavailable, message: "`getPendingPushKitToken` has been removed.")
  @objc public static func getPendingPushKitToken() -> Foundation.Data?
  @available(*, unavailable, message: "`registerDevicePushKitToken(_:unique:completionHandler:)` has been removed.")
  @objc public static func registerDevicePushKitToken(_ devToken: Foundation.Data, unique: Swift.Bool, completionHandler: ((SendbirdChatSDK.PushTokenRegistrationStatus, SendbirdChatSDK.SBError?) -> Swift.Void)? = nil)
  @available(*, unavailable, renamed: "updateCurrentUserInfo(params:progressHandler:completionHandler:)")
  @objc public static func updateCurrentUserInfo(withNickname nickname: Swift.String?, profileUrl: Swift.String?, completionHandler: ((SendbirdChatSDK.SBError?) -> Swift.Void)? = nil)
  @available(*, unavailable, renamed: "updateCurrentUserInfo(params:progressHandler:completionHandler:)")
  @objc public static func updateCurrentUserInfo(withNickname nickname: Swift.String?, profileImage: Foundation.Data?, completionHandler: ((SendbirdChatSDK.SBError?) -> Swift.Void)? = nil)
  @available(*, unavailable, renamed: "updateCurrentUserInfo(params:progressHandler:completionHandler:)")
  @objc public static func updateCurrentUserInfo(withNickname nickname: Swift.String?, profileImage: Foundation.Data?, progressHandler: ((Swift.Int64, Swift.Int64, Swift.Int64) -> Swift.Void)?, completionHandler: ((SendbirdChatSDK.SBError?) -> Swift.Void)? = nil)
  @available(*, unavailable, renamed: "updateCurrentUserInfo(params:progressHandler:completionHandler:)")
  @objc public static func updateCurrentUserInfo(withNickname nickname: Swift.String?, profileImageFilePath: Swift.String?, progressHandler: ((Swift.Int64, Swift.Int64, Swift.Int64) -> Swift.Void)?, completionHandler: ((SendbirdChatSDK.SBError?) -> Swift.Void)? = nil)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class SendbirdChat : ObjectiveC.NSObject {
  @objc public static var isInitialized: Swift.Bool {
    @objc get
  }
  @objc public static func getSDKVersion() -> Swift.String
  @objc public static func getApplicationId() -> Swift.String?
  @objc public static func setAppVersion(version: Swift.String?)
  @objc public static func getMultipleFilesMessageFileCountLimit() -> Swift.Int
  @discardableResult
  @objc public static func initialize(params: SendbirdChatSDK.InitParams, migrationStartHandler: SendbirdChatSDK.VoidHandler? = nil, completionHandler: SendbirdChatSDK.SBErrorHandler? = nil) -> Swift.Bool
  @available(*, deprecated, renamed: "initialize(params:migrationStartHandler:completionHandler:)", message: "This method is deprecated in 4.15.0. Set `needsSynchronous` in `InitParams` to `true` and use `initialize(params:migrationStartHandler:completionHandler:)` instead.")
  @discardableResult
  @objc public static func initializeSynchronously(params: SendbirdChatSDK.InitParams) -> SendbirdChatSDK.SBError?
  public static func executeOrWaitForInitialization(executeHandler: @escaping () -> Swift.Void)
  @objc public static func connect(userId: Swift.String, completionHandler: SendbirdChatSDK.UserHandler? = nil)
  @objc public static func connect(userId: Swift.String, authToken: Swift.String?, completionHandler: SendbirdChatSDK.UserHandler? = nil)
  @objc public static func connect(userId: Swift.String, authToken: Swift.String?, apiHost: Swift.String?, wsHost: Swift.String?, completionHandler: SendbirdChatSDK.UserHandler? = nil)
  @available(*, deprecated, renamed: "authenticate")
  @objc public static func authenticateFeed(userId: Swift.String, authToken: Swift.String?, completionHandler: SendbirdChatSDK.UserHandler? = nil)
  @available(*, deprecated, renamed: "authenticate")
  @objc public static func authenticateFeed(userId: Swift.String, authToken: Swift.String?, apiHost: Swift.String?, completionHandler: SendbirdChatSDK.UserHandler? = nil)
  @objc final public class func authenticate(userId: Swift.String, authToken: Swift.String?, apiHost: Swift.String?, completionHandler: SendbirdChatSDK.UserHandler? = nil)
  @objc public static func disconnect(completionHandler: SendbirdChatSDK.VoidHandler? = nil)
  @objc public static func disconnectWebSocket(completionHandler: SendbirdChatSDK.VoidHandler? = nil)
  @discardableResult
  @objc public static func reconnect() -> Swift.Bool
  @objc public static var backgroundSessionCompletionHandler: SendbirdChatSDK.VoidHandler? {
    @objc get
    @objc set
  }
  @objc public static func getAppInfo() -> SendbirdChatSDK.AppInfo?
  @objc public static func getConnectState() -> SendbirdChatSDK.WebSocketConnectionState
  @objc public static func createApplicationUserListQuery() -> SendbirdChatSDK.ApplicationUserListQuery
  @objc public static func createApplicationUserListQuery(paramsBuilder: (SendbirdChatSDK.ApplicationUserListQueryParams) -> Swift.Void) -> SendbirdChatSDK.ApplicationUserListQuery
  @objc public static func createApplicationUserListQuery(params: SendbirdChatSDK.ApplicationUserListQueryParams) -> SendbirdChatSDK.ApplicationUserListQuery
  @objc public static func createBlockedUserListQuery() -> SendbirdChatSDK.BlockedUserListQuery
  @objc public static func createBlockedUserListQuery(paramsBuilder: (SendbirdChatSDK.BlockedUserListQueryParams) -> Swift.Void) -> SendbirdChatSDK.BlockedUserListQuery
  @objc public static func createBlockedUserListQuery(params: SendbirdChatSDK.BlockedUserListQueryParams) -> SendbirdChatSDK.BlockedUserListQuery
  @objc public static func createMessageSearchQuery(builder: (SendbirdChatSDK.MessageSearchQueryParams) -> Swift.Void) -> SendbirdChatSDK.MessageSearchQuery
  @objc public static func createMessageSearchQuery(params: SendbirdChatSDK.MessageSearchQueryParams) -> SendbirdChatSDK.MessageSearchQuery
  @available(*, deprecated, renamed: "addConnectionDelegate(_:identifier:)", message: "This method is deprecated in 4.0.12.")
  public static func add(_ delegate: any SendbirdChatSDK.ConnectionDelegate, identifier: Swift.String)
  @objc public static func addConnectionDelegate(_ delegate: any SendbirdChatSDK.ConnectionDelegate, identifier: Swift.String)
  @objc public static func removeConnectionDelegate(forIdentifier identifier: Swift.String)
  @objc public static func connectionDelegate(forIdentifier identifier: Swift.String) -> (any SendbirdChatSDK.ConnectionDelegate)?
  @objc public static func removeAllConnectionDelegates()
  @available(*, deprecated, renamed: "addChannelDelegate(_:identifier:)", message: "This method is deprecated in 4.0.12.")
  public static func add(_ delegate: any SendbirdChatSDK.BaseChannelDelegate, identifier: Swift.String)
  @objc public static func addChannelDelegate(_ delegate: any SendbirdChatSDK.BaseChannelDelegate, identifier: Swift.String)
  @objc public static func removeChannelDelegate(forIdentifier identifier: Swift.String)
  @objc public static func channelDelegate(forIdentifier identifier: Swift.String) -> (any SendbirdChatSDK.BaseChannelDelegate)?
  @objc public static func removeAllChannelDelegates()
  @objc public static func userEventDelegate(forIdentifier identifier: Swift.String) -> (any SendbirdChatSDK.UserEventDelegate)?
  @available(*, deprecated, renamed: "addUserEventDelegate(_:identifier:)", message: "This method is deprecated in 4.0.12.")
  public static func add(_ delegate: any SendbirdChatSDK.UserEventDelegate, identifier: Swift.String)
  @objc public static func addUserEventDelegate(_ delegate: any SendbirdChatSDK.UserEventDelegate, identifier: Swift.String)
  @objc public static func removeUserEventDelegate(forIdentifier identifier: Swift.String)
  @objc public static func removeAllUserEventDelegates()
  @objc public static func setSessionDelegate(_ delegate: any SendbirdChatSDK.SessionDelegate)
  @objc public static func removeSessionDelegate()
  @objc public static func getPendingPushToken() -> Foundation.Data?
  @objc public static func registerDevicePushToken(_ devToken: Foundation.Data, unique: Swift.Bool, completionHandler: ((_ registrationStatus: SendbirdChatSDK.PushTokenRegistrationStatus, _ error: SendbirdChatSDK.SBError?) -> Swift.Void)? = nil)
  @available(*, deprecated, message: "This method is deprecated in 4.2.4. Please use `unregisterPushToken(_ pushToken: Data, completionHandler: SBErrorHandler?)`")
  @objc public static func unregisterPushToken(_ devToken: Foundation.Data, completionHandler: ((_ response: [Swift.AnyHashable : Any]?, _ error: SendbirdChatSDK.SBError?) -> Swift.Void)? = nil)
  @objc(unregisterPushToken:completion:) public static func unregisterPushToken(_ pushToken: Foundation.Data, completionHandler: SendbirdChatSDK.SBErrorHandler? = nil)
  @available(*, deprecated, message: "This method is deprecated in 4.2.4. Please use `unregisterAllPushToken(completionHandler: SBErrorHandler?)`")
  @objc public static func unregisterAllPushToken(completionHandler: ((_ response: [Swift.AnyHashable : Any]?, _ error: SendbirdChatSDK.SBError?) -> Swift.Void)? = nil)
  @objc(unregisterAllPushTokenWithCompletion:) public static func unregisterAllPushToken(completionHandler: SendbirdChatSDK.SBErrorHandler? = nil)
  @objc(getMyPushTokensWithToken:pushTokenType:completionHandler:) public static func getMyPushTokens(token: Swift.String?, pushTokenType: SendbirdChatSDK.PushTokenType, completionHandler: @escaping SendbirdChatSDK.GetPushTokensHandler)
  @objc public static func setDoNotDisturb(enable: Swift.Bool, startHour: Swift.Int32, startMin: Swift.Int32, endHour: Swift.Int32, endMin: Swift.Int32, timezone: Swift.String, completionHandler: SendbirdChatSDK.SBErrorHandler? = nil)
  @objc public static func getDoNotDisturb(completionHandler: ((_ enabled: Swift.Bool, _ startHour: Swift.Int, _ startMin: Swift.Int, _ endHour: Swift.Int, _ endMin: Swift.Int, _ timezone: Swift.String, _ error: SendbirdChatSDK.SBError?) -> Swift.Void)? = nil)
  @objc public static func setSnoozePeriod(enabled: Swift.Bool, startTimestamp: Swift.Int64, endTimestamp: Swift.Int64, completionHandler: SendbirdChatSDK.SBErrorHandler? = nil)
  @objc public static func getSnoozePeriod(_ completionHandler: @escaping SendbirdChatSDK.SnoozePeriodHandler)
  @objc public static func setPushTriggerOption(_ pushTriggerOption: SendbirdChatSDK.PushTriggerOption, completionHandler: SendbirdChatSDK.SBErrorHandler? = nil)
  @objc public static func getPushTriggerOption(completionHandler: @escaping SendbirdChatSDK.PushTriggerOptionHandler)
  @objc public static func setPushSound(_ sound: Swift.String, completionHandler: SendbirdChatSDK.SBErrorHandler? = nil)
  @objc public static func getPushSound(completionHandler: ((_ pushSound: Swift.String?, _ error: SendbirdChatSDK.SBError?) -> Swift.Void)? = nil)
  @objc public static func setPushTemplate(name: Swift.String, completionHandler: SendbirdChatSDK.SBErrorHandler? = nil)
  @objc public static func getPushTemplate(completionHandler: ((_ pushTemplate: Swift.String?, _ error: SendbirdChatSDK.SBError?) -> Swift.Void)? = nil)
  @objc public static func setChannelInvitationPreference(autoAccept: Swift.Bool, completionHandler: SendbirdChatSDK.SBErrorHandler? = nil)
  @objc public static func getChannelInvitationPreferenceAutoAccept(completionHandler: ((_ autoAccept: Swift.Bool, _ error: SendbirdChatSDK.SBError?) -> Swift.Void)? = nil)
  @objc public static func createFriendListQuery() -> SendbirdChatSDK.FriendListQuery
  @objc public static func createFriendListQuery(paramsBuilder: (SendbirdChatSDK.FriendListQueryParams) -> Swift.Void) -> SendbirdChatSDK.FriendListQuery
  @objc public static func createFriendListQuery(params: SendbirdChatSDK.FriendListQueryParams) -> SendbirdChatSDK.FriendListQuery
  @objc public static func setAllowFriendDiscovery(_ allow: Swift.Bool, completionHandler: SendbirdChatSDK.SBErrorHandler? = nil)
  @objc public static func getAllowFriendDiscovery(completionHandler: ((_ allowFriendDiscovery: Swift.Bool, _ error: SendbirdChatSDK.SBError?) -> Swift.Void)? = nil)
  @objc public static func addFriends(userIds: [Swift.String], completionHandler: ((_ users: [SendbirdChatSDK.User]?, _ error: SendbirdChatSDK.SBError?) -> Swift.Void)? = nil)
  @objc public static func deleteFriend(userId: Swift.String, completionHandler: SendbirdChatSDK.SBErrorHandler? = nil)
  @objc public static func deleteFriends(userIds: [Swift.String], completionHandler: SendbirdChatSDK.SBErrorHandler? = nil)
  @objc public static func deleteFriend(discoveryKey: Swift.String, completionHandler: SendbirdChatSDK.SBErrorHandler? = nil)
  @objc public static func deleteFriends(discoveryKeys: [Swift.String], completionHandler: SendbirdChatSDK.SBErrorHandler? = nil)
  @objc public static func uploadFriendDiscoveries(_ discoveryKeyAndNames: [Swift.String : Swift.String], completionHandler: SendbirdChatSDK.SBErrorHandler? = nil)
  @objc(getFriendChangeLogsWithToken:completionHandler:) public static func getFriendChangeLogs(token: Swift.String?, completionHandler: ((_ updatedUsers: [SendbirdChatSDK.User]?, _ deletedUserIds: [Swift.String]?, _ hasMore: Swift.Bool, _ token: Swift.String?, _ error: SendbirdChatSDK.SBError?) -> Swift.Void)? = nil)
  @objc(getGroupChannelCountWithMyMemberStateFilter:completionHandler:) public static func getGroupChannelCount(myMemberStateFilter: SendbirdChatSDK.MyMemberStateFilter, completionHandler: @escaping SendbirdChatSDK.CountHandler)
  @objc public static func getTotalUnreadChannelCount(completionHandler: @escaping SendbirdChatSDK.CountHandler)
  @objc public static func getTotalUnreadChannelCount(params: SendbirdChatSDK.GroupChannelTotalUnreadChannelCountParams, completionHandler: @escaping SendbirdChatSDK.CountHandler)
  @objc public static func getTotalUnreadMessageCount(completionHandler: @escaping SendbirdChatSDK.CountHandler)
  @objc final public class func getTotalUnreadNotificationsCount(completionHandler: @escaping SendbirdChatSDK.CountHandler)
  @available(*, deprecated, renamed: "getTotalUnreadMessageCountWithFeed(params:completionHandler:)", message: "This method is deprecated in 4.6.0.")
  @objc public static func getTotalUnreadMessageCount(params: SendbirdChatSDK.GroupChannelTotalUnreadMessageCountParams, completionHandler: @escaping SendbirdChatSDK.CountHandler)
  @objc public static func getTotalUnreadMessageCountWithFeed(params: SendbirdChatSDK.GroupChannelTotalUnreadMessageCountParams, completionHandler: @escaping SendbirdChatSDK.UnreadMessageCountHandler)
  @objc public static func getUnreadItemCount(key: SendbirdChatSDK.UnreadItemKey, completionHandler: @escaping (_ count: SendbirdChatSDK.UnreadItemCount?, _ error: SendbirdChatSDK.SBError?) -> Swift.Void)
  @objc public static func getSubscribedTotalUnreadMessageCount() -> Swift.Int
  @objc public static func getSubscribedCustomTypeTotalUnreadMessageCount() -> Swift.Int
  @objc public static func getSubscribedCustomTypeUnreadMessageCount(customType: Swift.String) -> Swift.Int
  @objc public static func markAsReadAll(completionHandler: SendbirdChatSDK.SBErrorHandler? = nil)
  @objc public static func markAsRead(channelURLs: [Swift.String], completionHandler: SendbirdChatSDK.SBErrorHandler? = nil)
  @objc public static func markAsDelivered(remoteNotificationPayload: [Swift.AnyHashable : Any], completionHandler: SendbirdChatSDK.SBErrorHandler? = nil)
  @objc public static func markPushNotificationAsDelivered(remoteNotificationPayload: [Swift.AnyHashable : Any], completionHandler: SendbirdChatSDK.SBErrorHandler? = nil)
  @objc final public class func markPushNotificationAsDelivered(apiHost: Swift.String? = nil, remoteNotificationPayload: [Swift.AnyHashable : Any], completionHandler: SendbirdChatSDK.SBErrorHandler? = nil)
  @objc public static func markPushNotificationAsClicked(remoteNotificationPayload: [Swift.AnyHashable : Any], completionHandler: SendbirdChatSDK.SBErrorHandler? = nil)
  @objc final public class func markPushNotificationAsClicked(apiHost: Swift.String? = nil, remoteNotificationPayload: [Swift.AnyHashable : Any], completionHandler: SendbirdChatSDK.SBErrorHandler? = nil)
  @objc(getMyGroupChannelChangeLogsWithToken:params:completionHandler:) public static func getMyGroupChannelChangeLogs(token: Swift.String?, params: SendbirdChatSDK.GroupChannelChangeLogsParams = GroupChannelChangeLogsParams(), completionHandler: @escaping SendbirdChatSDK.ChannelChangeLogsHandler)
  @objc(getMyGroupChannelChangeLogsWithTimestamp:params:completionHandler:) public static func getMyGroupChannelChangeLogs(timestamp: Swift.Int64, params: SendbirdChatSDK.GroupChannelChangeLogsParams = GroupChannelChangeLogsParams(), completionHandler: @escaping SendbirdChatSDK.ChannelChangeLogsHandler)
  @objc(getMembersChangeLogsWithToken:completionHandler:) public static func getMembersChangeLogs(token: Swift.String, completionHandler: @escaping SendbirdChatSDK.MembersChangeLogsHandler)
  @objc(getMembersChangeLogsWithTimestamp:completionHandler:) public static func getMembersChangeLogs(timestamp: Swift.Int64, completionHandler: @escaping SendbirdChatSDK.MembersChangeLogsHandler)
  @objc public static func getLogLevel() -> SendbirdChatSDK.LogLevel
  @objc public static func setLogLevel(_ logLevel: SendbirdChatSDK.LogLevel)
  @objc public static func getMimeType(_ file: Foundation.Data?) -> Swift.String?
  @objc public static func setNetworkAwarenessReconnection(_ isOn: Swift.Bool)
  @objc public static func getSBUserAgent() -> Swift.String
  @objc public static func setSharedContainerIdentifier(_ identifier: Swift.String)
  @objc public static func setCompletionHandlerDelegateQueue(_ queue: Dispatch.DispatchQueue)
  @objc public static func performCompletionHandlerDelegateQueue(_ block: (() -> Swift.Void)? = nil)
  @objc public static func setAppGroup(_ appGroup: Swift.String)
  @objc public static func ekey() -> Swift.String?
  @objc public static func getAllEmojis(_ completionHandler: ((_ emojiContainer: SendbirdChatSDK.EmojiContainer?, _ error: SendbirdChatSDK.SBError?) -> Swift.Void)? = nil)
  @objc public static func getEmoji(_ emojiKey: Swift.String, completionHandler: ((_ emoji: SendbirdChatSDK.Emoji?, _ error: SendbirdChatSDK.SBError?) -> Swift.Void)? = nil)
  @objc public static func getEmojiCategory(_ categoryId: Swift.Int64, completionHandler: ((_ emojiCategory: SendbirdChatSDK.EmojiCategory?, _ error: SendbirdChatSDK.SBError?) -> Swift.Void)? = nil)
  @objc public static func getCurrentUser() -> SendbirdChatSDK.User?
  @objc public static func getLastConnectedAt() -> Swift.Int64
  @objc public static func updateCurrentUserInfo(params: SendbirdChatSDK.UserUpdateParams, progressHandler: SendbirdChatSDK.ProgressHandler? = nil, completionHandler: SendbirdChatSDK.SBErrorHandler? = nil)
  @objc public static func updateCurrentUserInfo(preferredLanguages: [Swift.String], completionHandler: SendbirdChatSDK.SBErrorHandler? = nil)
  @objc public static func blockUserId(_ userId: Swift.String, completionHandler: SendbirdChatSDK.UserHandler? = nil)
  @objc public static func blockUser(_ user: SendbirdChatSDK.User, completionHandler: SendbirdChatSDK.UserHandler? = nil)
  @objc public static func unblockUserId(_ userId: Swift.String, completionHandler: SendbirdChatSDK.SBErrorHandler? = nil)
  @objc public static func unblockUser(_ user: SendbirdChatSDK.User, completionHandler: SendbirdChatSDK.SBErrorHandler? = nil)
  @objc public static func createGroupChannelCollection(query: SendbirdChatSDK.GroupChannelListQuery) -> SendbirdChatSDK.GroupChannelCollection?
  @objc public static func createMessageCollection(channel: SendbirdChatSDK.GroupChannel, startingPoint: Swift.Int64, params: SendbirdChatSDK.MessageListParams) -> SendbirdChatSDK.MessageCollection
  @objc public static func createNotificationCollection(channel: SendbirdChatSDK.FeedChannel, startingPoint: Swift.Int64, params: SendbirdChatSDK.MessageListParams, delegate: (any SendbirdChatSDK.NotificationCollectionDelegate)?) -> SendbirdChatSDK.NotificationCollection?
  @objc public static func clearCachedData(completionHandler: SendbirdChatSDK.SBErrorHandler?)
  @objc public static func clearCachedMessages(channelURL: Swift.String, completionHandler: SendbirdChatSDK.SBErrorHandler?)
  @objc public static func getCachedDataSize() -> Swift.Int
  @objc public static var isLocalCachingEnabled: Swift.Bool {
    @objc get
  }
  @objc public static func getTotalScheduledMessageCount(params: SendbirdChatSDK.TotalScheduledMessageCountParams, completionHandler: @escaping SendbirdChatSDK.CountHandler)
  @objc public static func createScheduledMessageListQuery(channelURL: Swift.String?) -> SendbirdChatSDK.ScheduledMessageListQuery
  @objc public static func createScheduledMessageListQuery(channelURL: Swift.String?, paramsBuilder: (SendbirdChatSDK.ScheduledMessageListQueryParams) -> Swift.Void) -> SendbirdChatSDK.ScheduledMessageListQuery
  @objc public static func createScheduledMessageListQuery(channelURL: Swift.String?, params: SendbirdChatSDK.ScheduledMessageListQueryParams) -> SendbirdChatSDK.ScheduledMessageListQuery
  @objc public static func createPollListQuery(params: SendbirdChatSDK.PollListQueryParams) -> SendbirdChatSDK.PollListQuery
  @objc public static func createPollListQuery(paramsBuilder: (SendbirdChatSDK.PollListQueryParams) -> Swift.Void) -> SendbirdChatSDK.PollListQuery
  @objc public static func createPollVoterListQuery(params: SendbirdChatSDK.PollVoterListQueryParams) -> SendbirdChatSDK.PollVoterListQuery
  @objc public static func createPollVoterListQuery(paramsBuilder: (SendbirdChatSDK.PollVoterListQueryParams) -> Swift.Void) -> SendbirdChatSDK.PollVoterListQuery
  @objc public static func getMyFeedChannelChangeLogs(timestamp: Swift.Int64, params: SendbirdChatSDK.FeedChannelChangeLogsParams = FeedChannelChangeLogsParams(), completionHandler: @escaping SendbirdChatSDK.FeedChannelChangeLogsHandler)
  @objc public static func getMyFeedChannelChangeLogsByToken(token: Swift.String?, params: SendbirdChatSDK.FeedChannelChangeLogsParams = FeedChannelChangeLogsParams(), completionHandler: @escaping SendbirdChatSDK.FeedChannelChangeLogsHandler)
  @objc public static func getUnreadMessageCount() -> SendbirdChatSDK.UnreadMessageCount
  @objc public static func getGlobalNotificationChannelSetting(completionHandler: @escaping SendbirdChatSDK.GlobalNotificationChannelSettingHandler)
  @objc public static func getNotificationTemplateList(token: Swift.String?, params: SendbirdChatSDK.NotificationTemplateListParams = NotificationTemplateListParams(), completionHandler: @escaping SendbirdChatSDK.NotificationTemplateListHandler)
  @objc public static func getNotificationTemplate(key: Swift.String, completionHandler: @escaping SendbirdChatSDK.NotificationTemplateHandler)
  @objc public static func getMessageTemplateList(token: Swift.String?, params: SendbirdChatSDK.MessageTemplateListParams = MessageTemplateListParams(), completionHandler: @escaping SendbirdChatSDK.MessageTemplateListHandler)
  @objc public static func getMessageTemplate(key: Swift.String, completionHandler: @escaping SendbirdChatSDK.MessageTemplateHandler)
  public static func __getUIKitConfiguration(completionhandler: @escaping SendbirdChatSDK.UIKitConfigurationHandler)
  public static func refreshNotificationCollections()
  @objc public static func sendUserMessage(channelType: SendbirdChatSDK.ChannelType, channelURL: Swift.String, params: SendbirdChatSDK.UserMessageCreateParams, completionHandler: SendbirdChatSDK.UserMessageHandler?)
  @objc deinit
}
public struct __SendbirdSDKInfo {
  public init(product: SendbirdChatSDK.__SendbirdProduct, platform: SendbirdChatSDK.__SendbirdPlatform, version: Swift.String)
}
@_hasMissingDesignatedInitializers final public class __SendbirdStatistics {
  @discardableResult
  public static func __appendStat(type: Swift.String, data: [Swift.String : Any]) -> Swift.Bool
  @objc deinit
}
extension SendbirdChatSDK.SendbirdChat {
  @_inheritsConvenienceInitializers @objc(SBDPushTemplate) public class PushTemplate : ObjectiveC.NSObject {
    @objc public static let `default`: Swift.String
    @objc public static let alternative: Swift.String
    @objc override dynamic public init()
    @objc deinit
  }
}
@objc(SBDInitializationState) public enum InitializationState : Swift.Int {
  case notStarted = 0
  case initializing = 1
  case migrating = 2
  case completed = 3
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension SendbirdChatSDK.InitializationState : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
@objc(SBDWebSocketConnectionState) public enum WebSocketConnectionState : Swift.Int {
  case connecting = 0
  case open = 1
  case closed = 3
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc(SBDUserConnectionStatus) public enum UserConnectionStatus : Swift.Int {
  case nonAvailable = 0
  case online = 1
  case offline = 2
}
extension SendbirdChatSDK.UserConnectionStatus : Swift.RawRepresentable, Swift.Codable {
  public typealias RawValue = Swift.Bool?
  public init(rawValue: Swift.Bool?)
  public var rawValue: Swift.Bool? {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
@objc(SBDReportCategory) public enum ReportCategory : Swift.Int {
  case suspicious = 0
  case harassing = 1
  case spam = 2
  case inappropriate = 3
}
extension SendbirdChatSDK.ReportCategory : Swift.RawRepresentable, Swift.Codable {
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
  public init?(rawValue: Swift.String)
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
@objc(SBDReactionEventAction) public enum ReactionEventAction : Swift.Int {
  case add = 0
  case delete = 1
}
extension SendbirdChatSDK.ReactionEventAction : Swift.RawRepresentable, Swift.Codable {
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
  public init(rawValue: Swift.String)
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
@objc(SBDLogLevel) public enum LogLevel : Swift.Int, Swift.Comparable, Swift.Codable {
  case verbose
  case debug
  case info
  case warning
  case error
  case none
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  public static func < (lhs: SendbirdChatSDK.LogLevel, rhs: SendbirdChatSDK.LogLevel) -> Swift.Bool
  public static func == (lhs: SendbirdChatSDK.LogLevel, rhs: SendbirdChatSDK.LogLevel) -> Swift.Bool
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc(SBDUserListQueryType) public enum UserListQueryType : Swift.Int {
  case allUsers = 1
  case blockedUsers = 2
  case openChannelParticipants = 3
  case openChannelMutedUsers = 4
  case openChannelBannedUsers = 5
  case filteredUsers = 6
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum __SendbirdProduct : Swift.String {
  case chat
  case calls
  case desk
  case live
  case uikitChat
  case uikitLive
  case swiftuiChat
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum __SendbirdPlatform : Swift.String {
  case ios
  case android
  case javascript
  case unreal
  case unity
  case reactNative
  case flutter
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@_hasMissingDesignatedInitializers @objc(SBDSender) final public class Sender : SendbirdChatSDK.User {
  @objc final public var isBlockedByMe: Swift.Bool {
    get
  }
  @objc final public var role: SendbirdChatSDK.Role {
    get
  }
  required public init(from decoder: any Swift.Decoder) throws
  override final public func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
extension SendbirdChatSDK.Sender {
  @objc override final public func isEqual(_ object: Any?) -> Swift.Bool
  @objc override final public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
}
@objc public protocol Serializable {
  @objc func serialize() -> Foundation.Data?
  @objc static func build(fromSerializedData data: Foundation.Data?) -> Self?
}
@objc(SBDSessionDelegate) public protocol SessionDelegate {
  @objc func sessionTokenDidRequire(successCompletion success: @escaping (Swift.String?) -> Swift.Void, failCompletion fail: @escaping () -> Swift.Void)
  @objc func sessionWasClosed()
  @available(*, unavailable)
  @objc optional func sessionWasExpired()
  @objc optional func sessionWasRefreshed()
  @objc optional func sessionDidHaveError(_ error: SendbirdChatSDK.SBError)
}
extension Swift.UInt16 : Swift.ExpressibleByUnicodeScalarLiteral {
  public typealias UnicodeScalarLiteralType = Swift.UnicodeScalar
  public init(unicodeScalarLiteral scalar: Swift.UnicodeScalar)
}
@_hasMissingDesignatedInitializers @objc(SBDThreadInfo) final public class ThreadInfo : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let replyCount: Swift.Int
  @objc final public let mostRepliedUsers: [SendbirdChatSDK.User]
  @objc final public let lastRepliedAt: Swift.Int64
  final public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc(SBDThreadInfoUpdateEvent) final public class ThreadInfoUpdateEvent : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let threadInfo: SendbirdChatSDK.ThreadInfo
  @objc final public let targetMessageId: Swift.Int64
  @objc final public let channelURL: Swift.String
  @objc final public let channelType: SendbirdChatSDK.ChannelType
  required public init(from decoder: any Swift.Decoder) throws
  final public func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(SBDThreadedMessageListParams) final public class ThreadedMessageListParams : ObjectiveC.NSObject, Foundation.NSCopying {
  @objc final public var previousResultSize: Swift.Int
  @objc final public var nextResultSize: Swift.Int
  @objc final public var isInclusive: Swift.Bool
  @objc final public var reverse: Swift.Bool
  @objc final public var messageTypeFilter: SendbirdChatSDK.MessageTypeFilter
  @objc final public var customType: Swift.String?
  @objc final public var senderUserIds: [Swift.String]?
  @objc final public var includeMetaArray: Swift.Bool
  @objc final public var includeReactions: Swift.Bool
  @objc final public var includeParentMessageInfo: Swift.Bool
  @objc final public var customTypes: [Swift.String]?
  @objc override dynamic public init()
  @objc public init(previousResultSize: Swift.Int = 0, nextResultSize: Swift.Int = 0, isInclusive: Swift.Bool = false, reverse: Swift.Bool = false, messageTypeFilter: SendbirdChatSDK.MessageTypeFilter = .all, customType: Swift.String? = nil, senderUserIds: [Swift.String]? = nil, includeMetaArray: Swift.Bool = false, includeReactions: Swift.Bool = false, includeParentMessageInfo: Swift.Bool = false, customTypes: [Swift.String]? = nil)
  @objc final public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc(SBDThumbnail) final public class Thumbnail : ObjectiveC.NSObject, Swift.Codable {
  @objc final public var url: Swift.String {
    @objc get
  }
  @objc final public var maxSize: CoreFoundation.CGSize {
    get
  }
  @objc final public var realSize: CoreFoundation.CGSize {
    get
  }
  @objc final public var plainURL: Swift.String? {
    get
  }
  required public init(from decoder: any Swift.Decoder) throws
  final public func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
extension SendbirdChatSDK.Thumbnail {
  @objc override final public func isEqual(_ object: Any?) -> Swift.Bool
}
extension SendbirdChatSDK.Thumbnail : SendbirdChatSDK.Serializable {
  @objc final public func serialize() -> Foundation.Data?
  @objc public static func build(fromSerializedData data: Foundation.Data?) -> Self?
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(SBDThumbnailSize) final public class ThumbnailSize : ObjectiveC.NSObject, Swift.Codable {
  @objc final public var maxSize: CoreFoundation.CGSize {
    get
  }
  @objc(makeWithMaxCGSize:) public static func make(maxSize: CoreFoundation.CGSize) -> SendbirdChatSDK.ThumbnailSize
  @objc(makeWithMaxWidth:maxHeight:) public static func make(maxWidth: CoreFoundation.CGFloat, maxHeight: CoreFoundation.CGFloat) -> SendbirdChatSDK.ThumbnailSize
  @objc(makeWithThumbnail:) public static func make(thumbnail: SendbirdChatSDK.Thumbnail) -> SendbirdChatSDK.ThumbnailSize
  final public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
}
@objc(SBDTotalScheduledMessageCountParams) final public class TotalScheduledMessageCountParams : ObjectiveC.NSObject {
  @objc final public let channelURL: Swift.String
  @objc final public var scheduledStatusOptions: SendbirdChatSDK.ScheduledStatusOptions
  @objc final public var messageTypeFilter: SendbirdChatSDK.MessageTypeFilter
  @objc public init(channelURL: Swift.String)
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class UIKitConfigInfo : Swift.Codable {
  final public var lastUpdatedAt: Swift.Int64 {
    get
  }
  final public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc(SBDUIKitConfiguration) final public class UIKitConfiguration : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let jsonPayload: Swift.String
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@_inheritsConvenienceInitializers @objc(SBDUnreadItemCount) final public class UnreadItemCount : ObjectiveC.NSObject, Swift.Codable {
  @objc final public var groupChannelUnreadMessageCount: Swift.UInt {
    get
  }
  @objc final public var nonSuperUnreadMessageCount: Swift.UInt {
    get
  }
  @objc final public var superUnreadMessageCount: Swift.UInt {
    get
  }
  @objc final public var groupChannelUnreadMentionCount: Swift.UInt {
    get
  }
  @objc final public var nonSuperUnreadMentionCount: Swift.UInt {
    get
  }
  @objc final public var superUnreadMentionCount: Swift.UInt {
    get
  }
  @objc final public var groupChannelInvitationCount: Swift.UInt {
    get
  }
  @objc final public var nonSuperInvitationCount: Swift.UInt {
    get
  }
  @objc final public var superInvitationCount: Swift.UInt {
    get
  }
  @objc final public func has(_ key: SendbirdChatSDK.UnreadItemKey) -> Swift.Bool
  @objc final public func unsignedIntegerForKey(_ key: SendbirdChatSDK.UnreadItemKey) -> Swift.UInt
  @objc override dynamic public init()
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
}
@_hasMissingDesignatedInitializers @objc(SBDUnreadMessageCount) open class UnreadMessageCount : ObjectiveC.NSObject {
  final public let groupChannelCount: Swift.Int
  final public let feedChannelCount: Swift.Int
  final public let customTypeUnreadCountMap: [Swift.String : Swift.Int]
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc(SBDUploadableFileInfo) final public class UploadableFileInfo : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let fileURL: Swift.String?
  @objc final public var file: Foundation.Data?
  @objc final public var fileSize: Swift.UInt {
    @objc get
    @objc set
  }
  @objc final public var thumbnailSizes: [SendbirdChatSDK.ThumbnailSize]?
  @objc final public var fileName: Swift.String? {
    @objc get
    @objc set
  }
  @objc final public var mimeType: Swift.String? {
    @objc get
    @objc set
  }
  @objc public init(file: Foundation.Data)
  @objc public init(fileURL: Swift.String)
  final public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
}
@objc(SBDUploadedFileInfo) final public class UploadedFileInfo : ObjectiveC.NSObject, Swift.Codable, Foundation.NSCopying {
  @objc final public var url: Swift.String {
    @objc get
  }
  @objc final public let plainURL: Swift.String
  @objc final public let fileName: Swift.String?
  @objc final public let mimeType: Swift.String?
  @objc final public let fileSize: Swift.UInt
  @objc final public var thumbnails: [SendbirdChatSDK.Thumbnail]?
  required public init(from decoder: any Swift.Decoder) throws
  final public func encode(to encoder: any Swift.Encoder) throws
  @objc final public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @objc deinit
}
@objc extension SendbirdChatSDK.User {
  @objc dynamic public func createMetaData(_ metaData: [Swift.String : Swift.String], completionHandler: SendbirdChatSDK.MetaDataHandler?)
  @objc dynamic public func updateMetaData(_ metaData: [Swift.String : Swift.String], completionHandler: SendbirdChatSDK.MetaDataHandler?)
  @objc dynamic public func deleteMetaData(key: Swift.String, completionHandler: SendbirdChatSDK.SBErrorHandler?)
  @objc dynamic public func deleteAllMetaData(completionHandler: SendbirdChatSDK.SBErrorHandler?)
}
@_hasMissingDesignatedInitializers @objc(SBDUser) open class User : ObjectiveC.NSObject, Swift.Codable, Swift.Identifiable {
  @objc open var id: Swift.String {
    @objc get
  }
  @objc final public let userId: Swift.String
  @objc open var nickname: Swift.String {
    get
  }
  @available(*, unavailable, renamed: "profileURL")
  @objc open var profileUrl: Swift.String? {
    @objc get
  }
  @objc open var profileURL: Swift.String? {
    @objc get
  }
  @available(*, unavailable, renamed: "originalProfileURL")
  @objc open var originalProfileUrl: Swift.String? {
    @objc get
  }
  @objc open var originalProfileURL: Swift.String? {
    @objc get
  }
  @available(*, unavailable, renamed: "plainProfileImageURL")
  @objc open var plainProfileImageUrl: Swift.String? {
    @objc get
  }
  @objc open var plainProfileImageURL: Swift.String? {
    get
  }
  @objc open var connectionStatus: SendbirdChatSDK.UserConnectionStatus {
    get
  }
  @objc open var lastSeenAt: Swift.Int64 {
    get
  }
  @objc final public let isActive: Swift.Bool
  @objc final public let friendDiscoveryKey: Swift.String?
  @objc final public let friendName: Swift.String?
  @objc final public let isBot: Swift.Bool
  @objc open var preferredLanguages: [Swift.String]? {
    get
  }
  @objc open var metaData: [Swift.String : Swift.String] {
    @objc get
  }
  required public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  public typealias ID = Swift.String
  @objc deinit
}
extension SendbirdChatSDK.User : Foundation.NSCopying {
  @objc override dynamic public func isEqual(_ object: Any?) -> Swift.Bool
  @objc dynamic public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
}
extension SendbirdChatSDK.User : SendbirdChatSDK.Serializable {
  @objc dynamic public func serialize() -> Foundation.Data?
  @objc dynamic public class func build(fromSerializedData data: Foundation.Data?) -> Self?
}
@objc(SBDUserEventDelegate) public protocol UserEventDelegate {
  @objc optional func didDiscoverFriends(_ friends: [SendbirdChatSDK.User]?)
  @available(*, deprecated, renamed: "didUpdateTotalUnreadMessageCount(unreadMessageCount:)", message: "This method is deprecated in 4.6.0.")
  @objc optional func didUpdateTotalUnreadMessageCount(_ totalCount: Swift.Int32, totalCountByCustomType: [Swift.String : Swift.Int]?)
  @objc optional func didUpdateTotalUnreadMessageCount(unreadMessageCount: SendbirdChatSDK.UnreadMessageCount)
}
@_hasMissingDesignatedInitializers @objc(SBDUserMessage) open class UserMessage : SendbirdChatSDK.BaseMessage {
  @objc public var poll: SendbirdChatSDK.Poll? {
    get
  }
  @objc final public let translations: [Swift.String : Swift.String]
  @objc public var translationTargetLanguages: [Swift.String] {
    get
  }
  @available(*, unavailable, message: "This property has been removed.")
  @objc public var requestState: SendbirdChatSDK.MessageRequestState? {
    @objc get
  }
  @objc public var messageReviewInfo: SendbirdChatSDK.MessageReviewInfo? {
    get
  }
  override public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
  @discardableResult
  @objc(applyPollUpdateEvent:) public func apply(pollUpdateEvent: SendbirdChatSDK.PollUpdateEvent) -> Swift.Bool
  @discardableResult
  @objc(applyPollVoteEvent:) public func apply(pollVoteEvent: SendbirdChatSDK.PollVoteEvent) -> Swift.Bool
  @discardableResult
  @objc(applyPoll:) public func apply(poll: SendbirdChatSDK.Poll) -> Swift.Bool
  @objc public func getUserMessageParams() -> SendbirdChatSDK.UserMessageCreateParams?
  @objc deinit
}
extension SendbirdChatSDK.UserMessage {
  @objc override dynamic public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
}
extension SendbirdChatSDK.UserMessage {
  @objc final override public class func build(fromSerializedData data: Foundation.Data?) -> Self?
}
@_hasMissingDesignatedInitializers @objc(SBDUserMessageCreateParams) final public class UserMessageCreateParams : SendbirdChatSDK.BaseMessageCreateParams {
  @objc final public var message: Swift.String
  @objc final public var translationTargetLanguages: [Swift.String]?
  @objc final public var pollId: Swift.Int64
  @objc final public var mentionedMessageTemplate: Swift.String?
  @objc public init(message: Swift.String)
  @objc override final public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  override final public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc(SBDUserMessageUpdateParams) final public class UserMessageUpdateParams : SendbirdChatSDK.BaseMessageUpdateParams {
  @objc final public var message: Swift.String?
  @objc final public var pollId: Swift.Int64
  @objc final public var mentionedMessageTemplate: Swift.String?
  @objc override dynamic public init()
  @objc public init(message: Swift.String? = nil)
  @objc override final public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  override final public func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
@objc(SBDMemberStateFilter) public enum MemberStateFilter : Swift.Int {
  case all = 0
  case joinedOnly = 1
  case invitedOnly = 2
  case invitedByFriend = 3
  case invitedByNonFriend = 4
}
extension SendbirdChatSDK.MemberStateFilter : Swift.RawRepresentable, Swift.Codable {
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
  public init(rawValue: Swift.String)
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
@objc(SBDMyMemberStateFilter) public enum MyMemberStateFilter : Swift.Int {
  case all = 0
  case joinedOnly = 1
  case invitedOnly = 2
  case invitedByFriend = 3
  case invitedByNonFriend = 4
}
extension SendbirdChatSDK.MyMemberStateFilter : Swift.RawRepresentable, Swift.Codable {
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
  public init(rawValue: Swift.String)
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
@objc(SBDMemberState) public enum MemberState : Swift.Int {
  case joined = 0
  case invited = 1
  case none = 2
  case left = 3
}
extension SendbirdChatSDK.MemberState : Swift.RawRepresentable, Swift.Codable {
  public typealias RawValue = Swift.String
  public init(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
@objc(SBDRole) public enum Role : Swift.Int {
  case none = 0
  case `operator` = 1
}
extension SendbirdChatSDK.Role : Swift.RawRepresentable, Swift.Codable {
  public typealias RawValue = Swift.String
  public init(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
@objc(SBDMutedState) public enum MutedState : Swift.Int {
  case unmuted = 0
  case muted = 1
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc(SBDMemberListOrder) public enum MemberListOrder : Swift.Int {
  case nicknameAlphabetical = 0
  case operatorThenMemberNicknameAlphabetical = 1
}
extension SendbirdChatSDK.MemberListOrder : Swift.RawRepresentable, Swift.Codable {
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
  public init(rawValue: Swift.String)
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
@objc(SBDRestrictionType) public enum RestrictionType : Swift.Int, Swift.RawRepresentable, Swift.Codable {
  public typealias RawValue = Swift.String
  case muted
  case banned
  public var rawValue: Swift.String {
    get
  }
  public init(rawValue: Swift.String)
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
@_inheritsConvenienceInitializers @objc(SBDUserUpdateParams) final public class UserUpdateParams : ObjectiveC.NSObject, Swift.Encodable {
  @objc final public var nickname: Swift.String?
  @available(*, unavailable, renamed: "profileImageURL")
  @objc final public var profileImageUrl: Swift.String? {
    @objc get
  }
  @objc final public var profileImageURL: Swift.String? {
    @objc get
    @objc set
  }
  @objc final public var profileImageData: Foundation.Data? {
    @objc get
    @objc set
  }
  @objc final public var preferredLanguages: [Swift.String]?
  @objc final public var discoveryKeys: [Swift.String]?
  @objc override dynamic public init()
  final public func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
public let WebsocketDidConnectNotification: Swift.String
public let WebsocketDidDisconnectNotification: Swift.String
public let WebsocketDisconnectionErrorKeyName: Swift.String
public enum CloseCode : Swift.UInt16 {
  case normal
  case goingAway
  case protocolError
  case protocolUnhandledType
  case noStatusReceived
  case encoding
  case policyViolated
  case messageTooBig
  public init?(rawValue: Swift.UInt16)
  public typealias RawValue = Swift.UInt16
  public var rawValue: Swift.UInt16 {
    get
  }
}
public enum ErrorType : Swift.Error {
  case outputStreamWriteError
  case compressionError
  case invalidSSLError
  case writeTimeoutError
  case protocolError
  case upgradeError
  case closeError
  public static func == (a: SendbirdChatSDK.ErrorType, b: SendbirdChatSDK.ErrorType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct WSError : Swift.Error {
  public let type: SendbirdChatSDK.ErrorType
  public let message: Swift.String
  public let code: Swift.Int
}
public protocol WebSocketClient : AnyObject {
  var delegate: (any SendbirdChatSDK.WebSocketDelegate)? { get set }
  var pongDelegate: (any SendbirdChatSDK.WebSocketPongDelegate)? { get set }
  var disableSSLCertValidation: Swift.Bool { get set }
  var overrideTrustHostname: Swift.Bool { get set }
  var desiredTrustHostname: Swift.String? { get set }
  var sslClientCertificate: SendbirdChatSDK.SSLClientCertificate? { get set }
  var security: (any SendbirdChatSDK.SSLTrustValidator)? { get set }
  var enabledSSLCipherSuites: [Security.SSLCipherSuite]? { get set }
  var isConnected: Swift.Bool { get }
  func connect()
  func disconnect(forceTimeout: Foundation.TimeInterval?, closeCode: Swift.UInt16)
  func write(string: Swift.String, completion: (() -> ())?)
  func write(data: Foundation.Data, completion: (() -> ())?)
  func write(ping: Foundation.Data, completion: (() -> ())?)
  func write(pong: Foundation.Data, completion: (() -> ())?)
}
extension SendbirdChatSDK.WebSocketClient {
  public func write(string: Swift.String)
  public func write(data: Foundation.Data)
  public func write(ping: Foundation.Data)
  public func write(pong: Foundation.Data)
  public func disconnect()
}
public struct SSLSettings {
  public let useSSL: Swift.Bool
  public let disableCertValidation: Swift.Bool
  public var overrideTrustHostname: Swift.Bool
  public var desiredTrustHostname: Swift.String?
  public let sslClientCertificate: SendbirdChatSDK.SSLClientCertificate?
  public let cipherSuites: [Security.SSLCipherSuite]?
}
public protocol WSStreamDelegate : AnyObject {
  func newBytesInStream()
  func streamDidError(error: (any Swift.Error)?)
}
public protocol WSStream {
  var delegate: (any SendbirdChatSDK.WSStreamDelegate)? { get set }
  func connect(url: Foundation.URL, port: Swift.Int, timeout: Foundation.TimeInterval, ssl: SendbirdChatSDK.SSLSettings, completion: @escaping (((any Swift.Error)?) -> Swift.Void))
  func write(data: Foundation.Data) -> Swift.Int
  func read() -> Foundation.Data?
  func cleanup()
  func sslTrust() -> (trust: Security.SecTrust?, domain: Swift.String?)
}
@objc @_inheritsConvenienceInitializers open class FoundationStream : ObjectiveC.NSObject, SendbirdChatSDK.WSStream, Foundation.StreamDelegate {
  weak public var delegate: (any SendbirdChatSDK.WSStreamDelegate)?
  public var enableSOCKSProxy: Swift.Bool
  public func connect(url: Foundation.URL, port: Swift.Int, timeout: Foundation.TimeInterval, ssl: SendbirdChatSDK.SSLSettings, completion: @escaping (((any Swift.Error)?) -> Swift.Void))
  public func write(data: Foundation.Data) -> Swift.Int
  public func read() -> Foundation.Data?
  public func cleanup()
  public func sslTrust() -> (trust: Security.SecTrust?, domain: Swift.String?)
  @objc open func stream(_ aStream: Foundation.Stream, handle eventCode: Foundation.Stream.Event)
  @objc override dynamic public init()
  @objc deinit
}
public protocol WebSocketDelegate : AnyObject {
  func websocketDidConnect(socket: any SendbirdChatSDK.WebSocketClient)
  func websocketDidDisconnect(socket: any SendbirdChatSDK.WebSocketClient, error: (any Swift.Error)?)
  func websocketDidReceiveMessage(socket: any SendbirdChatSDK.WebSocketClient, text: Swift.String)
  func websocketDidReceiveData(socket: any SendbirdChatSDK.WebSocketClient, data: Foundation.Data)
}
public protocol WebSocketPongDelegate : AnyObject {
  func websocketDidReceivePong(socket: any SendbirdChatSDK.WebSocketClient, data: Foundation.Data?)
}
public protocol WebSocketAdvancedDelegate : AnyObject {
  func websocketDidConnect(socket: SendbirdChatSDK.WebSocket)
  func websocketDidDisconnect(socket: SendbirdChatSDK.WebSocket, error: (any Swift.Error)?)
  func websocketDidReceiveMessage(socket: SendbirdChatSDK.WebSocket, text: Swift.String, response: SendbirdChatSDK.WebSocket.WSResponse)
  func websocketDidReceiveData(socket: SendbirdChatSDK.WebSocket, data: Foundation.Data, response: SendbirdChatSDK.WebSocket.WSResponse)
  func websocketHttpUpgrade(socket: SendbirdChatSDK.WebSocket, request: Swift.String)
  func websocketHttpUpgrade(socket: SendbirdChatSDK.WebSocket, response: Swift.String)
}
@objc open class WebSocket : ObjectiveC.NSObject, Foundation.StreamDelegate, SendbirdChatSDK.WebSocketClient, SendbirdChatSDK.WSStreamDelegate {
  public enum OpCode : Swift.UInt8 {
    case continueFrame
    case textFrame
    case binaryFrame
    case connectionClose
    case ping
    case pong
    public init?(rawValue: Swift.UInt8)
    public typealias RawValue = Swift.UInt8
    public var rawValue: Swift.UInt8 {
      get
    }
  }
  public static let ErrorDomain: Swift.String
  public var callbackQueue: Dispatch.DispatchQueue
  @_hasMissingDesignatedInitializers public class WSResponse {
    public var code: SendbirdChatSDK.WebSocket.OpCode
    public var frameCount: Swift.Int
    public var buffer: Foundation.NSMutableData?
    final public let firstFrame: Foundation.Date
    @objc deinit
  }
  weak public var delegate: (any SendbirdChatSDK.WebSocketDelegate)?
  weak public var advancedDelegate: (any SendbirdChatSDK.WebSocketAdvancedDelegate)?
  weak public var pongDelegate: (any SendbirdChatSDK.WebSocketPongDelegate)?
  public var onConnect: (() -> Swift.Void)?
  public var onDisconnect: (((any Swift.Error)?) -> Swift.Void)?
  public var onText: ((Swift.String) -> Swift.Void)?
  public var onData: ((Foundation.Data) -> Swift.Void)?
  public var onPong: ((Foundation.Data?) -> Swift.Void)?
  public var onHttpResponseHeaders: (([Swift.String : Swift.String]) -> Swift.Void)?
  public var disableSSLCertValidation: Swift.Bool
  public var overrideTrustHostname: Swift.Bool
  public var desiredTrustHostname: Swift.String?
  public var sslClientCertificate: SendbirdChatSDK.SSLClientCertificate?
  public var enableCompression: Swift.Bool
  public var security: (any SendbirdChatSDK.SSLTrustValidator)?
  public var enabledSSLCipherSuites: [Security.SSLCipherSuite]?
  public var isConnected: Swift.Bool {
    get
  }
  public var request: Foundation.URLRequest
  public var currentURL: Foundation.URL {
    get
  }
  public var respondToPingWithPong: Swift.Bool
  public init(request: Foundation.URLRequest, protocols: [Swift.String]? = nil, stream: any SendbirdChatSDK.WSStream = FoundationStream())
  convenience public init(url: Foundation.URL, protocols: [Swift.String]? = nil)
  convenience public init(url: Foundation.URL, writeQueueQOS: Foundation.QualityOfService, protocols: [Swift.String]? = nil)
  open func connect()
  open func disconnect(forceTimeout: Foundation.TimeInterval? = nil, closeCode: Swift.UInt16 = CloseCode.normal.rawValue)
  open func write(string: Swift.String, completion: (() -> ())? = nil)
  open func write(data: Foundation.Data, completion: (() -> ())? = nil)
  open func write(ping: Foundation.Data, completion: (() -> ())? = nil)
  open func write(pong: Foundation.Data, completion: (() -> ())? = nil)
  public func newBytesInStream()
  public func streamDidError(error: (any Swift.Error)?)
  @objc deinit
}
extension SendbirdChatSDK.ApplicationUserListQuery : Foundation.NSCopying {}
extension SendbirdChatSDK.BannedUserListQuery : Foundation.NSCopying {}
extension SendbirdChatSDK.BlockedUserListQuery : Foundation.NSCopying {}
extension SendbirdChatSDK.CachedDataClearOrder : Swift.Equatable {}
extension SendbirdChatSDK.CachedDataClearOrder : Swift.Hashable {}
extension SendbirdChatSDK.CachedDataClearOrder : Swift.RawRepresentable {}
extension SendbirdChatSDK.ChannelType : Swift.Equatable {}
extension SendbirdChatSDK.ChannelType : Swift.Hashable {}
extension SendbirdChatSDK.ChatError : Swift.Equatable {}
extension SendbirdChatSDK.ChatError : Swift.Hashable {}
extension SendbirdChatSDK.ChatError : Swift.RawRepresentable {}
extension SendbirdChatSDK.CollectionEventSource : Swift.Equatable {}
extension SendbirdChatSDK.CollectionEventSource : Swift.Hashable {}
extension SendbirdChatSDK.CollectionEventSource : Swift.RawRepresentable {}
extension SendbirdChatSDK.MessageCollectionInitPolicy : Swift.Equatable {}
extension SendbirdChatSDK.MessageCollectionInitPolicy : Swift.Hashable {}
extension SendbirdChatSDK.MessageCollectionInitPolicy : Swift.RawRepresentable {}
extension SendbirdChatSDK.NotificationCollectionInitPolicy : Swift.Equatable {}
extension SendbirdChatSDK.NotificationCollectionInitPolicy : Swift.Hashable {}
extension SendbirdChatSDK.NotificationCollectionInitPolicy : Swift.RawRepresentable {}
extension SendbirdChatSDK.CoreError : Swift.Equatable {}
extension SendbirdChatSDK.CoreError : Swift.Hashable {}
extension SendbirdChatSDK.CoreError : Swift.RawRepresentable {}
extension SendbirdChatSDK.Feedback.Rating : Swift.Equatable {}
extension SendbirdChatSDK.Feedback.Rating : Swift.Hashable {}
extension SendbirdChatSDK.Feedback.Status : Swift.Equatable {}
extension SendbirdChatSDK.Feedback.Status : Swift.Hashable {}
extension SendbirdChatSDK.Feedback.Status : Swift.RawRepresentable {}
extension SendbirdChatSDK.FormField.InputType : Swift.Equatable {}
extension SendbirdChatSDK.FormField.InputType : Swift.Hashable {}
extension SendbirdChatSDK.FriendListQuery : Foundation.NSCopying {}
extension SendbirdChatSDK.GroupChannelListQuery : Foundation.NSCopying {}
extension SendbirdChatSDK.GroupChannelListOrder : Swift.Equatable {}
extension SendbirdChatSDK.GroupChannelListOrder : Swift.Hashable {}
extension SendbirdChatSDK.PublicGroupChannelListOrder : Swift.Equatable {}
extension SendbirdChatSDK.PublicGroupChannelListOrder : Swift.Hashable {}
extension SendbirdChatSDK.GroupChannelListQueryType : Swift.Equatable {}
extension SendbirdChatSDK.GroupChannelListQueryType : Swift.Hashable {}
extension SendbirdChatSDK.GroupChannelSuperChannelFilter : Swift.Equatable {}
extension SendbirdChatSDK.GroupChannelSuperChannelFilter : Swift.Hashable {}
extension SendbirdChatSDK.GroupChannelPublicChannelFilter : Swift.Equatable {}
extension SendbirdChatSDK.GroupChannelPublicChannelFilter : Swift.Hashable {}
extension SendbirdChatSDK.PublicGroupChannelMembershipFilter : Swift.Equatable {}
extension SendbirdChatSDK.PublicGroupChannelMembershipFilter : Swift.Hashable {}
extension SendbirdChatSDK.GroupChannelOperatorFilter : Swift.Equatable {}
extension SendbirdChatSDK.GroupChannelOperatorFilter : Swift.Hashable {}
extension SendbirdChatSDK.GroupChannelMutedMemberFilter : Swift.Equatable {}
extension SendbirdChatSDK.GroupChannelMutedMemberFilter : Swift.Hashable {}
extension SendbirdChatSDK.UnreadChannelFilter : Swift.Equatable {}
extension SendbirdChatSDK.UnreadChannelFilter : Swift.Hashable {}
extension SendbirdChatSDK.GroupChannelHiddenState : Swift.Equatable {}
extension SendbirdChatSDK.GroupChannelHiddenState : Swift.Hashable {}
extension SendbirdChatSDK.ChannelHiddenStateFilter : Swift.Equatable {}
extension SendbirdChatSDK.ChannelHiddenStateFilter : Swift.Hashable {}
extension SendbirdChatSDK.GroupChannelPushTriggerOption : Swift.Equatable {}
extension SendbirdChatSDK.GroupChannelPushTriggerOption : Swift.Hashable {}
extension SendbirdChatSDK.PushTokenType : Swift.Equatable {}
extension SendbirdChatSDK.PushTokenType : Swift.Hashable {}
extension SendbirdChatSDK.ChannelMetaCountersUpdateMode : Swift.Equatable {}
extension SendbirdChatSDK.ChannelMetaCountersUpdateMode : Swift.Hashable {}
extension SendbirdChatSDK.MemberListQuery : Foundation.NSCopying {}
extension SendbirdChatSDK.MessageReviewStatus : Swift.Equatable {}
extension SendbirdChatSDK.MessageReviewStatus : Swift.Hashable {}
extension SendbirdChatSDK.MessageSearchQuery : Foundation.NSCopying {}
extension SendbirdChatSDK.MessageTypeFilter : Swift.Equatable {}
extension SendbirdChatSDK.MessageTypeFilter : Swift.Hashable {}
extension SendbirdChatSDK.MessageTypeFilter : Swift.RawRepresentable {}
extension SendbirdChatSDK.CountPreference : Swift.Equatable {}
extension SendbirdChatSDK.CountPreference : Swift.Hashable {}
extension SendbirdChatSDK.MentionType : Swift.Equatable {}
extension SendbirdChatSDK.MentionType : Swift.Hashable {}
extension SendbirdChatSDK.MessageSendingStatus : Swift.Equatable {}
extension SendbirdChatSDK.MessageSendingStatus : Swift.Hashable {}
extension SendbirdChatSDK.MessageSendingStatus : Swift.RawRepresentable {}
extension SendbirdChatSDK.MessageSearchQueryOrder : Swift.Equatable {}
extension SendbirdChatSDK.MessageSearchQueryOrder : Swift.Hashable {}
extension SendbirdChatSDK.ReplyType : Swift.Equatable {}
extension SendbirdChatSDK.ReplyType : Swift.Hashable {}
extension SendbirdChatSDK.MutedUserListQuery : Foundation.NSCopying {}
extension SendbirdChatSDK.NotificationMessageStatus : Swift.Equatable {}
extension SendbirdChatSDK.NotificationMessageStatus : Swift.Hashable {}
extension SendbirdChatSDK.NotificationPriority : Swift.Equatable {}
extension SendbirdChatSDK.NotificationPriority : Swift.Hashable {}
extension SendbirdChatSDK.OperatorListQuery : Foundation.NSCopying {}
extension SendbirdChatSDK.ParticipantListQuery : Foundation.NSCopying {}
extension SendbirdChatSDK.PinnedMessageListQuery : Foundation.NSCopying {}
extension SendbirdChatSDK.PollListQuery : Foundation.NSCopying {}
extension SendbirdChatSDK.PollStatus : Swift.Equatable {}
extension SendbirdChatSDK.PollStatus : Swift.Hashable {}
extension SendbirdChatSDK.PollUpdateEvent : Swift.Decodable {}
extension SendbirdChatSDK.PreviousMessageListQuery : Foundation.NSCopying {}
extension SendbirdChatSDK.PublicGroupChannelListQuery : Foundation.NSCopying {}
extension SendbirdChatSDK.PushTokenRegistrationStatus : Swift.Equatable {}
extension SendbirdChatSDK.PushTokenRegistrationStatus : Swift.Hashable {}
extension SendbirdChatSDK.PushTokenRegistrationStatus : Swift.RawRepresentable {}
extension SendbirdChatSDK.PushNotificationDeliveryOption : Swift.Equatable {}
extension SendbirdChatSDK.PushNotificationDeliveryOption : Swift.Hashable {}
extension SendbirdChatSDK.PushTriggerOption : Swift.Equatable {}
extension SendbirdChatSDK.PushTriggerOption : Swift.Hashable {}
extension SendbirdChatSDK.ScheduledMessageListOrder : Swift.Equatable {}
extension SendbirdChatSDK.ScheduledMessageListOrder : Swift.Hashable {}
extension SendbirdChatSDK.ScheduledMessageListOrder : Swift.RawRepresentable {}
extension SendbirdChatSDK.ScheduledStatus : Swift.Equatable {}
extension SendbirdChatSDK.ScheduledStatus : Swift.Hashable {}
extension SendbirdChatSDK.InitializationState : Swift.Equatable {}
extension SendbirdChatSDK.InitializationState : Swift.Hashable {}
extension SendbirdChatSDK.InitializationState : Swift.RawRepresentable {}
extension SendbirdChatSDK.WebSocketConnectionState : Swift.Equatable {}
extension SendbirdChatSDK.WebSocketConnectionState : Swift.Hashable {}
extension SendbirdChatSDK.WebSocketConnectionState : Swift.RawRepresentable {}
extension SendbirdChatSDK.UserConnectionStatus : Swift.Equatable {}
extension SendbirdChatSDK.UserConnectionStatus : Swift.Hashable {}
extension SendbirdChatSDK.ReportCategory : Swift.Equatable {}
extension SendbirdChatSDK.ReportCategory : Swift.Hashable {}
extension SendbirdChatSDK.ReactionEventAction : Swift.Equatable {}
extension SendbirdChatSDK.ReactionEventAction : Swift.Hashable {}
extension SendbirdChatSDK.LogLevel : Swift.Hashable {}
extension SendbirdChatSDK.LogLevel : Swift.RawRepresentable {}
extension SendbirdChatSDK.UserListQueryType : Swift.Equatable {}
extension SendbirdChatSDK.UserListQueryType : Swift.Hashable {}
extension SendbirdChatSDK.UserListQueryType : Swift.RawRepresentable {}
extension SendbirdChatSDK.__SendbirdProduct : Swift.Equatable {}
extension SendbirdChatSDK.__SendbirdProduct : Swift.Hashable {}
extension SendbirdChatSDK.__SendbirdProduct : Swift.RawRepresentable {}
extension SendbirdChatSDK.__SendbirdPlatform : Swift.Equatable {}
extension SendbirdChatSDK.__SendbirdPlatform : Swift.Hashable {}
extension SendbirdChatSDK.__SendbirdPlatform : Swift.RawRepresentable {}
extension SendbirdChatSDK.MemberStateFilter : Swift.Equatable {}
extension SendbirdChatSDK.MemberStateFilter : Swift.Hashable {}
extension SendbirdChatSDK.MyMemberStateFilter : Swift.Equatable {}
extension SendbirdChatSDK.MyMemberStateFilter : Swift.Hashable {}
extension SendbirdChatSDK.MemberState : Swift.Equatable {}
extension SendbirdChatSDK.MemberState : Swift.Hashable {}
extension SendbirdChatSDK.Role : Swift.Equatable {}
extension SendbirdChatSDK.Role : Swift.Hashable {}
extension SendbirdChatSDK.MutedState : Swift.Equatable {}
extension SendbirdChatSDK.MutedState : Swift.Hashable {}
extension SendbirdChatSDK.MutedState : Swift.RawRepresentable {}
extension SendbirdChatSDK.MemberListOrder : Swift.Equatable {}
extension SendbirdChatSDK.MemberListOrder : Swift.Hashable {}
extension SendbirdChatSDK.RestrictionType : Swift.Equatable {}
extension SendbirdChatSDK.RestrictionType : Swift.Hashable {}
extension SendbirdChatSDK.CloseCode : Swift.Equatable {}
extension SendbirdChatSDK.CloseCode : Swift.Hashable {}
extension SendbirdChatSDK.CloseCode : Swift.RawRepresentable {}
extension SendbirdChatSDK.ErrorType : Swift.Equatable {}
extension SendbirdChatSDK.ErrorType : Swift.Hashable {}
extension SendbirdChatSDK.WebSocket.OpCode : Swift.Equatable {}
extension SendbirdChatSDK.WebSocket.OpCode : Swift.Hashable {}
extension SendbirdChatSDK.WebSocket.OpCode : Swift.RawRepresentable {}
