#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 6.1.2 effective-5.10 (swiftlang-6.1.2.1.2 clang-1700.0.13.5)
#ifndef SENDBIRDDESK_SWIFT_H
#define SENDBIRDDESK_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wnon-modular-include-in-framework-module"
#if defined(__arm64e__) && __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-macro-identifier"
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
# ifndef __ptrauth_swift_class_method_pointer
#  define __ptrauth_swift_class_method_pointer(x)
# endif
#pragma clang diagnostic pop
#endif
#pragma clang diagnostic pop
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef unsigned char char8_t;
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if !defined(SWIFT_C_INLINE_THUNK)
# if __has_attribute(always_inline)
# if __has_attribute(nodebug)
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline)) __attribute__((nodebug))
# else
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline))
# endif
# else
#  define SWIFT_C_INLINE_THUNK inline
# endif
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Dispatch;
@import Foundation;
@import ObjectiveC;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"
#pragma clang diagnostic ignored "-Wunsafe-buffer-usage"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="SendBirdDesk",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)

@class NSString;
/// This class represents an agent who chats with a customer. It is not a subclass of <a href="https://docs.sendbird.com/ref/ios/Classes/SBDUser.html">SBDUser</a> of SendBird, but this class and <a href="https://docs.sendbird.com/ref/ios/Classes/SBDUser.html">SBDUser</a> class share the same identification.
SWIFT_CLASS("_TtC12SendBirdDesk10SBDSKAgent")
@interface SBDSKAgent : NSObject
/// The identification of the agent. There is the same user in SendBird who has the same identification.
@property (nonatomic, readonly, copy) NSString * _Nullable sendBirdId;
/// The name of the agent.
@property (nonatomic, readonly, copy) NSString * _Nullable name;
/// The profile image’s URL of the agent.
@property (nonatomic, readonly, copy) NSString * _Nullable profileUrl;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class SBDSKFAQResult;
@class SBDBaseMessage;
/// Class that represents FAQ data.
SWIFT_CLASS("_TtC12SendBirdDesk12SBDSKFAQData")
@interface SBDSKFAQData : NSObject
/// File ID of the FAQ
/// since:
/// 1.0.15
@property (nonatomic, readonly) int64_t faqFileId;
/// Type of the FAQ
/// since:
/// 1.0.15
@property (nonatomic, readonly, copy) NSString * _Nonnull type;
/// List of FAQ Results
/// since:
/// 1.0.15
@property (nonatomic, readonly, copy) NSArray<SBDSKFAQResult *> * _Nonnull faqResults;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Initializes SBDSKFAQData with given SBDBaseMessage
/// since:
/// 1.0.15
- (nullable instancetype)initWithMessage:(SBDBaseMessage * _Nonnull)message OBJC_DESIGNATED_INITIALIZER;
@end

SWIFT_CLASS("_TtCC12SendBirdDesk12SBDSKFAQData14SBDSKFAQResult")
@interface SBDSKFAQResult : NSObject
/// Category of the question result
/// since:
/// 1.0.15
@property (nonatomic, readonly, copy) NSString * _Nullable category;
/// Question of the question result
/// since:
/// 1.0.15
@property (nonatomic, readonly, copy) NSString * _Nullable question;
/// Category of the question result
/// since:
/// 1.0.15
@property (nonatomic, readonly, copy) NSString * _Nullable answer;
/// Keyword of the question result
/// since:
/// 1.0.15
@property (nonatomic, readonly, copy) NSString * _Nullable keyword;
/// URL of the question result
/// since:
/// 1.0.15
@property (nonatomic, readonly, copy) NSString * _Nullable url;
/// ImageURL of the question result
/// since:
/// 1.0.15
@property (nonatomic, readonly, copy) NSString * _Nullable imageURL;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class SBError;
@class SBDBaseChannel;
/// This class is a main class of Sendbird Desk.
SWIFT_CLASS("_TtC12SendBirdDesk9SBDSKMain")
@interface SBDSKMain : NSObject
/// Initializes Sendbird Desk.
///
/// returns:
/// If true, the initialization is successful. This method has to be called after <a href="https://docs.sendbird.com/ref/ios/Classes/SBDMain.html#//api/name/initWithApplicationId:">initializing Sendbird SDK</a>.
+ (BOOL)initializeDesk;
/// Returns the version of Sendbird Desk.
///
/// returns:
/// The version of Sendbird Desk.
+ (NSString * _Nonnull)getSDKVersion SWIFT_WARN_UNUSED_RESULT;
/// Sets a dispatch queue for every completion handler in Sendbird Desk.
/// \param queue A dispatch queue that will be used for every completion handler.
///
+ (void)setCompletionHandlerDelegateQueue:(dispatch_queue_t _Nonnull)queue;
/// Gets an authentication with a user ID and an access token.
/// \param userId User ID
///
/// \param accessToken Access Token
///
/// \param completionHandler The handler block to execute. If the method updates this ticket successfully, the <code>error</code> will be nil.
///
+ (void)authenticateWithUserId:(NSString * _Nonnull)userId accessToken:(NSString * _Nullable)accessToken completionHandler:(void (^ _Nullable)(SBError * _Nullable))completionHandler;
/// Authenticates the current user with Sendbird Desk using the provided credentials.
/// important:
/// This method requires that <code>SBDSKMain.initializeDesk()</code> is called beforehand.
/// since:
/// [NEXT_VERSION]
/// \param userId The unique user ID to authenticate.
///
/// \param accessToken (Optional) The access token associated with the user.
///
/// \param language (Optional) Specify the language in IETF BCP 47 format. An example would be “en” and “ja”.
///
/// \param completionHandler A closure that is called when the authentication process completes.
/// If authentication is successful, the <code>error</code> will be <code>nil</code>. Otherwise, it contains
/// the error object describing the issue.
///
+ (void)authenticateWithUserId:(NSString * _Nonnull)userId accessToken:(NSString * _Nullable)accessToken language:(NSString * _Nullable)language completionHandler:(void (^ _Nullable)(SBError * _Nullable))completionHandler;
/// Checks whether the <code>channel</code> is a desk channel or not.
/// \param channel The channel instance that is necessary to check.
///
///
/// returns:
/// If true, the <code>channel</code> is a desk channel.
+ (BOOL)isDeskChannel:(SBDBaseChannel * _Nonnull)channel SWIFT_WARN_UNUSED_RESULT;
/// Sets the current customer’s custom fields. The custom fields has a key and a value in string type.
/// since:
/// 1.0.5
/// \param customFields The current customer’s custom fields.
///
/// \param completionHandler The handler block to execute. If the method sets successfully, the <code>error</code> will be nil.
///
+ (void)setCustomerCustomFields:(NSDictionary<NSString *, NSString *> * _Nonnull)customFields completionHandler:(void (^ _Nullable)(SBError * _Nullable))completionHandler;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// This class represents a channel that is related to a <code>SBDSKTicket</code>. It contains a string <code>name</code> and string <code>channelUrl</code> of the related channel.
/// since:
/// 1.0.7
SWIFT_CLASS("_TtC12SendBirdDesk19SBDSKRelatedChannel")
@interface SBDSKRelatedChannel : NSObject
/// The name of the related channel.
/// since:
/// 1.0.7
@property (nonatomic, copy) NSString * _Nonnull name;
/// The channel url of the related channel.
/// since:
/// 1.0.7
@property (nonatomic, copy) NSString * _Nonnull channelUrl;
@end

@class SBDGroupChannel;
enum SBDSKTicketPriority : NSInteger;
/// This class represents a ticket that identifies a chat between an <em>agent</em> and a customer.
SWIFT_CLASS("_TtC12SendBirdDesk11SBDSKTicket")
@interface SBDSKTicket : NSObject
/// The identification for a ticket. This property has a unique value.
@property (nonatomic, readonly) int64_t ticketId;
/// The title of this ticket.
@property (nonatomic, readonly, copy) NSString * _Nullable title;
/// The status of this ticket.
@property (nonatomic, readonly, copy) NSString * _Nullable status SWIFT_DEPRECATED_MSG("This property has been deprecated. Please use `status2` instead.");
/// The status2 of this ticket.
/// since:
/// 1.1.2
@property (nonatomic, readonly, copy) NSString * _Nullable status2;
/// The agent who is in charge of this ticket.
@property (nonatomic, readonly, strong) SBDSKAgent * _Nullable agent;
/// The channel where the <span>agent</span> and the customer are chatting.
@property (nonatomic, readonly, strong) SBDGroupChannel * _Nullable channel;
/// A dictionary that contains information you want to deliver. The key and the value of the dictionary should be a type of <code>NSString</code>.
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSString *> * _Nonnull customFields;
/// The priority of this ticket.
@property (nonatomic, readonly) enum SBDSKTicketPriority priority;
/// The related channels of this ticket.
@property (nonatomic, readonly, copy) NSArray<SBDSKRelatedChannel *> * _Nonnull relatedChannels;
/// The time in seconds taken from a customer’s first message to an agent’s first response.
/// since:
/// 1.1.4
@property (nonatomic, readonly) int64_t firstResponseTime;
/// The date and time when the customer sent the first message, in ISO 8601 format.
/// since:
/// 1.1.4
@property (nonatomic, readonly, copy) NSString * _Nonnull issuedAt;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class SBDUserMessage;
@interface SBDSKTicket (SWIFT_EXTENSION(SendBirdDesk))
/// Refreshes this ticket. After invoking this method, this ticket is updated with the latest data.
/// \param completionHandler The handler block to execute. If the method updates this ticket successfully, the <code>error</code> will be nil.
///
- (void)refreshWithCompletionHandler:(void (^ _Nullable)(SBDSKTicket * _Nullable, SBError * _Nullable))completionHandler;
/// Closes this ticket.
/// since:
/// 1.0.11
/// \param comment A comment for this ticket.
///
/// \param completionHandler Callback handler.
///
- (void)closeWithComment:(NSString * _Nullable)comment completionHandler:(void (^ _Nullable)(SBDSKTicket * _Nullable, SBError * _Nullable))completionHandler;
/// Confirms the end of the chat.
/// \param message The message object.
///
/// \param confirm The value that a customer uses in order to represent the confirmation of this ticket.
///
/// \param completionHandler The handler block to execute. If the method confirms the end of this ticket, the <code>error</code> will be nil.
///
+ (void)confirmEndOfChatWithMessage:(SBDUserMessage * _Nonnull)message confirm:(BOOL)confirm completionHandler:(void (^ _Nullable)(SBDSKTicket * _Nullable, SBError * _Nullable))completionHandler;
/// Creates a new ticket with information.
/// \param title The title of a new ticket.
///
/// \param userName The customer’s name.
///
/// \param completionHandler The handler block to execute. If the method creates a ticket successfully, the <code>ticket</code> object will be valid and the <code>error</code> will be nil.
///
+ (void)createTicketWithTitle:(NSString * _Nullable)title userName:(NSString * _Nullable)userName completionHandler:(void (^ _Nullable)(SBDSKTicket * _Nullable, SBError * _Nullable))completionHandler;
/// Creates a new ticket with information.
/// since:
/// 1.0.6
/// \param title The title of a new ticket.
///
/// \param userName The customer’s name.
///
/// \param priority The priority level of ticket.
///
/// \param completionHandler The handler block to execute. If the method creates a ticket successfully, the <code>ticket</code> object will be valid and the <code>error</code> will be nil.
///
+ (void)createTicketWithTitle:(NSString * _Nullable)title userName:(NSString * _Nullable)userName priority:(enum SBDSKTicketPriority)priority completionHandler:(void (^ _Nullable)(SBDSKTicket * _Nullable, SBError * _Nullable))completionHandler;
/// Creates a new ticket with information.
/// since:
/// 1.0.4
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     title: The title of a new ticket.
///   </li>
///   <li>
///     userName: The customer’s name.
///   </li>
///   <li>
///     groupKey: The agent group key.
///   </li>
///   <li>
///     customFields: The custom fields that the admin already sets on dashboard.
///   </li>
///   <li>
///     completionHandler: The handler block to execute. If the method creates a ticket successfully, the <code>ticket</code> object will be valid and the <code>error</code> will be nil.
///   </li>
/// </ul>
+ (void)createTicketWithTitle:(NSString * _Nullable)title userName:(NSString * _Nullable)userName groupKey:(NSString * _Nullable)groupKey customFields:(NSDictionary<NSString *, NSString *> * _Nullable)customFields completionHandler:(void (^ _Nullable)(SBDSKTicket * _Nullable, SBError * _Nullable))completionHandler;
/// Creates a new ticket with information.
/// since:
/// 1.0.6
/// \param title The title of a new ticket.
///
/// \param userName The customer’s name.
///
/// \param groupKey The agent group key.
///
/// \param customFields The custom fields that the admin already sets on dashboard.
///
/// \param priority The priority level of ticket.
///
/// \param completionHandler The handler block to execute. If the method creates a ticket successfully, the <code>ticket</code> object will be valid and the <code>error</code> will be nil.
///
+ (void)createTicketWithTitle:(NSString * _Nullable)title userName:(NSString * _Nullable)userName groupKey:(NSString * _Nullable)groupKey customFields:(NSDictionary<NSString *, NSString *> * _Nullable)customFields priority:(enum SBDSKTicketPriority)priority completionHandler:(void (^ _Nullable)(SBDSKTicket * _Nullable, SBError * _Nullable))completionHandler;
/// Creates a new ticket with information.
/// since:
/// 1.0.7
/// \param title The title of a new ticket.
///
/// \param userName The customer’s name.
///
/// \param relatedChannels List of Urls of the channels related with the ticket.
///
/// \param completionHandler The handler block to execute. If the method creates a ticket successfully, the <code>ticket</code> object will be valid and the <code>error</code> will be nil.
///
+ (void)createTicketWithTitle:(NSString * _Nullable)title userName:(NSString * _Nullable)userName relatedChannels:(NSArray<NSString *> * _Nullable)relatedChannels completionHandler:(void (^ _Nullable)(SBDSKTicket * _Nullable, SBError * _Nullable))completionHandler;
/// Creates a new ticket with information.
/// since:
/// 1.0.7
/// \param title The title of a new ticket.
///
/// \param userName The customer’s name.
///
/// \param groupKey The agent group key.
///
/// \param customFields The custom fields that the admin already sets on dashboard.
///
/// \param priority The priority level of ticket.
///
/// \param relatedChannels List of Urls of the channels related with the ticket.
/// - completionHandler: The handler block to execute. If the method creates a ticket successfully, the <code>ticket</code> object will be valid and the <code>error</code> will be nil.
///
+ (void)createTicketWithTitle:(NSString * _Nullable)title userName:(NSString * _Nullable)userName groupKey:(NSString * _Nullable)groupKey customFields:(NSDictionary<NSString *, NSString *> * _Nullable)customFields priority:(enum SBDSKTicketPriority)priority relatedChannels:(NSArray<NSString *> * _Nullable)relatedChannels completionHandler:(void (^ _Nullable)(SBDSKTicket * _Nullable, SBError * _Nullable))completionHandler;
/// Creates a new ticket with information.
/// since:
/// 1.0.7
/// \param title The title of a new ticket.
///
/// \param userName The customer’s name.
///
/// \param groupKey The agent group key.
///
/// \param customFields The custom fields that the admin already sets on dashboard.
///
/// \param priority The priority level of ticket.
///
/// \param relatedChannels List of Urls of the channels related with the ticket.
///
/// \param botKey Key of a bot to assign to.
/// - completionHandler: The handler block to execute. If the method creates a ticket successfully, the <code>ticket</code> object will be valid and the <code>error</code> will be nil.
///
+ (void)createTicketWithTitle:(NSString * _Nullable)title userName:(NSString * _Nullable)userName groupKey:(NSString * _Nullable)groupKey customFields:(NSDictionary<NSString *, NSString *> * _Nullable)customFields priority:(enum SBDSKTicketPriority)priority relatedChannels:(NSArray<NSString *> * _Nullable)relatedChannels botKey:(NSString * _Nullable)botKey completionHandler:(void (^ _Nullable)(SBDSKTicket * _Nullable, SBError * _Nullable))completionHandler;
/// Gets the count of the opened tickets.
/// \param completionHandler The handler block to execute. The <code>count</code> is the count of the opened tickets. If the method gets the count successfully, the <code>error</code> will be nil.
///
+ (void)getOpenCountWithCompletionHandler:(void (^ _Nullable)(NSInteger, SBError * _Nullable))completionHandler;
/// Gets the list of the opened tickets with the offset and custom data filter.
/// since:
/// 1.0.3
/// \param offset The offset that represents the position of the full list. It must be 0 in order to get the latest list.
///
/// \param completionHandler The handler block to execute. The <code>tickets</code> is the array of the opened tickets. The array can be empty, but it doesn’t mean that there is an error. If there is the next page of the list, the <code>hasNext</code> will be YES. If the method gets the list
///
+ (void)getOpenedListWithOffset:(NSInteger)offset completionHandler:(void (^ _Nullable)(NSArray<SBDSKTicket *> * _Nullable, BOOL, SBError * _Nullable))completionHandler;
/// Gets the list of the opened tickets with the offset and custom data filter.
/// since:
/// 1.0.3
/// \param offset The offset that represents the position of the full list. It must be 0 in order to get the latest list.
///
/// \param customFieldFilter The custom field filter.
///
/// \param completionHandler The handler block to execute. The <code>tickets</code> is the array of the opened tickets. The array can be empty, but it doesn’t mean that there is an error. If there is the next page of the list, the <code>hasNext</code> will be YES. If the method gets the list
///
+ (void)getOpenedListWithOffset:(NSInteger)offset customFieldFilter:(NSDictionary<NSString *, NSString *> * _Nullable)customFieldFilter completionHandler:(void (^ _Nullable)(NSArray<SBDSKTicket *> * _Nullable, BOOL, SBError * _Nullable))completionHandler;
/// Gets the list of the closed tickets with the offset.
/// \param offset The offset that represents the position of the full list.
///
/// \param completionHandler The handler block to execute. The <code>tickets</code> is the array of the closed tickets. The array can be empty, but it doesn’t mean that there is an error. If there is the next page of the list, the <code>hasNext</code> will be YES. If the method gets the list successfully, the <code>error</code> will be nil.
///
+ (void)getClosedListWithOffset:(NSInteger)offset completionHandler:(void (^ _Nullable)(NSArray<SBDSKTicket *> * _Nullable, BOOL, SBError * _Nullable))completionHandler;
/// Gets the list of the closed tickets with the offset.
/// \param offset The offset that represents the position of the full list.
///
/// \param customFieldFilter The custom field filter.
///
/// \param completionHandler The handler block to execute. The <code>tickets</code> is the array of the closed tickets. The array can be empty, but it doesn’t mean that there is an error. If there is the next page of the list, the <code>hasNext</code> will be YES. If the method gets the list successfully, the <code>error</code> will be nil.
///
+ (void)getClosedListWithOffset:(NSInteger)offset customFieldFilter:(NSDictionary<NSString *, NSString *> * _Nullable)customFieldFilter completionHandler:(void (^ _Nullable)(NSArray<SBDSKTicket *> * _Nullable, BOOL, SBError * _Nullable))completionHandler;
/// Gets a ticket by the group <span>channel</span> URL.
/// \param channelUrl The group <span>channel</span> URL that is connected with a ticket.
///
/// \param completionHandler The handler block to execute. If the method gets a ticket successfully, the <code>error</code> will be nil.
///
+ (void)getByChannelUrl:(NSString * _Nonnull)channelUrl completionHandler:(void (^ _Nullable)(SBDSKTicket * _Nullable, SBError * _Nullable))completionHandler;
/// Reopens the ticket.
/// @since 1.0.3
/// \param completionHandler The handler block to execute. If the method gets a ticket successfully, the <code>error</code> will be nil.
///
- (void)reopenWithCompletionHandler:(void (^ _Nullable)(SBDSKTicket * _Nullable, SBError * _Nullable))completionHandler;
/// Submits the customer’s feedback.
/// since:
/// 1.0.5
/// \param message The message object for the feedback.
///
/// \param score The score.
///
/// \param comment The comment.
///
/// \param completionHandler The handler block to execute. If the method submits the feedback, the <code>error</code> will be nil.
///
+ (void)submitFeedbackWithMessage:(SBDUserMessage * _Nonnull)message score:(NSInteger)score comment:(NSString * _Nullable)comment completionHandler:(void (^ _Nullable)(SBDSKTicket * _Nullable, SBError * _Nullable))completionHandler;
/// Sets the specific ticket’s custom fields. The custom fields has a key and a value in string type.
/// since:
/// 1.0.6
/// \param customFields The specific ticket’s custom fields.
///
/// \param completionHandler The handler block to execute. If the method sets successfully, the <code>error</code> will be nil.
///
- (void)setCustomFields:(NSDictionary<NSString *, NSString *> * _Nonnull)customFields completionHandler:(void (^ _Nullable)(SBError * _Nullable))completionHandler;
/// Sets the specific ticket’s priority. The priority has a string type key and a <code>SBDSKTicketPriority</code> type value
/// since:
/// 1.0.6
/// \param priority The specific ticket’s priority.
///
/// \param completionHandler The handler block to execute. If the method sets successfully, the <code>error</code> will be nil.
///
- (void)setPriority:(enum SBDSKTicketPriority)priority completionHandler:(void (^ _Nullable)(SBError * _Nullable))completionHandler;
/// Sets the specific ticket’s related channels. The method accepts an array of string, and updates the <code>SBDSKRelatedChannel</code> array of the ticket.
/// since:
/// 1.0.7
/// \param relatedChannels The specific ticket’s related channels.
///
/// \param completionHandler The handler block to execute. If the method sets successfully, the <code>error</code> will be nil.
///
- (void)setRelatedChannels:(NSArray<NSString *> * _Nonnull)relatedChannels completionHandler:(void (^ _Nullable)(SBError * _Nullable))completionHandler;
/// Cancel a ticket.
/// since:
/// 1.0.14
/// \param groupKeyForTransfer group key to transfer this ticket to. Optional.
///
/// \param completionHandler The handler block to execute. If the method sets successfully, the <code>error</code> will be nil.
///
- (void)cancelWithGroupKeyForTransfer:(NSString * _Nullable)groupKeyForTransfer completionHandler:(void (^ _Nullable)(SBDSKTicket * _Nullable, SBError * _Nullable))completionHandler;
/// Select a question
/// since:
/// 1.0.14
/// \param faqFileId File id of FAQ question to select.
///
/// \param question Question to select.
///
/// \param completionHandler The handler block to execute. If the method sets successfully, the <code>error</code> will be nil.
///
- (void)selectQuestionWithFaqFileId:(int64_t)faqFileId question:(NSString * _Nonnull)question completionHandler:(void (^ _Nullable)(SBError * _Nullable))completionHandler;
@end

typedef SWIFT_ENUM(NSInteger, SBDSKTicketPriority, open) {
  SBDSKTicketPriorityLow = 0,
  SBDSKTicketPriorityMedium = 1,
  SBDSKTicketPriorityHigh = 2,
  SBDSKTicketPriorityUrgent = 3,
};

#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#if defined(__cplusplus)
#endif
#pragma clang diagnostic pop
#endif

#elif defined(__x86_64__) && __x86_64__
// Generated by Apple Swift version 6.1.2 effective-5.10 (swiftlang-6.1.2.1.2 clang-1700.0.13.5)
#ifndef SENDBIRDDESK_SWIFT_H
#define SENDBIRDDESK_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wnon-modular-include-in-framework-module"
#if defined(__arm64e__) && __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-macro-identifier"
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
# ifndef __ptrauth_swift_class_method_pointer
#  define __ptrauth_swift_class_method_pointer(x)
# endif
#pragma clang diagnostic pop
#endif
#pragma clang diagnostic pop
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef unsigned char char8_t;
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if !defined(SWIFT_C_INLINE_THUNK)
# if __has_attribute(always_inline)
# if __has_attribute(nodebug)
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline)) __attribute__((nodebug))
# else
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline))
# endif
# else
#  define SWIFT_C_INLINE_THUNK inline
# endif
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Dispatch;
@import Foundation;
@import ObjectiveC;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"
#pragma clang diagnostic ignored "-Wunsafe-buffer-usage"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="SendBirdDesk",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)

@class NSString;
/// This class represents an agent who chats with a customer. It is not a subclass of <a href="https://docs.sendbird.com/ref/ios/Classes/SBDUser.html">SBDUser</a> of SendBird, but this class and <a href="https://docs.sendbird.com/ref/ios/Classes/SBDUser.html">SBDUser</a> class share the same identification.
SWIFT_CLASS("_TtC12SendBirdDesk10SBDSKAgent")
@interface SBDSKAgent : NSObject
/// The identification of the agent. There is the same user in SendBird who has the same identification.
@property (nonatomic, readonly, copy) NSString * _Nullable sendBirdId;
/// The name of the agent.
@property (nonatomic, readonly, copy) NSString * _Nullable name;
/// The profile image’s URL of the agent.
@property (nonatomic, readonly, copy) NSString * _Nullable profileUrl;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class SBDSKFAQResult;
@class SBDBaseMessage;
/// Class that represents FAQ data.
SWIFT_CLASS("_TtC12SendBirdDesk12SBDSKFAQData")
@interface SBDSKFAQData : NSObject
/// File ID of the FAQ
/// since:
/// 1.0.15
@property (nonatomic, readonly) int64_t faqFileId;
/// Type of the FAQ
/// since:
/// 1.0.15
@property (nonatomic, readonly, copy) NSString * _Nonnull type;
/// List of FAQ Results
/// since:
/// 1.0.15
@property (nonatomic, readonly, copy) NSArray<SBDSKFAQResult *> * _Nonnull faqResults;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Initializes SBDSKFAQData with given SBDBaseMessage
/// since:
/// 1.0.15
- (nullable instancetype)initWithMessage:(SBDBaseMessage * _Nonnull)message OBJC_DESIGNATED_INITIALIZER;
@end

SWIFT_CLASS("_TtCC12SendBirdDesk12SBDSKFAQData14SBDSKFAQResult")
@interface SBDSKFAQResult : NSObject
/// Category of the question result
/// since:
/// 1.0.15
@property (nonatomic, readonly, copy) NSString * _Nullable category;
/// Question of the question result
/// since:
/// 1.0.15
@property (nonatomic, readonly, copy) NSString * _Nullable question;
/// Category of the question result
/// since:
/// 1.0.15
@property (nonatomic, readonly, copy) NSString * _Nullable answer;
/// Keyword of the question result
/// since:
/// 1.0.15
@property (nonatomic, readonly, copy) NSString * _Nullable keyword;
/// URL of the question result
/// since:
/// 1.0.15
@property (nonatomic, readonly, copy) NSString * _Nullable url;
/// ImageURL of the question result
/// since:
/// 1.0.15
@property (nonatomic, readonly, copy) NSString * _Nullable imageURL;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class SBError;
@class SBDBaseChannel;
/// This class is a main class of Sendbird Desk.
SWIFT_CLASS("_TtC12SendBirdDesk9SBDSKMain")
@interface SBDSKMain : NSObject
/// Initializes Sendbird Desk.
///
/// returns:
/// If true, the initialization is successful. This method has to be called after <a href="https://docs.sendbird.com/ref/ios/Classes/SBDMain.html#//api/name/initWithApplicationId:">initializing Sendbird SDK</a>.
+ (BOOL)initializeDesk;
/// Returns the version of Sendbird Desk.
///
/// returns:
/// The version of Sendbird Desk.
+ (NSString * _Nonnull)getSDKVersion SWIFT_WARN_UNUSED_RESULT;
/// Sets a dispatch queue for every completion handler in Sendbird Desk.
/// \param queue A dispatch queue that will be used for every completion handler.
///
+ (void)setCompletionHandlerDelegateQueue:(dispatch_queue_t _Nonnull)queue;
/// Gets an authentication with a user ID and an access token.
/// \param userId User ID
///
/// \param accessToken Access Token
///
/// \param completionHandler The handler block to execute. If the method updates this ticket successfully, the <code>error</code> will be nil.
///
+ (void)authenticateWithUserId:(NSString * _Nonnull)userId accessToken:(NSString * _Nullable)accessToken completionHandler:(void (^ _Nullable)(SBError * _Nullable))completionHandler;
/// Authenticates the current user with Sendbird Desk using the provided credentials.
/// important:
/// This method requires that <code>SBDSKMain.initializeDesk()</code> is called beforehand.
/// since:
/// [NEXT_VERSION]
/// \param userId The unique user ID to authenticate.
///
/// \param accessToken (Optional) The access token associated with the user.
///
/// \param language (Optional) Specify the language in IETF BCP 47 format. An example would be “en” and “ja”.
///
/// \param completionHandler A closure that is called when the authentication process completes.
/// If authentication is successful, the <code>error</code> will be <code>nil</code>. Otherwise, it contains
/// the error object describing the issue.
///
+ (void)authenticateWithUserId:(NSString * _Nonnull)userId accessToken:(NSString * _Nullable)accessToken language:(NSString * _Nullable)language completionHandler:(void (^ _Nullable)(SBError * _Nullable))completionHandler;
/// Checks whether the <code>channel</code> is a desk channel or not.
/// \param channel The channel instance that is necessary to check.
///
///
/// returns:
/// If true, the <code>channel</code> is a desk channel.
+ (BOOL)isDeskChannel:(SBDBaseChannel * _Nonnull)channel SWIFT_WARN_UNUSED_RESULT;
/// Sets the current customer’s custom fields. The custom fields has a key and a value in string type.
/// since:
/// 1.0.5
/// \param customFields The current customer’s custom fields.
///
/// \param completionHandler The handler block to execute. If the method sets successfully, the <code>error</code> will be nil.
///
+ (void)setCustomerCustomFields:(NSDictionary<NSString *, NSString *> * _Nonnull)customFields completionHandler:(void (^ _Nullable)(SBError * _Nullable))completionHandler;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// This class represents a channel that is related to a <code>SBDSKTicket</code>. It contains a string <code>name</code> and string <code>channelUrl</code> of the related channel.
/// since:
/// 1.0.7
SWIFT_CLASS("_TtC12SendBirdDesk19SBDSKRelatedChannel")
@interface SBDSKRelatedChannel : NSObject
/// The name of the related channel.
/// since:
/// 1.0.7
@property (nonatomic, copy) NSString * _Nonnull name;
/// The channel url of the related channel.
/// since:
/// 1.0.7
@property (nonatomic, copy) NSString * _Nonnull channelUrl;
@end

@class SBDGroupChannel;
enum SBDSKTicketPriority : NSInteger;
/// This class represents a ticket that identifies a chat between an <em>agent</em> and a customer.
SWIFT_CLASS("_TtC12SendBirdDesk11SBDSKTicket")
@interface SBDSKTicket : NSObject
/// The identification for a ticket. This property has a unique value.
@property (nonatomic, readonly) int64_t ticketId;
/// The title of this ticket.
@property (nonatomic, readonly, copy) NSString * _Nullable title;
/// The status of this ticket.
@property (nonatomic, readonly, copy) NSString * _Nullable status SWIFT_DEPRECATED_MSG("This property has been deprecated. Please use `status2` instead.");
/// The status2 of this ticket.
/// since:
/// 1.1.2
@property (nonatomic, readonly, copy) NSString * _Nullable status2;
/// The agent who is in charge of this ticket.
@property (nonatomic, readonly, strong) SBDSKAgent * _Nullable agent;
/// The channel where the <span>agent</span> and the customer are chatting.
@property (nonatomic, readonly, strong) SBDGroupChannel * _Nullable channel;
/// A dictionary that contains information you want to deliver. The key and the value of the dictionary should be a type of <code>NSString</code>.
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSString *> * _Nonnull customFields;
/// The priority of this ticket.
@property (nonatomic, readonly) enum SBDSKTicketPriority priority;
/// The related channels of this ticket.
@property (nonatomic, readonly, copy) NSArray<SBDSKRelatedChannel *> * _Nonnull relatedChannels;
/// The time in seconds taken from a customer’s first message to an agent’s first response.
/// since:
/// 1.1.4
@property (nonatomic, readonly) int64_t firstResponseTime;
/// The date and time when the customer sent the first message, in ISO 8601 format.
/// since:
/// 1.1.4
@property (nonatomic, readonly, copy) NSString * _Nonnull issuedAt;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class SBDUserMessage;
@interface SBDSKTicket (SWIFT_EXTENSION(SendBirdDesk))
/// Refreshes this ticket. After invoking this method, this ticket is updated with the latest data.
/// \param completionHandler The handler block to execute. If the method updates this ticket successfully, the <code>error</code> will be nil.
///
- (void)refreshWithCompletionHandler:(void (^ _Nullable)(SBDSKTicket * _Nullable, SBError * _Nullable))completionHandler;
/// Closes this ticket.
/// since:
/// 1.0.11
/// \param comment A comment for this ticket.
///
/// \param completionHandler Callback handler.
///
- (void)closeWithComment:(NSString * _Nullable)comment completionHandler:(void (^ _Nullable)(SBDSKTicket * _Nullable, SBError * _Nullable))completionHandler;
/// Confirms the end of the chat.
/// \param message The message object.
///
/// \param confirm The value that a customer uses in order to represent the confirmation of this ticket.
///
/// \param completionHandler The handler block to execute. If the method confirms the end of this ticket, the <code>error</code> will be nil.
///
+ (void)confirmEndOfChatWithMessage:(SBDUserMessage * _Nonnull)message confirm:(BOOL)confirm completionHandler:(void (^ _Nullable)(SBDSKTicket * _Nullable, SBError * _Nullable))completionHandler;
/// Creates a new ticket with information.
/// \param title The title of a new ticket.
///
/// \param userName The customer’s name.
///
/// \param completionHandler The handler block to execute. If the method creates a ticket successfully, the <code>ticket</code> object will be valid and the <code>error</code> will be nil.
///
+ (void)createTicketWithTitle:(NSString * _Nullable)title userName:(NSString * _Nullable)userName completionHandler:(void (^ _Nullable)(SBDSKTicket * _Nullable, SBError * _Nullable))completionHandler;
/// Creates a new ticket with information.
/// since:
/// 1.0.6
/// \param title The title of a new ticket.
///
/// \param userName The customer’s name.
///
/// \param priority The priority level of ticket.
///
/// \param completionHandler The handler block to execute. If the method creates a ticket successfully, the <code>ticket</code> object will be valid and the <code>error</code> will be nil.
///
+ (void)createTicketWithTitle:(NSString * _Nullable)title userName:(NSString * _Nullable)userName priority:(enum SBDSKTicketPriority)priority completionHandler:(void (^ _Nullable)(SBDSKTicket * _Nullable, SBError * _Nullable))completionHandler;
/// Creates a new ticket with information.
/// since:
/// 1.0.4
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     title: The title of a new ticket.
///   </li>
///   <li>
///     userName: The customer’s name.
///   </li>
///   <li>
///     groupKey: The agent group key.
///   </li>
///   <li>
///     customFields: The custom fields that the admin already sets on dashboard.
///   </li>
///   <li>
///     completionHandler: The handler block to execute. If the method creates a ticket successfully, the <code>ticket</code> object will be valid and the <code>error</code> will be nil.
///   </li>
/// </ul>
+ (void)createTicketWithTitle:(NSString * _Nullable)title userName:(NSString * _Nullable)userName groupKey:(NSString * _Nullable)groupKey customFields:(NSDictionary<NSString *, NSString *> * _Nullable)customFields completionHandler:(void (^ _Nullable)(SBDSKTicket * _Nullable, SBError * _Nullable))completionHandler;
/// Creates a new ticket with information.
/// since:
/// 1.0.6
/// \param title The title of a new ticket.
///
/// \param userName The customer’s name.
///
/// \param groupKey The agent group key.
///
/// \param customFields The custom fields that the admin already sets on dashboard.
///
/// \param priority The priority level of ticket.
///
/// \param completionHandler The handler block to execute. If the method creates a ticket successfully, the <code>ticket</code> object will be valid and the <code>error</code> will be nil.
///
+ (void)createTicketWithTitle:(NSString * _Nullable)title userName:(NSString * _Nullable)userName groupKey:(NSString * _Nullable)groupKey customFields:(NSDictionary<NSString *, NSString *> * _Nullable)customFields priority:(enum SBDSKTicketPriority)priority completionHandler:(void (^ _Nullable)(SBDSKTicket * _Nullable, SBError * _Nullable))completionHandler;
/// Creates a new ticket with information.
/// since:
/// 1.0.7
/// \param title The title of a new ticket.
///
/// \param userName The customer’s name.
///
/// \param relatedChannels List of Urls of the channels related with the ticket.
///
/// \param completionHandler The handler block to execute. If the method creates a ticket successfully, the <code>ticket</code> object will be valid and the <code>error</code> will be nil.
///
+ (void)createTicketWithTitle:(NSString * _Nullable)title userName:(NSString * _Nullable)userName relatedChannels:(NSArray<NSString *> * _Nullable)relatedChannels completionHandler:(void (^ _Nullable)(SBDSKTicket * _Nullable, SBError * _Nullable))completionHandler;
/// Creates a new ticket with information.
/// since:
/// 1.0.7
/// \param title The title of a new ticket.
///
/// \param userName The customer’s name.
///
/// \param groupKey The agent group key.
///
/// \param customFields The custom fields that the admin already sets on dashboard.
///
/// \param priority The priority level of ticket.
///
/// \param relatedChannels List of Urls of the channels related with the ticket.
/// - completionHandler: The handler block to execute. If the method creates a ticket successfully, the <code>ticket</code> object will be valid and the <code>error</code> will be nil.
///
+ (void)createTicketWithTitle:(NSString * _Nullable)title userName:(NSString * _Nullable)userName groupKey:(NSString * _Nullable)groupKey customFields:(NSDictionary<NSString *, NSString *> * _Nullable)customFields priority:(enum SBDSKTicketPriority)priority relatedChannels:(NSArray<NSString *> * _Nullable)relatedChannels completionHandler:(void (^ _Nullable)(SBDSKTicket * _Nullable, SBError * _Nullable))completionHandler;
/// Creates a new ticket with information.
/// since:
/// 1.0.7
/// \param title The title of a new ticket.
///
/// \param userName The customer’s name.
///
/// \param groupKey The agent group key.
///
/// \param customFields The custom fields that the admin already sets on dashboard.
///
/// \param priority The priority level of ticket.
///
/// \param relatedChannels List of Urls of the channels related with the ticket.
///
/// \param botKey Key of a bot to assign to.
/// - completionHandler: The handler block to execute. If the method creates a ticket successfully, the <code>ticket</code> object will be valid and the <code>error</code> will be nil.
///
+ (void)createTicketWithTitle:(NSString * _Nullable)title userName:(NSString * _Nullable)userName groupKey:(NSString * _Nullable)groupKey customFields:(NSDictionary<NSString *, NSString *> * _Nullable)customFields priority:(enum SBDSKTicketPriority)priority relatedChannels:(NSArray<NSString *> * _Nullable)relatedChannels botKey:(NSString * _Nullable)botKey completionHandler:(void (^ _Nullable)(SBDSKTicket * _Nullable, SBError * _Nullable))completionHandler;
/// Gets the count of the opened tickets.
/// \param completionHandler The handler block to execute. The <code>count</code> is the count of the opened tickets. If the method gets the count successfully, the <code>error</code> will be nil.
///
+ (void)getOpenCountWithCompletionHandler:(void (^ _Nullable)(NSInteger, SBError * _Nullable))completionHandler;
/// Gets the list of the opened tickets with the offset and custom data filter.
/// since:
/// 1.0.3
/// \param offset The offset that represents the position of the full list. It must be 0 in order to get the latest list.
///
/// \param completionHandler The handler block to execute. The <code>tickets</code> is the array of the opened tickets. The array can be empty, but it doesn’t mean that there is an error. If there is the next page of the list, the <code>hasNext</code> will be YES. If the method gets the list
///
+ (void)getOpenedListWithOffset:(NSInteger)offset completionHandler:(void (^ _Nullable)(NSArray<SBDSKTicket *> * _Nullable, BOOL, SBError * _Nullable))completionHandler;
/// Gets the list of the opened tickets with the offset and custom data filter.
/// since:
/// 1.0.3
/// \param offset The offset that represents the position of the full list. It must be 0 in order to get the latest list.
///
/// \param customFieldFilter The custom field filter.
///
/// \param completionHandler The handler block to execute. The <code>tickets</code> is the array of the opened tickets. The array can be empty, but it doesn’t mean that there is an error. If there is the next page of the list, the <code>hasNext</code> will be YES. If the method gets the list
///
+ (void)getOpenedListWithOffset:(NSInteger)offset customFieldFilter:(NSDictionary<NSString *, NSString *> * _Nullable)customFieldFilter completionHandler:(void (^ _Nullable)(NSArray<SBDSKTicket *> * _Nullable, BOOL, SBError * _Nullable))completionHandler;
/// Gets the list of the closed tickets with the offset.
/// \param offset The offset that represents the position of the full list.
///
/// \param completionHandler The handler block to execute. The <code>tickets</code> is the array of the closed tickets. The array can be empty, but it doesn’t mean that there is an error. If there is the next page of the list, the <code>hasNext</code> will be YES. If the method gets the list successfully, the <code>error</code> will be nil.
///
+ (void)getClosedListWithOffset:(NSInteger)offset completionHandler:(void (^ _Nullable)(NSArray<SBDSKTicket *> * _Nullable, BOOL, SBError * _Nullable))completionHandler;
/// Gets the list of the closed tickets with the offset.
/// \param offset The offset that represents the position of the full list.
///
/// \param customFieldFilter The custom field filter.
///
/// \param completionHandler The handler block to execute. The <code>tickets</code> is the array of the closed tickets. The array can be empty, but it doesn’t mean that there is an error. If there is the next page of the list, the <code>hasNext</code> will be YES. If the method gets the list successfully, the <code>error</code> will be nil.
///
+ (void)getClosedListWithOffset:(NSInteger)offset customFieldFilter:(NSDictionary<NSString *, NSString *> * _Nullable)customFieldFilter completionHandler:(void (^ _Nullable)(NSArray<SBDSKTicket *> * _Nullable, BOOL, SBError * _Nullable))completionHandler;
/// Gets a ticket by the group <span>channel</span> URL.
/// \param channelUrl The group <span>channel</span> URL that is connected with a ticket.
///
/// \param completionHandler The handler block to execute. If the method gets a ticket successfully, the <code>error</code> will be nil.
///
+ (void)getByChannelUrl:(NSString * _Nonnull)channelUrl completionHandler:(void (^ _Nullable)(SBDSKTicket * _Nullable, SBError * _Nullable))completionHandler;
/// Reopens the ticket.
/// @since 1.0.3
/// \param completionHandler The handler block to execute. If the method gets a ticket successfully, the <code>error</code> will be nil.
///
- (void)reopenWithCompletionHandler:(void (^ _Nullable)(SBDSKTicket * _Nullable, SBError * _Nullable))completionHandler;
/// Submits the customer’s feedback.
/// since:
/// 1.0.5
/// \param message The message object for the feedback.
///
/// \param score The score.
///
/// \param comment The comment.
///
/// \param completionHandler The handler block to execute. If the method submits the feedback, the <code>error</code> will be nil.
///
+ (void)submitFeedbackWithMessage:(SBDUserMessage * _Nonnull)message score:(NSInteger)score comment:(NSString * _Nullable)comment completionHandler:(void (^ _Nullable)(SBDSKTicket * _Nullable, SBError * _Nullable))completionHandler;
/// Sets the specific ticket’s custom fields. The custom fields has a key and a value in string type.
/// since:
/// 1.0.6
/// \param customFields The specific ticket’s custom fields.
///
/// \param completionHandler The handler block to execute. If the method sets successfully, the <code>error</code> will be nil.
///
- (void)setCustomFields:(NSDictionary<NSString *, NSString *> * _Nonnull)customFields completionHandler:(void (^ _Nullable)(SBError * _Nullable))completionHandler;
/// Sets the specific ticket’s priority. The priority has a string type key and a <code>SBDSKTicketPriority</code> type value
/// since:
/// 1.0.6
/// \param priority The specific ticket’s priority.
///
/// \param completionHandler The handler block to execute. If the method sets successfully, the <code>error</code> will be nil.
///
- (void)setPriority:(enum SBDSKTicketPriority)priority completionHandler:(void (^ _Nullable)(SBError * _Nullable))completionHandler;
/// Sets the specific ticket’s related channels. The method accepts an array of string, and updates the <code>SBDSKRelatedChannel</code> array of the ticket.
/// since:
/// 1.0.7
/// \param relatedChannels The specific ticket’s related channels.
///
/// \param completionHandler The handler block to execute. If the method sets successfully, the <code>error</code> will be nil.
///
- (void)setRelatedChannels:(NSArray<NSString *> * _Nonnull)relatedChannels completionHandler:(void (^ _Nullable)(SBError * _Nullable))completionHandler;
/// Cancel a ticket.
/// since:
/// 1.0.14
/// \param groupKeyForTransfer group key to transfer this ticket to. Optional.
///
/// \param completionHandler The handler block to execute. If the method sets successfully, the <code>error</code> will be nil.
///
- (void)cancelWithGroupKeyForTransfer:(NSString * _Nullable)groupKeyForTransfer completionHandler:(void (^ _Nullable)(SBDSKTicket * _Nullable, SBError * _Nullable))completionHandler;
/// Select a question
/// since:
/// 1.0.14
/// \param faqFileId File id of FAQ question to select.
///
/// \param question Question to select.
///
/// \param completionHandler The handler block to execute. If the method sets successfully, the <code>error</code> will be nil.
///
- (void)selectQuestionWithFaqFileId:(int64_t)faqFileId question:(NSString * _Nonnull)question completionHandler:(void (^ _Nullable)(SBError * _Nullable))completionHandler;
@end

typedef SWIFT_ENUM(NSInteger, SBDSKTicketPriority, open) {
  SBDSKTicketPriorityLow = 0,
  SBDSKTicketPriorityMedium = 1,
  SBDSKTicketPriorityHigh = 2,
  SBDSKTicketPriorityUrgent = 3,
};

#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#if defined(__cplusplus)
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif
